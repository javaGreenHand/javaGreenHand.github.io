{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/dlw.jpg","path":"images/dlw.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wxpay.JPG","path":"images/wxpay.JPG","modified":0,"renderable":1},{"_id":"themes/next/source/images/zfbpay.JPG","path":"images/zfbpay.JPG","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1546910448500},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1546910448500},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1546910448501},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1546910448500},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1546910448501},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1546910448501},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1546910448502},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1546910448502},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1546910448503},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1546910448502},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1546910448503},{"_id":"themes/next/_config.yml","hash":"49f45e1868afe3b87673ae19cd7a11147f8889b8","modified":1546910448504},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1546910448503},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1546910448504},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1546910448505},{"_id":"themes/next/package.json","hash":"55305ae40690c059cb9140900eb20f9e7f3a7707","modified":1546910448546},{"_id":"source/categories/index.md","hash":"29c0847328d0a937c6eb5cc67d6d76c57692c075","modified":1546910448452},{"_id":"source/_posts/20170918.md","hash":"e98e57276d0dde81e06d64596cfa626ccd494e14","modified":1547513095029},{"_id":"source/_posts/20171212.md","hash":"9877a3b2d70fe72f7a03010dd7d02ead0b28d347","modified":1547513095030},{"_id":"source/_posts/20180619.md","hash":"d6f9b504e2964174954b46ba19b186f44e19c90a","modified":1547513095032},{"_id":"source/_posts/20180618.md","hash":"616899e675499dd7d0bde15e00c8458b61ab9f19","modified":1547513095031},{"_id":"source/_posts/20180617.md","hash":"fb1e7c195489c9d0d70dd5a3332950aecd6cb458","modified":1547513095031},{"_id":"source/_posts/20180630.md","hash":"c27071eb86d5d9da6d9f65a79264de12cc3f5951","modified":1547513095033},{"_id":"source/_posts/20180720.md","hash":"ab2a9aeb994b485bb5cc1107dc6c82db2bd6fcf6","modified":1547513095034},{"_id":"source/_posts/20180725.md","hash":"6839f887fd4630e4ac122925c16c0be4acb0cd8e","modified":1547513095035},{"_id":"source/_posts/20180727.md","hash":"ca7d682d229fd386f9d50089f2e4197c7677fd63","modified":1547513095036},{"_id":"source/_posts/20180802.md","hash":"f929eb056f18c1a1e84e8c7d58bfa6e3d09c4fa3","modified":1547513095037},{"_id":"source/_posts/20180815.md","hash":"322c4ab9a099ac8b0e039eecca4637fdbebc07ab","modified":1547513095038},{"_id":"source/_posts/20180916.md","hash":"5c54093a074ae4379ed5adc2712905520698e2b6","modified":1547513095038},{"_id":"source/_posts/20181010.md","hash":"809c4cdb92fc6e75d36906c4162792017355ce3b","modified":1547513095039},{"_id":"source/_posts/20181023.md","hash":"4df3baba6a11898ebfc37d6d0a345b18958dccd3","modified":1547513095040},{"_id":"source/_posts/20181111.md","hash":"b3da4bca13f647b98047076b4e9b3a27603fb6f4","modified":1547513095040},{"_id":"source/_posts/20181112.md","hash":"7f7d5292aadba242df0de0ce02efcc37014ac516","modified":1547513095041},{"_id":"source/_posts/20181113.md","hash":"a2c91f0c1be08c98535a14b25b5634af84763bad","modified":1547513095041},{"_id":"source/_posts/20181115.md","hash":"88c5eae635752a3abe907c01de1dbfc216b5c874","modified":1547513095042},{"_id":"source/_posts/20181114.md","hash":"383021819f9c27e5604c84ced548d8e3c53abd24","modified":1547513095042},{"_id":"source/_posts/20190107.md","hash":"d5c2f6c593ce96b3e6199b3673193e1c3022b5be","modified":1547513095042},{"_id":"source/_posts/20190112.md","hash":"6406c1bf44f4cf401442dba8b789b70fd01ebb71","modified":1547513768861},{"_id":"source/tags/index.md","hash":"c82a9f2ddf4dc397e406bdd227948780d9c32953","modified":1546910448453},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1546910448505},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1546910448506},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1546910448506},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1546910448507},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1546910448507},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1546910448508},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1546910448508},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1546910448508},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1546910448509},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1546910448509},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1546910448511},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1546910448512},{"_id":"themes/next/layout/_layout.swig","hash":"b88585f9e1b7071f6670b20b77b656edd087ccc9","modified":1546910448513},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1546910448544},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1546910448544},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1546910448544},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1546910448545},{"_id":"themes/next/layout/page.swig","hash":"22ba721a9688d490fc66f360e5a319288b63b05a","modified":1546910448545},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1546910448547},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1546910448545},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1546910448546},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1546910448547},{"_id":"themes/next/source/404.html","hash":"9ce7edc47cd7f94f374ea3d93b31e1906e15d64f","modified":1546910448551},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1546910448715},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546910448605},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1546910448512},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1546910448513},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a229b569743555215a4f2561997ad496d81e938","modified":1546910448516},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1546910448517},{"_id":"themes/next/layout/_partials/head.swig","hash":"09b110f77c415c5b71ebd886771a10bc84b95633","modified":1546910448517},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1546910448519},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1546910448519},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1546910448519},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1546910448520},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1546910448514},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1546910448514},{"_id":"themes/next/layout/_macro/post.swig","hash":"dc3792e703d10daacdb86a9f8d03e846d5b4da83","modified":1546910448514},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1546910448515},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0cab451f1df8bba76ee8c81ab345d4de7ad0e15b","modified":1546910448515},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1546910448516},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1546910448538},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1546910448539},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1546910448539},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1546910448716},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1546910448539},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1546910448540},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1546910448540},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1546910448525},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1546910448525},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1546910448548},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1546910448548},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1546910448548},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1546910448530},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1546910448549},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1546910448550},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1546910448550},{"_id":"themes/next/scripts/tags/note.js","hash":"fc4958427ca7bdb47a7d830077f432ed824973e4","modified":1546910448550},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1546910448604},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1546910448605},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1546910448606},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1546910448606},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1546910448607},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1546910448607},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1546910448608},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1546910448608},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1546910448609},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1546910448609},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546910448610},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546910448610},{"_id":"themes/next/source/images/dlw.jpg","hash":"7cbaaa261b568973a2c957e12de9cf3443100f9a","modified":1546910448610},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1546910448611},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1546910448611},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1546910448612},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546910448528},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546910448529},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546910448587},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546910448588},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546910448591},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546910448602},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546910448604},{"_id":"themes/next/source/images/wxpay.JPG","hash":"a4001e3adf5d8fcc5062eddf5932f53b9340020f","modified":1546910448613},{"_id":"themes/next/source/images/zfbpay.JPG","hash":"497817b0d96353853c64b5e2f4931bca2f219480","modified":1546910448614},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1546910448505},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1546910448518},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1546910448520},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1546910448521},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1546910448521},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1546910448518},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1546910448522},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1546910448522},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1546910448522},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1546910448523},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1546910448531},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1546910448532},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1546910448531},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1546910448533},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1546910448533},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1546910448533},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1546910448532},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1546910448534},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1546910448534},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1546910448534},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1546910448535},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1546910448535},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1546910448536},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"be2aaeb8f05979e2ba501248480d5294256d61f2","modified":1546910448537},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1546910448536},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1546910448537},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1546910448538},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1546910448537},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1546910448542},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1546910448543},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1546910448542},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1546910448543},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1546910448527},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1546910448529},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1546910448586},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1546910448589},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1546910448591},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1546910448602},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1546910448603},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1546910448603},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1546910448614},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1546910448615},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ad83d5e453501f7c16785662d8803792aacd22a","modified":1546910448615},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1546910448616},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1546910448715},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1546910448616},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1546910448617},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1546910448617},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1546910448617},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1546910448618},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1546910448621},{"_id":"themes/next/source/js/src/utils.js","hash":"e7465a22b536ed15006a5f5556d9a4e633f6bd71","modified":1546910448621},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1546910448645},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1546910448645},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1546910448646},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1546910448647},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1546910448635},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1546910448649},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1546910448649},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1546910448650},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1546910448650},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1546910448689},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1546910448632},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1546910448648},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1546910448690},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1546910448692},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1546910448692},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1546910448636},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1546910448693},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1546910448694},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1546910448694},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1546910448695},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1546910448695},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1546910448696},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1546910448696},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1546910448696},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1546910448697},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1546910448697},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1546910448693},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1546910448702},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1546910448702},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1546910448691},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1546910448703},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1546910448691},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1546910448705},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1546910448710},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1546910448704},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1546910448711},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1546910448704},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1546910448714},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1546910448714},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1546910448701},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1546910448541},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1546910448541},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d68bdfcdb9d9e0bf60ed9a2df88e0b55cbfcc1e6","modified":1546910448552},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1546910448553},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1546910448552},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1546910448553},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1546910448554},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1546910448565},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1546910448576},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1546910448583},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"eec22651977ea25b5e65e8cb1b4906eef69ec588","modified":1546910448583},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1546910448584},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1546910448584},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1546910448585},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1546910448592},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1546910448593},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1546910448593},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1546910448585},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1546910448595},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1546910448594},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1546910448595},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1546910448594},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1546910448599},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1546910448601},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1546910448600},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1546910448600},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1546910448602},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1546910448601},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1546910448597},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1546910448713},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1546910448597},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1546910448597},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1546910448598},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1546910448598},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1546910448618},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1546910448637},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1546910448631},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1546910448638},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1546910448639},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1546910448639},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1546910448640},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1546910448643},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1546910448644},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1546910448645},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1546910448647},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1546910448648},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1546910448638},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1546910448651},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1546910448630},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1546910448652},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1546910448690},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1546910448651},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1546910448629},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1546910448627},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1546910448687},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1546910448713},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1546910448554},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1546910448555},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1546910448555},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1546910448556},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1546910448560},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1546910448563},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1546910448564},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1546910448559},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1546910448564},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1546910448564},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1546910448561},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1546910448565},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1546910448562},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1546910448566},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1546910448563},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1546910448567},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1546910448567},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1546910448566},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1546910448568},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1546910448567},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1546910448568},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1546910448569},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1546910448569},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1546910448569},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1546910448570},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1546910448570},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1546910448571},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1546910448570},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1546910448572},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bc08cfb2ef2ff44ba3fc7dffdb2deb01a9d17d15","modified":1546910448571},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1546910448573},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1546910448573},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1546910448573},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1546910448572},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1546910448574},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1546910448574},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1546910448575},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1546910448575},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1546910448575},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1546910448577},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1546910448576},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1546910448577},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1546910448578},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1546910448578},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74019008ba973ab30f0f4a6b3c2cd33c66d3a4b4","modified":1546910448578},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1546910448580},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1546910448580},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1546910448579},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1546910448581},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1546910448581},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1546910448581},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1546910448582},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1546910448582},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1546910448596},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1546910448596},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1546910448599},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1546910448623},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1546910448623},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1546910448709},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1546910448640},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1546910448641},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1546910448642},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1546910448642},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1546910448642},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1546910448643},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1546910448681},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1546910448683},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1546910448688},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1546910448687},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1546910448624},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1546910448710},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1546910448626},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1546910448635},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1546910448708},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1546910448685},{"_id":"public/categories/index.html","hash":"804a771043cdd0a58d4340286a87d2033929f1ea","modified":1547513860768},{"_id":"public/tags/index.html","hash":"4c3db44f4beaa1f0ab7ba334baddaf332b8d7ee7","modified":1547513860768},{"_id":"public/2019/01/15/20190107/index.html","hash":"9a84639ab2ff49fc436d293158897fd64adc36f5","modified":1547513860768},{"_id":"public/2019/01/08/20171212/index.html","hash":"f5dbed507dab1965a937c755c5b5885f2e165578","modified":1547513860768},{"_id":"public/2019/01/08/20170918/index.html","hash":"7384cfc768d0496536b56d0154879ac57754bb17","modified":1547513860768},{"_id":"public/archives/page/3/index.html","hash":"289cf0abffe3bfcf176782059407ac947b3d71f2","modified":1547513860768},{"_id":"public/archives/2019/page/3/index.html","hash":"e0472e5353406ce5f2138b83f6453669e7b7e6b6","modified":1547513860768},{"_id":"public/archives/2019/01/page/3/index.html","hash":"41775263fe32c9888a5703c23a8d21d7f356075e","modified":1547513860768},{"_id":"public/categories/Other/index.html","hash":"058b63b574bdd0cbc8ba8a3f4b12e0db2750bdb2","modified":1547513860768},{"_id":"public/categories/Database/index.html","hash":"b1482d7f40ca8df800e6e9490b5d82beb934b5f1","modified":1547513860768},{"_id":"public/categories/Java/index.html","hash":"08448ecbe35c6999baeb53a3191b7800251355e5","modified":1547513860768},{"_id":"public/categories/Java/page/2/index.html","hash":"5bb2da1ace4c84ff60a630a6ed3da88576d92c02","modified":1547513860768},{"_id":"public/categories/Edge/index.html","hash":"c8da29cfa65b62cc76b75a7c7126f01864fe2a2f","modified":1547513860768},{"_id":"public/categories/其他/index.html","hash":"b28274e8121be05caacea1082035cb42dd8701fa","modified":1547513860769},{"_id":"public/page/3/index.html","hash":"a4bb72d37f74550546adebcd4497e0d8fca14488","modified":1547513860769},{"_id":"public/tags/MySQL/index.html","hash":"3f9577683a39a71d7153a21975422a72a0c48363","modified":1547513860769},{"_id":"public/tags/I-O/index.html","hash":"63c0ebc53e298bb6f1f2e850cca3d42064aef671","modified":1547513860769},{"_id":"public/tags/基础/index.html","hash":"a5fdec21ea9e3a11ef733ca234a573c6a99c2222","modified":1547513860769},{"_id":"public/tags/BPM/index.html","hash":"b1a44a4aae5589593106895e76c893fa50c3916e","modified":1547513860769},{"_id":"public/tags/集合/index.html","hash":"a3fcbc53ac5d58a5deeec086b80463a01288b6d9","modified":1547513860769},{"_id":"public/tags/设计模式/index.html","hash":"2119c7ee26a1bf1da4e3187a773b76d1a0e5d101","modified":1547513860769},{"_id":"public/tags/数据结构/index.html","hash":"981dc58682d5d59eb88f0b581f451866c144b63f","modified":1547513860769},{"_id":"public/tags/JVM/index.html","hash":"68dd0321d6772d7765a2233e648e0be291cf76e8","modified":1547513860769},{"_id":"public/tags/容器/index.html","hash":"e66f54f6eb39265b1d1c5f177273e81a3f0b464e","modified":1547513860769},{"_id":"public/tags/缓存技术/index.html","hash":"7a139a2d9b4aa51ea3c2e7c5ebd309768f369d6f","modified":1547513860769},{"_id":"public/tags/分布式/index.html","hash":"aafe85af6e89f1bbba7e821f5ea6dfe25ee56fcd","modified":1547513860769},{"_id":"public/tags/微服务/index.html","hash":"13ff087fb6fbeb139e94bed5748b963474f0e212","modified":1547513860769},{"_id":"public/tags/消息队列/index.html","hash":"850502d144b8a052443174d6a10622fd48c7f726","modified":1547513860769},{"_id":"public/tags/面试/index.html","hash":"465e02958f21ffcefca53816186e945f141aca6e","modified":1547513860770},{"_id":"public/tags/全文搜索引擎/index.html","hash":"781041f71f0e59c9ec159aa7dfa6bfcc6ced01ab","modified":1547513860770},{"_id":"public/tags/总结/index.html","hash":"1d7c903310332ac86dee5dc8a442b9cfc3ac3cbd","modified":1547513860770},{"_id":"public/tags/多线程/index.html","hash":"442c9df36b4a274ab0c3ca104e5cc56cae929a36","modified":1547513860770},{"_id":"public/tags/开源框架/index.html","hash":"b5e22561a88d572c51e26074b2b8e12cf989f85f","modified":1547513860770},{"_id":"public/2019/01/15/20181115/index.html","hash":"2a91ddaea76498654cc3627360007085396c8800","modified":1547513860770},{"_id":"public/2019/01/15/20181114/index.html","hash":"ee3dcee8761849ce950daa752de4d1fb085da67a","modified":1547513860770},{"_id":"public/2019/01/15/20181113/index.html","hash":"3a5d425ca7ff95c01b086b47a9fff1a700b92130","modified":1547513860770},{"_id":"public/2019/01/15/20181112/index.html","hash":"0e152fea4ea3dcb3074472a4ce142c615673dd85","modified":1547513860770},{"_id":"public/2019/01/15/20181111/index.html","hash":"c4fac5f92978f6425480ff7dc3b3e2a364056582","modified":1547513860770},{"_id":"public/2019/01/12/20190112/index.html","hash":"ec4eb12fdb572526c9e02e6c98f10bd35750c81d","modified":1547513860770},{"_id":"public/2019/01/08/20181023/index.html","hash":"58e2144de54e40043f40b66b027a4d0987635cb0","modified":1547513860770},{"_id":"public/2019/01/08/20181010/index.html","hash":"c3de7162aca69bfc57ab853f39540a9326657583","modified":1547513860770},{"_id":"public/2019/01/08/20180916/index.html","hash":"2dd2b6f6f2cab3b7d87904e065424aea1e0dac7f","modified":1547513860770},{"_id":"public/2019/01/08/20180802/index.html","hash":"84b4e7e4f9388ed8b7ab0aac6e31a2cfcc688ba8","modified":1547513860770},{"_id":"public/2019/01/08/20180815/index.html","hash":"9dd4403de1db97c7291fa4622be5c0639bcb689d","modified":1547513860770},{"_id":"public/2019/01/08/20180727/index.html","hash":"db8dff16e4b24b94d2adedaac846cbc7079504c8","modified":1547513860770},{"_id":"public/2019/01/08/20180725/index.html","hash":"e78d4e8578d3176b1d0d32f3e0ebf54f0cac5433","modified":1547513860771},{"_id":"public/2019/01/08/20180720/index.html","hash":"e7497872c87f451077f9b6d1674a02a598cd4e57","modified":1547513860771},{"_id":"public/2019/01/08/20180630/index.html","hash":"2d42f80fb0b27c74d860d10a6f62441d86ac37fe","modified":1547513860771},{"_id":"public/2019/01/08/20180618/index.html","hash":"1fb4360cc0d2f6deb05f70b6c89634160dd2a7de","modified":1547513860771},{"_id":"public/2019/01/08/20180619/index.html","hash":"8d2476b2837432c0dc3eecc6267179e194c148b3","modified":1547513860771},{"_id":"public/2019/01/08/20180617/index.html","hash":"192ab8638e089d0ae7e6cd525a612f561d8c80ab","modified":1547513860771},{"_id":"public/archives/index.html","hash":"492a9847aeb250e51e2fa22630367119e25494cd","modified":1547513860771},{"_id":"public/archives/page/2/index.html","hash":"252720cdb9c5afb4804b0a19aa9fdcb4df104333","modified":1547513860771},{"_id":"public/archives/2019/index.html","hash":"01a852ce2ac2e1795f5ac8d8b0c9c6b818cdf322","modified":1547513860771},{"_id":"public/archives/2019/page/2/index.html","hash":"c71585bfd047697afdaa35584f1dcad183df83e5","modified":1547513860771},{"_id":"public/archives/2019/01/index.html","hash":"1fd52fdc9d40fcca16946fb55db0026bb8d514a2","modified":1547513860771},{"_id":"public/archives/2019/01/page/2/index.html","hash":"347cf083d4ba64a2013c02e0c83a71a2c76f6df9","modified":1547513860771},{"_id":"public/index.html","hash":"8f693ead0730210d4978f576f43fda72c9204b73","modified":1547513860771},{"_id":"public/page/2/index.html","hash":"04c7c844742b4212ccc60843788cda5a6e3f4d81","modified":1547513860771},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547513860781},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1547513860781},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1547513860781},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1547513860781},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1547513860781},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1547513860781},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1547513860781},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1547513860781},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1547513860782},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547513860782},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547513860782},{"_id":"public/images/dlw.jpg","hash":"7cbaaa261b568973a2c957e12de9cf3443100f9a","modified":1547513860782},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1547513860782},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1547513860782},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547513860782},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1547513860782},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1547513860782},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547513860782},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547513860782},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547513860782},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547513860782},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547513860782},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547513860782},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1547513860782},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547513860782},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547513860782},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547513860782},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547513860782},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547513860782},{"_id":"public/images/wxpay.JPG","hash":"a4001e3adf5d8fcc5062eddf5932f53b9340020f","modified":1547513861525},{"_id":"public/images/zfbpay.JPG","hash":"497817b0d96353853c64b5e2f4931bca2f219480","modified":1547513861526},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547513861527},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547513861527},{"_id":"public/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1547513861529},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1547513861529},{"_id":"public/js/src/bootstrap.js","hash":"03190d70e2347a0b29d185295445c6762a4455e8","modified":1547513861529},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1547513861529},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1547513861529},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1547513861529},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1547513861530},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1547513861530},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1547513861530},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1547513861530},{"_id":"public/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1547513861530},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547513861530},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1547513861530},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1547513861530},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1547513861530},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1547513861531},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1547513861531},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547513861531},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547513861531},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547513861531},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547513861531},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1547513861531},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1547513861531},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1547513861531},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1547513861531},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547513861531},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1547513861531},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1547513861531},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1547513861532},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1547513861532},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1547513861532},{"_id":"public/css/main.css","hash":"d5004617ee79da880a41113f21b78b0ffeb92a5b","modified":1547513861532},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547513861537},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547513861538},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1547513861541},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1547513861541},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1547513861542},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1547513861542},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547513861542},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1547513861542},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1547513861542},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547513861542},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1547513861544},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1547513861544},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1547513861544},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1547513861557},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1547513861557},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1547513861557},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1547513861558},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1547513861558},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1547513861558},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1547513861562},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1547513861567},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1547513861592},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1547513861592},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1547513861626},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1547513861654},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1547513861654},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1547513861676},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1547513861687},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1547513861719}],"Category":[{"name":"Other","_id":"cjqx1smkg0004qwvgx7g9wpyy"},{"name":"Database","_id":"cjqx1smkk0009qwvgxs5cwx4p"},{"name":"Java","_id":"cjqx1smkn000fqwvgbiz3qi7c"},{"name":"Edge","_id":"cjqx1sml00016qwvgj6q4zpv0"},{"name":"其他","_id":"cjqx1sml6001mqwvgjffapsun"}],"Data":[],"Page":[{"title":"分类","date":"2017-12-23T12:34:27.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-12-23 20:34:27\ntype: \"categories\"\n---\n","updated":"2019-01-08T01:20:48.452Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjqx1smk80000qwvgnu7jfi59","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-07-28T07:17:20.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-07-28 15:17:20\ntype: \"tags\"\n---\n","updated":"2019-01-08T01:20:48.453Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjqx1smke0002qwvg5i1f4ttg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"技能树","_content":"\n努力很容易，坚持努力很难，不忘初心，方得始终。\n<!-- more -->\n# Java\n* 基础（重点）\n* 集合（重点）\n* 多线程（重点）\n* I/O（重点）\n* JVM（重点）\n* 设计模式\n* 数据结构\n* 缓存技术\n* 消息队列\n* 开源框架（重点）\n* 容器\n\n# 数据库\n* [MySQL](/tags/MySQL/)（重点）\n* PostgreSQL\n\n# 前沿技术\n* 分布式\n* 微服务\n\n# 工具\n* Maven\n* Git\n* Linux\n\n# 其他\n* 面试（重点）\n","source":"_posts/20170918.md","raw":"---\ntitle: 技能树\ncategories: Other\n---\n\n努力很容易，坚持努力很难，不忘初心，方得始终。\n<!-- more -->\n# Java\n* 基础（重点）\n* 集合（重点）\n* 多线程（重点）\n* I/O（重点）\n* JVM（重点）\n* 设计模式\n* 数据结构\n* 缓存技术\n* 消息队列\n* 开源框架（重点）\n* 容器\n\n# 数据库\n* [MySQL](/tags/MySQL/)（重点）\n* PostgreSQL\n\n# 前沿技术\n* 分布式\n* 微服务\n\n# 工具\n* Maven\n* Git\n* Linux\n\n# 其他\n* 面试（重点）\n","slug":"20170918","published":1,"date":"2019-01-08T01:20:48.443Z","updated":"2019-01-15T00:44:55.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smk90001qwvgm4w30e4d","content":"<p>努力很容易，坚持努力很难，不忘初心，方得始终。<br><a id=\"more\"></a></p>\n<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1><ul>\n<li>基础（重点）</li>\n<li>集合（重点）</li>\n<li>多线程（重点）</li>\n<li>I/O（重点）</li>\n<li>JVM（重点）</li>\n<li>设计模式</li>\n<li>数据结构</li>\n<li>缓存技术</li>\n<li>消息队列</li>\n<li>开源框架（重点）</li>\n<li>容器</li>\n</ul>\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><ul>\n<li><a href=\"/tags/MySQL/\">MySQL</a>（重点）</li>\n<li>PostgreSQL</li>\n</ul>\n<h1 id=\"前沿技术\"><a href=\"#前沿技术\" class=\"headerlink\" title=\"前沿技术\"></a>前沿技术</h1><ul>\n<li>分布式</li>\n<li>微服务</li>\n</ul>\n<h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><ul>\n<li>Maven</li>\n<li>Git</li>\n<li>Linux</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li>面试（重点）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>努力很容易，坚持努力很难，不忘初心，方得始终。<br>","more":"</p>\n<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1><ul>\n<li>基础（重点）</li>\n<li>集合（重点）</li>\n<li>多线程（重点）</li>\n<li>I/O（重点）</li>\n<li>JVM（重点）</li>\n<li>设计模式</li>\n<li>数据结构</li>\n<li>缓存技术</li>\n<li>消息队列</li>\n<li>开源框架（重点）</li>\n<li>容器</li>\n</ul>\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><ul>\n<li><a href=\"/tags/MySQL/\">MySQL</a>（重点）</li>\n<li>PostgreSQL</li>\n</ul>\n<h1 id=\"前沿技术\"><a href=\"#前沿技术\" class=\"headerlink\" title=\"前沿技术\"></a>前沿技术</h1><ul>\n<li>分布式</li>\n<li>微服务</li>\n</ul>\n<h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><ul>\n<li>Maven</li>\n<li>Git</li>\n<li>Linux</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li>面试（重点）</li>\n</ul>"},{"title":"MySQL 5.7.20安装和卸载","_content":"\nMySQL 5.7.20安装和卸载\n<!-- more -->\n\n# MySQL安装\n1. 下载[mysql](https://dev.mysql.com/downloads/mysql/)\n将文件解压，解压后在:`E:\\Java\\mysql-5.7.20-winx64`\n2. 配置环境变量\n将`E:\\Java\\mysql-5.7.20-winx64\\bin`添加至系统变量Path\n3. 用管理员身份运行CMD，依次输入下面的命令即可。\n`mysqld --initialize --user=mysql --console`\n初始化data文件夹，并生成一个临时密码。\n`mysqld -install`\n安装MySQL服务\n`net start mysql`\n启动MySQL服务\n`mysql -u root -p`\n输入刚才生成的临时密码\n`set password = password('123456');`\n修改密码为123456\n\n# MySQL卸载\n1. 用管理员身份运行CMD，执行以下两个命令\n`net stop mysql` 停止MySQL\n`mysqld -remove` 删除服务\n2. 删除mysql注册表","source":"_posts/20171212.md","raw":"---\ntitle: MySQL 5.7.20安装和卸载\ntags: MySQL\ncategories: Database\n---\n\nMySQL 5.7.20安装和卸载\n<!-- more -->\n\n# MySQL安装\n1. 下载[mysql](https://dev.mysql.com/downloads/mysql/)\n将文件解压，解压后在:`E:\\Java\\mysql-5.7.20-winx64`\n2. 配置环境变量\n将`E:\\Java\\mysql-5.7.20-winx64\\bin`添加至系统变量Path\n3. 用管理员身份运行CMD，依次输入下面的命令即可。\n`mysqld --initialize --user=mysql --console`\n初始化data文件夹，并生成一个临时密码。\n`mysqld -install`\n安装MySQL服务\n`net start mysql`\n启动MySQL服务\n`mysql -u root -p`\n输入刚才生成的临时密码\n`set password = password('123456');`\n修改密码为123456\n\n# MySQL卸载\n1. 用管理员身份运行CMD，执行以下两个命令\n`net stop mysql` 停止MySQL\n`mysqld -remove` 删除服务\n2. 删除mysql注册表","slug":"20171212","published":1,"date":"2019-01-08T01:20:48.443Z","updated":"2019-01-15T00:44:55.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smke0003qwvg3urbmfzz","content":"<p>MySQL 5.7.20安装和卸载<br><a id=\"more\"></a></p>\n<h1 id=\"MySQL安装\"><a href=\"#MySQL安装\" class=\"headerlink\" title=\"MySQL安装\"></a>MySQL安装</h1><ol>\n<li>下载<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"external\">mysql</a><br>将文件解压，解压后在:<code>E:\\Java\\mysql-5.7.20-winx64</code></li>\n<li>配置环境变量<br>将<code>E:\\Java\\mysql-5.7.20-winx64\\bin</code>添加至系统变量Path</li>\n<li>用管理员身份运行CMD，依次输入下面的命令即可。<br><code>mysqld --initialize --user=mysql --console</code><br>初始化data文件夹，并生成一个临时密码。<br><code>mysqld -install</code><br>安装MySQL服务<br><code>net start mysql</code><br>启动MySQL服务<br><code>mysql -u root -p</code><br>输入刚才生成的临时密码<br><code>set password = password(&#39;123456&#39;);</code><br>修改密码为123456</li>\n</ol>\n<h1 id=\"MySQL卸载\"><a href=\"#MySQL卸载\" class=\"headerlink\" title=\"MySQL卸载\"></a>MySQL卸载</h1><ol>\n<li>用管理员身份运行CMD，执行以下两个命令<br><code>net stop mysql</code> 停止MySQL<br><code>mysqld -remove</code> 删除服务</li>\n<li>删除mysql注册表</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>MySQL 5.7.20安装和卸载<br>","more":"</p>\n<h1 id=\"MySQL安装\"><a href=\"#MySQL安装\" class=\"headerlink\" title=\"MySQL安装\"></a>MySQL安装</h1><ol>\n<li>下载<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"external\">mysql</a><br>将文件解压，解压后在:<code>E:\\Java\\mysql-5.7.20-winx64</code></li>\n<li>配置环境变量<br>将<code>E:\\Java\\mysql-5.7.20-winx64\\bin</code>添加至系统变量Path</li>\n<li>用管理员身份运行CMD，依次输入下面的命令即可。<br><code>mysqld --initialize --user=mysql --console</code><br>初始化data文件夹，并生成一个临时密码。<br><code>mysqld -install</code><br>安装MySQL服务<br><code>net start mysql</code><br>启动MySQL服务<br><code>mysql -u root -p</code><br>输入刚才生成的临时密码<br><code>set password = password(&#39;123456&#39;);</code><br>修改密码为123456</li>\n</ol>\n<h1 id=\"MySQL卸载\"><a href=\"#MySQL卸载\" class=\"headerlink\" title=\"MySQL卸载\"></a>MySQL卸载</h1><ol>\n<li>用管理员身份运行CMD，执行以下两个命令<br><code>net stop mysql</code> 停止MySQL<br><code>mysqld -remove</code> 删除服务</li>\n<li>删除mysql注册表</li>\n</ol>"},{"title":"深入分析Java I/O的工作机制","_content":"\n在当前这个海量数据时代，数据在网络中随处流动。在这个流动的过程中都涉及I/O问题，故可以说大部分Web应用系统的瓶颈都是I/O瓶颈。\n<!-- more -->\n# BIO、NIO、AIO的概念\n* BIO：同步阻塞，适用于连接数目少比较且固定的架构，jdk1.4之前唯一选择\n* NIO：同步非阻塞，适用于连接数目多且连接比较短（轻操作）的架构，jdk1.4之后开始支持\n* AIO：异步非阻塞，适用于连接数目多且连接比较长（重操作）的架构，jdk7之后支持\n\n# 长连接和短连接的概念\nHTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。\n* 短连接：客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接\n* 长连接；当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接\n\n# Http1.0和Http2.0的区别\n* 多路复用\n* 首部压缩\n* Http2支持服务器推送\n\n# Https的基本概念\n安全协议\n\n# 三次握手和四次挥手\n* 三次握手：\n    以下场景为确认通话是否正常：\n    1. A：你能听到我说话吗？\n    2. B：可以，你能听到我说话吗？\n    3. A：可以，那开始吧。\n* 四次挥手：","source":"_posts/20180619.md","raw":"---\ntitle: 深入分析Java I/O的工作机制\ntags: I/O\ncategories: Java\n---\n\n在当前这个海量数据时代，数据在网络中随处流动。在这个流动的过程中都涉及I/O问题，故可以说大部分Web应用系统的瓶颈都是I/O瓶颈。\n<!-- more -->\n# BIO、NIO、AIO的概念\n* BIO：同步阻塞，适用于连接数目少比较且固定的架构，jdk1.4之前唯一选择\n* NIO：同步非阻塞，适用于连接数目多且连接比较短（轻操作）的架构，jdk1.4之后开始支持\n* AIO：异步非阻塞，适用于连接数目多且连接比较长（重操作）的架构，jdk7之后支持\n\n# 长连接和短连接的概念\nHTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。\n* 短连接：客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接\n* 长连接；当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接\n\n# Http1.0和Http2.0的区别\n* 多路复用\n* 首部压缩\n* Http2支持服务器推送\n\n# Https的基本概念\n安全协议\n\n# 三次握手和四次挥手\n* 三次握手：\n    以下场景为确认通话是否正常：\n    1. A：你能听到我说话吗？\n    2. B：可以，你能听到我说话吗？\n    3. A：可以，那开始吧。\n* 四次挥手：","slug":"20180619","published":1,"date":"2019-01-08T01:20:48.444Z","updated":"2019-01-15T00:44:55.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smki0005qwvghj1bce7d","content":"<p>在当前这个海量数据时代，数据在网络中随处流动。在这个流动的过程中都涉及I/O问题，故可以说大部分Web应用系统的瓶颈都是I/O瓶颈。<br><a id=\"more\"></a></p>\n<h1 id=\"BIO、NIO、AIO的概念\"><a href=\"#BIO、NIO、AIO的概念\" class=\"headerlink\" title=\"BIO、NIO、AIO的概念\"></a>BIO、NIO、AIO的概念</h1><ul>\n<li>BIO：同步阻塞，适用于连接数目少比较且固定的架构，jdk1.4之前唯一选择</li>\n<li>NIO：同步非阻塞，适用于连接数目多且连接比较短（轻操作）的架构，jdk1.4之后开始支持</li>\n<li>AIO：异步非阻塞，适用于连接数目多且连接比较长（重操作）的架构，jdk7之后支持</li>\n</ul>\n<h1 id=\"长连接和短连接的概念\"><a href=\"#长连接和短连接的概念\" class=\"headerlink\" title=\"长连接和短连接的概念\"></a>长连接和短连接的概念</h1><p>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p>\n<ul>\n<li>短连接：客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接</li>\n<li>长连接；当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接</li>\n</ul>\n<h1 id=\"Http1-0和Http2-0的区别\"><a href=\"#Http1-0和Http2-0的区别\" class=\"headerlink\" title=\"Http1.0和Http2.0的区别\"></a>Http1.0和Http2.0的区别</h1><ul>\n<li>多路复用</li>\n<li>首部压缩</li>\n<li>Http2支持服务器推送</li>\n</ul>\n<h1 id=\"Https的基本概念\"><a href=\"#Https的基本概念\" class=\"headerlink\" title=\"Https的基本概念\"></a>Https的基本概念</h1><p>安全协议</p>\n<h1 id=\"三次握手和四次挥手\"><a href=\"#三次握手和四次挥手\" class=\"headerlink\" title=\"三次握手和四次挥手\"></a>三次握手和四次挥手</h1><ul>\n<li>三次握手：<br>  以下场景为确认通话是否正常：<ol>\n<li>A：你能听到我说话吗？</li>\n<li>B：可以，你能听到我说话吗？</li>\n<li>A：可以，那开始吧。</li>\n</ol>\n</li>\n<li>四次挥手：</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在当前这个海量数据时代，数据在网络中随处流动。在这个流动的过程中都涉及I/O问题，故可以说大部分Web应用系统的瓶颈都是I/O瓶颈。<br>","more":"</p>\n<h1 id=\"BIO、NIO、AIO的概念\"><a href=\"#BIO、NIO、AIO的概念\" class=\"headerlink\" title=\"BIO、NIO、AIO的概念\"></a>BIO、NIO、AIO的概念</h1><ul>\n<li>BIO：同步阻塞，适用于连接数目少比较且固定的架构，jdk1.4之前唯一选择</li>\n<li>NIO：同步非阻塞，适用于连接数目多且连接比较短（轻操作）的架构，jdk1.4之后开始支持</li>\n<li>AIO：异步非阻塞，适用于连接数目多且连接比较长（重操作）的架构，jdk7之后支持</li>\n</ul>\n<h1 id=\"长连接和短连接的概念\"><a href=\"#长连接和短连接的概念\" class=\"headerlink\" title=\"长连接和短连接的概念\"></a>长连接和短连接的概念</h1><p>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p>\n<ul>\n<li>短连接：客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接</li>\n<li>长连接；当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接</li>\n</ul>\n<h1 id=\"Http1-0和Http2-0的区别\"><a href=\"#Http1-0和Http2-0的区别\" class=\"headerlink\" title=\"Http1.0和Http2.0的区别\"></a>Http1.0和Http2.0的区别</h1><ul>\n<li>多路复用</li>\n<li>首部压缩</li>\n<li>Http2支持服务器推送</li>\n</ul>\n<h1 id=\"Https的基本概念\"><a href=\"#Https的基本概念\" class=\"headerlink\" title=\"Https的基本概念\"></a>Https的基本概念</h1><p>安全协议</p>\n<h1 id=\"三次握手和四次挥手\"><a href=\"#三次握手和四次挥手\" class=\"headerlink\" title=\"三次握手和四次挥手\"></a>三次握手和四次挥手</h1><ul>\n<li>三次握手：<br>  以下场景为确认通话是否正常：<ol>\n<li>A：你能听到我说话吗？</li>\n<li>B：可以，你能听到我说话吗？</li>\n<li>A：可以，那开始吧。</li>\n</ol>\n</li>\n<li>四次挥手：</li>\n</ul>"},{"title":"Java地基","_content":"\n<!-- more -->\n\n# 面向对象的三大特性\n* 继承\n* 封装\n* 多态\n\n# final, finally, finalize 的区别\n* final\n* finally\n* finalize\n\n# Exception、Error、运行时异常与一般异常有何异同\n\n# 请写出5种常见到的runtime exception\n* NullPointerException\n* ClassNotFoundException\n* NoSuchMethodException\n\n# int 和 Integer 有什么区别，Integer的值缓存范围\nint是基础类型，Integer是包装类\n\n# 包装类，装箱和拆箱\n\n# String、StringBuilder、StringBuffer\n\n# 重载和重写的区别\n* 重载：是指同一个类中的多个方法具有相同的名字,但这些方法具有不同的参数列表,即参数的数量或参数类型不能完全相同\n* 重写：是存在子父类之间的,子类定义的方法与父类中的方法具有相同的方法名字,相同的参数表和相同的返回类型\n \n# 抽象类和接口有什么区别\n除了抽象类不能被实例化之外，它和普通的java类没有什么区别，而接口是完全不同的类型：\n* 接口不允许有默认的方法实现（jdk8之前）\n* 子类使用implements来实现接口，并且必须实现接口中的所有方法\n* 接口不能有构造函数\n* 接口的方法修饰符只能是public\n* 接口没有main方法\n* 接口可以继承一个或多个接口\n\n# 说说反射的用途及实现\n\n\n# 说说自定义注解的场景及实现\n\n\n# HTTP请求的GET与POST方式的区别\n\n\n# Session与Cookie区别\n\n\n# 列出自己常用的JDK包\n\n\n# MVC设计思想\n\n\n# equals与==的区别\n\n\n# hashCode和equals方法的区别与联系\n\n\n# 什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable 接口的作用\n\n\n# Object类中常见的方法，为什么wait  notify会放在Object里边？\n\n\n# Java的平台无关性如何体现出来的\n\n\n#                                                                   \nJDK：开发环境\nJRE：运行环境\n\n# Java 8有哪些新特性\n十大新特性：\n* Lambda表达式和函数式接口\n* 接口的默认方法和静态方法\n* 方法引用\n* 重复注解\n* 更好的类型推断\n* 拓宽注解的应用场景","source":"_posts/20180618.md","raw":"---\ntitle: Java地基\ntags: 基础\ncategories: Java\n---\n\n<!-- more -->\n\n# 面向对象的三大特性\n* 继承\n* 封装\n* 多态\n\n# final, finally, finalize 的区别\n* final\n* finally\n* finalize\n\n# Exception、Error、运行时异常与一般异常有何异同\n\n# 请写出5种常见到的runtime exception\n* NullPointerException\n* ClassNotFoundException\n* NoSuchMethodException\n\n# int 和 Integer 有什么区别，Integer的值缓存范围\nint是基础类型，Integer是包装类\n\n# 包装类，装箱和拆箱\n\n# String、StringBuilder、StringBuffer\n\n# 重载和重写的区别\n* 重载：是指同一个类中的多个方法具有相同的名字,但这些方法具有不同的参数列表,即参数的数量或参数类型不能完全相同\n* 重写：是存在子父类之间的,子类定义的方法与父类中的方法具有相同的方法名字,相同的参数表和相同的返回类型\n \n# 抽象类和接口有什么区别\n除了抽象类不能被实例化之外，它和普通的java类没有什么区别，而接口是完全不同的类型：\n* 接口不允许有默认的方法实现（jdk8之前）\n* 子类使用implements来实现接口，并且必须实现接口中的所有方法\n* 接口不能有构造函数\n* 接口的方法修饰符只能是public\n* 接口没有main方法\n* 接口可以继承一个或多个接口\n\n# 说说反射的用途及实现\n\n\n# 说说自定义注解的场景及实现\n\n\n# HTTP请求的GET与POST方式的区别\n\n\n# Session与Cookie区别\n\n\n# 列出自己常用的JDK包\n\n\n# MVC设计思想\n\n\n# equals与==的区别\n\n\n# hashCode和equals方法的区别与联系\n\n\n# 什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable 接口的作用\n\n\n# Object类中常见的方法，为什么wait  notify会放在Object里边？\n\n\n# Java的平台无关性如何体现出来的\n\n\n#                                                                   \nJDK：开发环境\nJRE：运行环境\n\n# Java 8有哪些新特性\n十大新特性：\n* Lambda表达式和函数式接口\n* 接口的默认方法和静态方法\n* 方法引用\n* 重复注解\n* 更好的类型推断\n* 拓宽注解的应用场景","slug":"20180618","published":1,"date":"2019-01-08T01:20:48.444Z","updated":"2019-01-15T00:44:55.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smkj0007qwvgg94m60pn","content":"<a id=\"more\"></a>\n<h1 id=\"面向对象的三大特性\"><a href=\"#面向对象的三大特性\" class=\"headerlink\" title=\"面向对象的三大特性\"></a>面向对象的三大特性</h1><ul>\n<li>继承</li>\n<li>封装</li>\n<li>多态</li>\n</ul>\n<h1 id=\"final-finally-finalize-的区别\"><a href=\"#final-finally-finalize-的区别\" class=\"headerlink\" title=\"final, finally, finalize 的区别\"></a>final, finally, finalize 的区别</h1><ul>\n<li>final</li>\n<li>finally</li>\n<li>finalize</li>\n</ul>\n<h1 id=\"Exception、Error、运行时异常与一般异常有何异同\"><a href=\"#Exception、Error、运行时异常与一般异常有何异同\" class=\"headerlink\" title=\"Exception、Error、运行时异常与一般异常有何异同\"></a>Exception、Error、运行时异常与一般异常有何异同</h1><h1 id=\"请写出5种常见到的runtime-exception\"><a href=\"#请写出5种常见到的runtime-exception\" class=\"headerlink\" title=\"请写出5种常见到的runtime exception\"></a>请写出5种常见到的runtime exception</h1><ul>\n<li>NullPointerException</li>\n<li>ClassNotFoundException</li>\n<li>NoSuchMethodException</li>\n</ul>\n<h1 id=\"int-和-Integer-有什么区别，Integer的值缓存范围\"><a href=\"#int-和-Integer-有什么区别，Integer的值缓存范围\" class=\"headerlink\" title=\"int 和 Integer 有什么区别，Integer的值缓存范围\"></a>int 和 Integer 有什么区别，Integer的值缓存范围</h1><p>int是基础类型，Integer是包装类</p>\n<h1 id=\"包装类，装箱和拆箱\"><a href=\"#包装类，装箱和拆箱\" class=\"headerlink\" title=\"包装类，装箱和拆箱\"></a>包装类，装箱和拆箱</h1><h1 id=\"String、StringBuilder、StringBuffer\"><a href=\"#String、StringBuilder、StringBuffer\" class=\"headerlink\" title=\"String、StringBuilder、StringBuffer\"></a>String、StringBuilder、StringBuffer</h1><h1 id=\"重载和重写的区别\"><a href=\"#重载和重写的区别\" class=\"headerlink\" title=\"重载和重写的区别\"></a>重载和重写的区别</h1><ul>\n<li>重载：是指同一个类中的多个方法具有相同的名字,但这些方法具有不同的参数列表,即参数的数量或参数类型不能完全相同</li>\n<li>重写：是存在子父类之间的,子类定义的方法与父类中的方法具有相同的方法名字,相同的参数表和相同的返回类型</li>\n</ul>\n<h1 id=\"抽象类和接口有什么区别\"><a href=\"#抽象类和接口有什么区别\" class=\"headerlink\" title=\"抽象类和接口有什么区别\"></a>抽象类和接口有什么区别</h1><p>除了抽象类不能被实例化之外，它和普通的java类没有什么区别，而接口是完全不同的类型：</p>\n<ul>\n<li>接口不允许有默认的方法实现（jdk8之前）</li>\n<li>子类使用implements来实现接口，并且必须实现接口中的所有方法</li>\n<li>接口不能有构造函数</li>\n<li>接口的方法修饰符只能是public</li>\n<li>接口没有main方法</li>\n<li>接口可以继承一个或多个接口</li>\n</ul>\n<h1 id=\"说说反射的用途及实现\"><a href=\"#说说反射的用途及实现\" class=\"headerlink\" title=\"说说反射的用途及实现\"></a>说说反射的用途及实现</h1><h1 id=\"说说自定义注解的场景及实现\"><a href=\"#说说自定义注解的场景及实现\" class=\"headerlink\" title=\"说说自定义注解的场景及实现\"></a>说说自定义注解的场景及实现</h1><h1 id=\"HTTP请求的GET与POST方式的区别\"><a href=\"#HTTP请求的GET与POST方式的区别\" class=\"headerlink\" title=\"HTTP请求的GET与POST方式的区别\"></a>HTTP请求的GET与POST方式的区别</h1><h1 id=\"Session与Cookie区别\"><a href=\"#Session与Cookie区别\" class=\"headerlink\" title=\"Session与Cookie区别\"></a>Session与Cookie区别</h1><h1 id=\"列出自己常用的JDK包\"><a href=\"#列出自己常用的JDK包\" class=\"headerlink\" title=\"列出自己常用的JDK包\"></a>列出自己常用的JDK包</h1><h1 id=\"MVC设计思想\"><a href=\"#MVC设计思想\" class=\"headerlink\" title=\"MVC设计思想\"></a>MVC设计思想</h1><h1 id=\"equals与-的区别\"><a href=\"#equals与-的区别\" class=\"headerlink\" title=\"equals与==的区别\"></a>equals与==的区别</h1><h1 id=\"hashCode和equals方法的区别与联系\"><a href=\"#hashCode和equals方法的区别与联系\" class=\"headerlink\" title=\"hashCode和equals方法的区别与联系\"></a>hashCode和equals方法的区别与联系</h1><h1 id=\"什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable-接口的作用\"><a href=\"#什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable-接口的作用\" class=\"headerlink\" title=\"什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable 接口的作用\"></a>什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable 接口的作用</h1><h1 id=\"Object类中常见的方法，为什么wait-notify会放在Object里边？\"><a href=\"#Object类中常见的方法，为什么wait-notify会放在Object里边？\" class=\"headerlink\" title=\"Object类中常见的方法，为什么wait  notify会放在Object里边？\"></a>Object类中常见的方法，为什么wait  notify会放在Object里边？</h1><h1 id=\"Java的平台无关性如何体现出来的\"><a href=\"#Java的平台无关性如何体现出来的\" class=\"headerlink\" title=\"Java的平台无关性如何体现出来的\"></a>Java的平台无关性如何体现出来的</h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h1><p>JDK：开发环境<br>JRE：运行环境</p>\n<h1 id=\"Java-8有哪些新特性\"><a href=\"#Java-8有哪些新特性\" class=\"headerlink\" title=\"Java 8有哪些新特性\"></a>Java 8有哪些新特性</h1><p>十大新特性：</p>\n<ul>\n<li>Lambda表达式和函数式接口</li>\n<li>接口的默认方法和静态方法</li>\n<li>方法引用</li>\n<li>重复注解</li>\n<li>更好的类型推断</li>\n<li>拓宽注解的应用场景</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"面向对象的三大特性\"><a href=\"#面向对象的三大特性\" class=\"headerlink\" title=\"面向对象的三大特性\"></a>面向对象的三大特性</h1><ul>\n<li>继承</li>\n<li>封装</li>\n<li>多态</li>\n</ul>\n<h1 id=\"final-finally-finalize-的区别\"><a href=\"#final-finally-finalize-的区别\" class=\"headerlink\" title=\"final, finally, finalize 的区别\"></a>final, finally, finalize 的区别</h1><ul>\n<li>final</li>\n<li>finally</li>\n<li>finalize</li>\n</ul>\n<h1 id=\"Exception、Error、运行时异常与一般异常有何异同\"><a href=\"#Exception、Error、运行时异常与一般异常有何异同\" class=\"headerlink\" title=\"Exception、Error、运行时异常与一般异常有何异同\"></a>Exception、Error、运行时异常与一般异常有何异同</h1><h1 id=\"请写出5种常见到的runtime-exception\"><a href=\"#请写出5种常见到的runtime-exception\" class=\"headerlink\" title=\"请写出5种常见到的runtime exception\"></a>请写出5种常见到的runtime exception</h1><ul>\n<li>NullPointerException</li>\n<li>ClassNotFoundException</li>\n<li>NoSuchMethodException</li>\n</ul>\n<h1 id=\"int-和-Integer-有什么区别，Integer的值缓存范围\"><a href=\"#int-和-Integer-有什么区别，Integer的值缓存范围\" class=\"headerlink\" title=\"int 和 Integer 有什么区别，Integer的值缓存范围\"></a>int 和 Integer 有什么区别，Integer的值缓存范围</h1><p>int是基础类型，Integer是包装类</p>\n<h1 id=\"包装类，装箱和拆箱\"><a href=\"#包装类，装箱和拆箱\" class=\"headerlink\" title=\"包装类，装箱和拆箱\"></a>包装类，装箱和拆箱</h1><h1 id=\"String、StringBuilder、StringBuffer\"><a href=\"#String、StringBuilder、StringBuffer\" class=\"headerlink\" title=\"String、StringBuilder、StringBuffer\"></a>String、StringBuilder、StringBuffer</h1><h1 id=\"重载和重写的区别\"><a href=\"#重载和重写的区别\" class=\"headerlink\" title=\"重载和重写的区别\"></a>重载和重写的区别</h1><ul>\n<li>重载：是指同一个类中的多个方法具有相同的名字,但这些方法具有不同的参数列表,即参数的数量或参数类型不能完全相同</li>\n<li>重写：是存在子父类之间的,子类定义的方法与父类中的方法具有相同的方法名字,相同的参数表和相同的返回类型</li>\n</ul>\n<h1 id=\"抽象类和接口有什么区别\"><a href=\"#抽象类和接口有什么区别\" class=\"headerlink\" title=\"抽象类和接口有什么区别\"></a>抽象类和接口有什么区别</h1><p>除了抽象类不能被实例化之外，它和普通的java类没有什么区别，而接口是完全不同的类型：</p>\n<ul>\n<li>接口不允许有默认的方法实现（jdk8之前）</li>\n<li>子类使用implements来实现接口，并且必须实现接口中的所有方法</li>\n<li>接口不能有构造函数</li>\n<li>接口的方法修饰符只能是public</li>\n<li>接口没有main方法</li>\n<li>接口可以继承一个或多个接口</li>\n</ul>\n<h1 id=\"说说反射的用途及实现\"><a href=\"#说说反射的用途及实现\" class=\"headerlink\" title=\"说说反射的用途及实现\"></a>说说反射的用途及实现</h1><h1 id=\"说说自定义注解的场景及实现\"><a href=\"#说说自定义注解的场景及实现\" class=\"headerlink\" title=\"说说自定义注解的场景及实现\"></a>说说自定义注解的场景及实现</h1><h1 id=\"HTTP请求的GET与POST方式的区别\"><a href=\"#HTTP请求的GET与POST方式的区别\" class=\"headerlink\" title=\"HTTP请求的GET与POST方式的区别\"></a>HTTP请求的GET与POST方式的区别</h1><h1 id=\"Session与Cookie区别\"><a href=\"#Session与Cookie区别\" class=\"headerlink\" title=\"Session与Cookie区别\"></a>Session与Cookie区别</h1><h1 id=\"列出自己常用的JDK包\"><a href=\"#列出自己常用的JDK包\" class=\"headerlink\" title=\"列出自己常用的JDK包\"></a>列出自己常用的JDK包</h1><h1 id=\"MVC设计思想\"><a href=\"#MVC设计思想\" class=\"headerlink\" title=\"MVC设计思想\"></a>MVC设计思想</h1><h1 id=\"equals与-的区别\"><a href=\"#equals与-的区别\" class=\"headerlink\" title=\"equals与==的区别\"></a>equals与==的区别</h1><h1 id=\"hashCode和equals方法的区别与联系\"><a href=\"#hashCode和equals方法的区别与联系\" class=\"headerlink\" title=\"hashCode和equals方法的区别与联系\"></a>hashCode和equals方法的区别与联系</h1><h1 id=\"什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable-接口的作用\"><a href=\"#什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable-接口的作用\" class=\"headerlink\" title=\"什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable 接口的作用\"></a>什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable 接口的作用</h1><h1 id=\"Object类中常见的方法，为什么wait-notify会放在Object里边？\"><a href=\"#Object类中常见的方法，为什么wait-notify会放在Object里边？\" class=\"headerlink\" title=\"Object类中常见的方法，为什么wait  notify会放在Object里边？\"></a>Object类中常见的方法，为什么wait  notify会放在Object里边？</h1><h1 id=\"Java的平台无关性如何体现出来的\"><a href=\"#Java的平台无关性如何体现出来的\" class=\"headerlink\" title=\"Java的平台无关性如何体现出来的\"></a>Java的平台无关性如何体现出来的</h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h1><p>JDK：开发环境<br>JRE：运行环境</p>\n<h1 id=\"Java-8有哪些新特性\"><a href=\"#Java-8有哪些新特性\" class=\"headerlink\" title=\"Java 8有哪些新特性\"></a>Java 8有哪些新特性</h1><p>十大新特性：</p>\n<ul>\n<li>Lambda表达式和函数式接口</li>\n<li>接口的默认方法和静态方法</li>\n<li>方法引用</li>\n<li>重复注解</li>\n<li>更好的类型推断</li>\n<li>拓宽注解的应用场景</li>\n</ul>"},{"title":"重新认识BPM","_content":"\n好记性不如烂笔头\n<!-- more -->\n\n# doNext\n如果存在多个任务并存，则doNext时必须指定taskId。\ndoNext最好指定taskId,防止重复执行。\n\n# 表单状态\n## 多任务并行\n进入并行前设置状态\n任务处理后注意替换状态而不是直接更新状态\n合并前的节点注意设置状态\n\n# 表单\n注意表单和明细之分\n## 电脑端\n1. 外系统审批\n2. bpm系统审批\n\n## 手机端\n1. 外系统审批\n2. bpm系统审批\n\n# 网关\n1. 分支\n需要设置各个分支的条件，最终只会走其中满足条件的那个分支\n2. 同步\n不需要设置分支条件，各个分支并行流出并汇聚\n3. 条件同步\n设置分支条件为可选，其他同‘同步’\n\n# 按钮\n## 电脑端按钮\n同意、驳回发起人、审批历史、流程图常用，其他按需要加\n## 手机端按钮\n同意、驳回发起人常用，其他按需要加\n\n# 常见错误\n1. taskId is null 解决办法：设置task\n2. executionId dosen't exist 解决办法： bpm错误\n3. ORA-01722: 无效数字 解决办法：查看是否有变量值为字符串\n\n# 导入流程\n在发布版本的时候，经常会有流程变动，为了提高发布效率，往往会选择导入，但要按以下步骤操作：\n1. 首先确保测试和正式的角色和消息模板保持一致，防止导入后需要重新设置\n2. 导出正式流程，并导入测试\n3. 立马修改`SYS_URL`和`SYS_WS_URL`为test\n4. 修改流程注意：原流程节点ID保持不变;新节点规范ID;保存修改而不是发布新版\n5. 修改完流程后仔细核对节点设置，例如：前置后置脚本、人员、表单地址（电脑端和手机端）、操作按钮等\n6. 导出测试流程，并导入正式\n\n","source":"_posts/20180617.md","raw":"---\ntitle: 重新认识BPM\ntags: BPM\ncategories: Other\n---\n\n好记性不如烂笔头\n<!-- more -->\n\n# doNext\n如果存在多个任务并存，则doNext时必须指定taskId。\ndoNext最好指定taskId,防止重复执行。\n\n# 表单状态\n## 多任务并行\n进入并行前设置状态\n任务处理后注意替换状态而不是直接更新状态\n合并前的节点注意设置状态\n\n# 表单\n注意表单和明细之分\n## 电脑端\n1. 外系统审批\n2. bpm系统审批\n\n## 手机端\n1. 外系统审批\n2. bpm系统审批\n\n# 网关\n1. 分支\n需要设置各个分支的条件，最终只会走其中满足条件的那个分支\n2. 同步\n不需要设置分支条件，各个分支并行流出并汇聚\n3. 条件同步\n设置分支条件为可选，其他同‘同步’\n\n# 按钮\n## 电脑端按钮\n同意、驳回发起人、审批历史、流程图常用，其他按需要加\n## 手机端按钮\n同意、驳回发起人常用，其他按需要加\n\n# 常见错误\n1. taskId is null 解决办法：设置task\n2. executionId dosen't exist 解决办法： bpm错误\n3. ORA-01722: 无效数字 解决办法：查看是否有变量值为字符串\n\n# 导入流程\n在发布版本的时候，经常会有流程变动，为了提高发布效率，往往会选择导入，但要按以下步骤操作：\n1. 首先确保测试和正式的角色和消息模板保持一致，防止导入后需要重新设置\n2. 导出正式流程，并导入测试\n3. 立马修改`SYS_URL`和`SYS_WS_URL`为test\n4. 修改流程注意：原流程节点ID保持不变;新节点规范ID;保存修改而不是发布新版\n5. 修改完流程后仔细核对节点设置，例如：前置后置脚本、人员、表单地址（电脑端和手机端）、操作按钮等\n6. 导出测试流程，并导入正式\n\n","slug":"20180617","published":1,"date":"2019-01-08T01:20:48.443Z","updated":"2019-01-15T00:44:55.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smkk0008qwvgkw2gqr1w","content":"<p>好记性不如烂笔头<br><a id=\"more\"></a></p>\n<h1 id=\"doNext\"><a href=\"#doNext\" class=\"headerlink\" title=\"doNext\"></a>doNext</h1><p>如果存在多个任务并存，则doNext时必须指定taskId。<br>doNext最好指定taskId,防止重复执行。</p>\n<h1 id=\"表单状态\"><a href=\"#表单状态\" class=\"headerlink\" title=\"表单状态\"></a>表单状态</h1><h2 id=\"多任务并行\"><a href=\"#多任务并行\" class=\"headerlink\" title=\"多任务并行\"></a>多任务并行</h2><p>进入并行前设置状态<br>任务处理后注意替换状态而不是直接更新状态<br>合并前的节点注意设置状态</p>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>注意表单和明细之分</p>\n<h2 id=\"电脑端\"><a href=\"#电脑端\" class=\"headerlink\" title=\"电脑端\"></a>电脑端</h2><ol>\n<li>外系统审批</li>\n<li>bpm系统审批</li>\n</ol>\n<h2 id=\"手机端\"><a href=\"#手机端\" class=\"headerlink\" title=\"手机端\"></a>手机端</h2><ol>\n<li>外系统审批</li>\n<li>bpm系统审批</li>\n</ol>\n<h1 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h1><ol>\n<li>分支<br>需要设置各个分支的条件，最终只会走其中满足条件的那个分支</li>\n<li>同步<br>不需要设置分支条件，各个分支并行流出并汇聚</li>\n<li>条件同步<br>设置分支条件为可选，其他同‘同步’</li>\n</ol>\n<h1 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h1><h2 id=\"电脑端按钮\"><a href=\"#电脑端按钮\" class=\"headerlink\" title=\"电脑端按钮\"></a>电脑端按钮</h2><p>同意、驳回发起人、审批历史、流程图常用，其他按需要加</p>\n<h2 id=\"手机端按钮\"><a href=\"#手机端按钮\" class=\"headerlink\" title=\"手机端按钮\"></a>手机端按钮</h2><p>同意、驳回发起人常用，其他按需要加</p>\n<h1 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h1><ol>\n<li>taskId is null 解决办法：设置task</li>\n<li>executionId dosen’t exist 解决办法： bpm错误</li>\n<li>ORA-01722: 无效数字 解决办法：查看是否有变量值为字符串</li>\n</ol>\n<h1 id=\"导入流程\"><a href=\"#导入流程\" class=\"headerlink\" title=\"导入流程\"></a>导入流程</h1><p>在发布版本的时候，经常会有流程变动，为了提高发布效率，往往会选择导入，但要按以下步骤操作：</p>\n<ol>\n<li>首先确保测试和正式的角色和消息模板保持一致，防止导入后需要重新设置</li>\n<li>导出正式流程，并导入测试</li>\n<li>立马修改<code>SYS_URL</code>和<code>SYS_WS_URL</code>为test</li>\n<li>修改流程注意：原流程节点ID保持不变;新节点规范ID;保存修改而不是发布新版</li>\n<li>修改完流程后仔细核对节点设置，例如：前置后置脚本、人员、表单地址（电脑端和手机端）、操作按钮等</li>\n<li>导出测试流程，并导入正式</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>好记性不如烂笔头<br>","more":"</p>\n<h1 id=\"doNext\"><a href=\"#doNext\" class=\"headerlink\" title=\"doNext\"></a>doNext</h1><p>如果存在多个任务并存，则doNext时必须指定taskId。<br>doNext最好指定taskId,防止重复执行。</p>\n<h1 id=\"表单状态\"><a href=\"#表单状态\" class=\"headerlink\" title=\"表单状态\"></a>表单状态</h1><h2 id=\"多任务并行\"><a href=\"#多任务并行\" class=\"headerlink\" title=\"多任务并行\"></a>多任务并行</h2><p>进入并行前设置状态<br>任务处理后注意替换状态而不是直接更新状态<br>合并前的节点注意设置状态</p>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>注意表单和明细之分</p>\n<h2 id=\"电脑端\"><a href=\"#电脑端\" class=\"headerlink\" title=\"电脑端\"></a>电脑端</h2><ol>\n<li>外系统审批</li>\n<li>bpm系统审批</li>\n</ol>\n<h2 id=\"手机端\"><a href=\"#手机端\" class=\"headerlink\" title=\"手机端\"></a>手机端</h2><ol>\n<li>外系统审批</li>\n<li>bpm系统审批</li>\n</ol>\n<h1 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h1><ol>\n<li>分支<br>需要设置各个分支的条件，最终只会走其中满足条件的那个分支</li>\n<li>同步<br>不需要设置分支条件，各个分支并行流出并汇聚</li>\n<li>条件同步<br>设置分支条件为可选，其他同‘同步’</li>\n</ol>\n<h1 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h1><h2 id=\"电脑端按钮\"><a href=\"#电脑端按钮\" class=\"headerlink\" title=\"电脑端按钮\"></a>电脑端按钮</h2><p>同意、驳回发起人、审批历史、流程图常用，其他按需要加</p>\n<h2 id=\"手机端按钮\"><a href=\"#手机端按钮\" class=\"headerlink\" title=\"手机端按钮\"></a>手机端按钮</h2><p>同意、驳回发起人常用，其他按需要加</p>\n<h1 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h1><ol>\n<li>taskId is null 解决办法：设置task</li>\n<li>executionId dosen’t exist 解决办法： bpm错误</li>\n<li>ORA-01722: 无效数字 解决办法：查看是否有变量值为字符串</li>\n</ol>\n<h1 id=\"导入流程\"><a href=\"#导入流程\" class=\"headerlink\" title=\"导入流程\"></a>导入流程</h1><p>在发布版本的时候，经常会有流程变动，为了提高发布效率，往往会选择导入，但要按以下步骤操作：</p>\n<ol>\n<li>首先确保测试和正式的角色和消息模板保持一致，防止导入后需要重新设置</li>\n<li>导出正式流程，并导入测试</li>\n<li>立马修改<code>SYS_URL</code>和<code>SYS_WS_URL</code>为test</li>\n<li>修改流程注意：原流程节点ID保持不变;新节点规范ID;保存修改而不是发布新版</li>\n<li>修改完流程后仔细核对节点设置，例如：前置后置脚本、人员、表单地址（电脑端和手机端）、操作按钮等</li>\n<li>导出测试流程，并导入正式</li>\n</ol>"},{"title":"存放元素的容器","_content":"\n在编程中，常常需要集中存放多个数据。从传统意义上讲，数组是我们的一个很好的选择，前提是我们事先已经明确知道我们将要保存的对象的数量。一旦在数组初始化时指定了这个数组长度，这个数组长度就是不可变的，如果我们需要保存一个可以动态增长的数据(在编译时无法确定具体的数量)，java的集合类就是一个很好的设计方案了。\n集合类主要负责保存、盛装其他数据，因此集合类也被称为容器类。所以的集合类都位于java.util包下，后来为了处理多线程环境下的并发安全问题，java5还在java.util.concurrent包下提供了一些多线程支持的集合类。\nJava容器类类库的用途是\"保存对象\"，并将其划分为两个不同的概念：\n* Collection\n一组\"对立\"的元素，通常这些元素都服从某种规则\n    * List必须保持元素特定的顺序\n    * Set不能有重复元素\n    * Queue保持一个队列(先进先出)的顺序\n* Map\n一组成对的\"键值对\"对象\n<!-- more -->\n\n# 集合与数组\n* 数组：大小固定，只能存储相同数据类型的数据\n* 集合：大小可动态扩展，可以存储各种类型的数据\n\n# Collection\n单列集合,存储的元素是单独出现的\n## List\n有序（输出的顺序就是插入的顺序）并且允许重复，元素可以为null\n* ArrayList\n基于动态数组实现，查询快，增删慢\n* LinkedList\n基于双向链表实现，查询慢，增删快\n* Vector\n同ArrayList，但是线程安全的（使用Synchronized关键字），性能略低于ArrayList\n    * Stack\n    继承Vector,用于模拟“栈”，后进先出\n\n## Set\n无序（输出的顺序不一定是插入的顺序）并且不允许重复，元素有且只有一个可以为null\n* HashSet\n基于HashMap的key实现，value为同一个值，无序，具有良好的存取和查找性能。当向HashSet集合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到一个值，然后根据该值决定该对象在HashSet中的存储位置。\nHashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等，并且两个对象的hashCode()方法的返回值相等。\n    * LinkedHashSet\n    基于LinkedHashMap实现，使用链表维护元素的次序，性能略低于HashSet\n* SortedSet（接口）\n    * TreeSet\n    基于TreeMap实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序\n\n## Queue\n用于模拟“队列”，先进先出\n\n# Map\n双列集合，存储的元素是成对出现的，用于存储键值对，根据键得到值。\n* HashMap\n基于哈希表实现。工作原理：简单来说，HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。\n所以，性能考虑，HashMap中的链表出现越少，性能才会越好。当链表长度为8的时候链表转换为红黑树（jdk1.8新增）查找的方式来优化性能。\nHashMap在并发环境下，可能会形成环状链表。Hash DOS攻击。可以使用Collections.synchronizedMap()方法实现hashMap线程安全。\n    * LinkedHashMap\n    使用链表维护元素的次序，性能略低于HashMap\n* HashTable\n同HashMap,但是线程安全的，且键和值都不允许为null,性能略低于HashMap\n* ConcurrentHashMap\n同HashMap，作为一种线程安全且高效的哈希表的解决方案，尤其是其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大。\n* SortedMap（接口）\n    * TreeMap\n    基于红黑树实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序\n\n# 集合的扩容机制\n1. HashMap（HashSet同HashMap） 、HashTable\n* HashMap\n初始容量：16\n扩容因子：0.75，即当 元素个数 超过 容量长度的0.75倍 并且发生Hash冲突时，进行扩容\n扩容后长度：原长度 * 2\n* HashTable\n初始容量：11\n扩容因子：同HashMap\n扩容后长度：原长度 * 2 + 1\n2. ArrayList、Vector\n* ArrayList\n初始容量：10\n扩容时机：即当 元素个数 超过 容量长度 时，进行扩容\n扩容后长度：原长度 * 1.5 + 1\n* Vector\n初始容量：10\n扩容时机：即当 元素个数 超过 容量长度 时，进行扩容\n扩容后长度：原长度 * 2\n","source":"_posts/20180630.md","raw":"---\ntitle: 存放元素的容器\ntags: 集合\ncategories: Java\n---\n\n在编程中，常常需要集中存放多个数据。从传统意义上讲，数组是我们的一个很好的选择，前提是我们事先已经明确知道我们将要保存的对象的数量。一旦在数组初始化时指定了这个数组长度，这个数组长度就是不可变的，如果我们需要保存一个可以动态增长的数据(在编译时无法确定具体的数量)，java的集合类就是一个很好的设计方案了。\n集合类主要负责保存、盛装其他数据，因此集合类也被称为容器类。所以的集合类都位于java.util包下，后来为了处理多线程环境下的并发安全问题，java5还在java.util.concurrent包下提供了一些多线程支持的集合类。\nJava容器类类库的用途是\"保存对象\"，并将其划分为两个不同的概念：\n* Collection\n一组\"对立\"的元素，通常这些元素都服从某种规则\n    * List必须保持元素特定的顺序\n    * Set不能有重复元素\n    * Queue保持一个队列(先进先出)的顺序\n* Map\n一组成对的\"键值对\"对象\n<!-- more -->\n\n# 集合与数组\n* 数组：大小固定，只能存储相同数据类型的数据\n* 集合：大小可动态扩展，可以存储各种类型的数据\n\n# Collection\n单列集合,存储的元素是单独出现的\n## List\n有序（输出的顺序就是插入的顺序）并且允许重复，元素可以为null\n* ArrayList\n基于动态数组实现，查询快，增删慢\n* LinkedList\n基于双向链表实现，查询慢，增删快\n* Vector\n同ArrayList，但是线程安全的（使用Synchronized关键字），性能略低于ArrayList\n    * Stack\n    继承Vector,用于模拟“栈”，后进先出\n\n## Set\n无序（输出的顺序不一定是插入的顺序）并且不允许重复，元素有且只有一个可以为null\n* HashSet\n基于HashMap的key实现，value为同一个值，无序，具有良好的存取和查找性能。当向HashSet集合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到一个值，然后根据该值决定该对象在HashSet中的存储位置。\nHashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等，并且两个对象的hashCode()方法的返回值相等。\n    * LinkedHashSet\n    基于LinkedHashMap实现，使用链表维护元素的次序，性能略低于HashSet\n* SortedSet（接口）\n    * TreeSet\n    基于TreeMap实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序\n\n## Queue\n用于模拟“队列”，先进先出\n\n# Map\n双列集合，存储的元素是成对出现的，用于存储键值对，根据键得到值。\n* HashMap\n基于哈希表实现。工作原理：简单来说，HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。\n所以，性能考虑，HashMap中的链表出现越少，性能才会越好。当链表长度为8的时候链表转换为红黑树（jdk1.8新增）查找的方式来优化性能。\nHashMap在并发环境下，可能会形成环状链表。Hash DOS攻击。可以使用Collections.synchronizedMap()方法实现hashMap线程安全。\n    * LinkedHashMap\n    使用链表维护元素的次序，性能略低于HashMap\n* HashTable\n同HashMap,但是线程安全的，且键和值都不允许为null,性能略低于HashMap\n* ConcurrentHashMap\n同HashMap，作为一种线程安全且高效的哈希表的解决方案，尤其是其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大。\n* SortedMap（接口）\n    * TreeMap\n    基于红黑树实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序\n\n# 集合的扩容机制\n1. HashMap（HashSet同HashMap） 、HashTable\n* HashMap\n初始容量：16\n扩容因子：0.75，即当 元素个数 超过 容量长度的0.75倍 并且发生Hash冲突时，进行扩容\n扩容后长度：原长度 * 2\n* HashTable\n初始容量：11\n扩容因子：同HashMap\n扩容后长度：原长度 * 2 + 1\n2. ArrayList、Vector\n* ArrayList\n初始容量：10\n扩容时机：即当 元素个数 超过 容量长度 时，进行扩容\n扩容后长度：原长度 * 1.5 + 1\n* Vector\n初始容量：10\n扩容时机：即当 元素个数 超过 容量长度 时，进行扩容\n扩容后长度：原长度 * 2\n","slug":"20180630","published":1,"date":"2019-01-08T01:20:48.444Z","updated":"2019-01-15T00:44:55.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smkl000aqwvgpqwwdn0s","content":"<p>在编程中，常常需要集中存放多个数据。从传统意义上讲，数组是我们的一个很好的选择，前提是我们事先已经明确知道我们将要保存的对象的数量。一旦在数组初始化时指定了这个数组长度，这个数组长度就是不可变的，如果我们需要保存一个可以动态增长的数据(在编译时无法确定具体的数量)，java的集合类就是一个很好的设计方案了。<br>集合类主要负责保存、盛装其他数据，因此集合类也被称为容器类。所以的集合类都位于java.util包下，后来为了处理多线程环境下的并发安全问题，java5还在java.util.concurrent包下提供了一些多线程支持的集合类。<br>Java容器类类库的用途是”保存对象”，并将其划分为两个不同的概念：</p>\n<ul>\n<li>Collection<br>一组”对立”的元素，通常这些元素都服从某种规则<ul>\n<li>List必须保持元素特定的顺序</li>\n<li>Set不能有重复元素</li>\n<li>Queue保持一个队列(先进先出)的顺序</li>\n</ul>\n</li>\n<li>Map<br>一组成对的”键值对”对象<a id=\"more\"></a>\n</li>\n</ul>\n<h1 id=\"集合与数组\"><a href=\"#集合与数组\" class=\"headerlink\" title=\"集合与数组\"></a>集合与数组</h1><ul>\n<li>数组：大小固定，只能存储相同数据类型的数据</li>\n<li>集合：大小可动态扩展，可以存储各种类型的数据</li>\n</ul>\n<h1 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h1><p>单列集合,存储的元素是单独出现的</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>有序（输出的顺序就是插入的顺序）并且允许重复，元素可以为null</p>\n<ul>\n<li>ArrayList<br>基于动态数组实现，查询快，增删慢</li>\n<li>LinkedList<br>基于双向链表实现，查询慢，增删快</li>\n<li>Vector<br>同ArrayList，但是线程安全的（使用Synchronized关键字），性能略低于ArrayList<ul>\n<li>Stack<br>继承Vector,用于模拟“栈”，后进先出</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><p>无序（输出的顺序不一定是插入的顺序）并且不允许重复，元素有且只有一个可以为null</p>\n<ul>\n<li>HashSet<br>基于HashMap的key实现，value为同一个值，无序，具有良好的存取和查找性能。当向HashSet集合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到一个值，然后根据该值决定该对象在HashSet中的存储位置。<br>HashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等，并且两个对象的hashCode()方法的返回值相等。<ul>\n<li>LinkedHashSet<br>基于LinkedHashMap实现，使用链表维护元素的次序，性能略低于HashSet</li>\n</ul>\n</li>\n<li>SortedSet（接口）<ul>\n<li>TreeSet<br>基于TreeMap实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h2><p>用于模拟“队列”，先进先出</p>\n<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p>双列集合，存储的元素是成对出现的，用于存储键值对，根据键得到值。</p>\n<ul>\n<li>HashMap<br>基于哈希表实现。工作原理：简单来说，HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。<br>所以，性能考虑，HashMap中的链表出现越少，性能才会越好。当链表长度为8的时候链表转换为红黑树（jdk1.8新增）查找的方式来优化性能。<br>HashMap在并发环境下，可能会形成环状链表。Hash DOS攻击。可以使用Collections.synchronizedMap()方法实现hashMap线程安全。<ul>\n<li>LinkedHashMap<br>使用链表维护元素的次序，性能略低于HashMap</li>\n</ul>\n</li>\n<li>HashTable<br>同HashMap,但是线程安全的，且键和值都不允许为null,性能略低于HashMap</li>\n<li>ConcurrentHashMap<br>同HashMap，作为一种线程安全且高效的哈希表的解决方案，尤其是其中的”分段锁”的方案，相比HashTable的全表锁在性能上的提升非常之大。</li>\n<li>SortedMap（接口）<ul>\n<li>TreeMap<br>基于红黑树实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"集合的扩容机制\"><a href=\"#集合的扩容机制\" class=\"headerlink\" title=\"集合的扩容机制\"></a>集合的扩容机制</h1><ol>\n<li>HashMap（HashSet同HashMap） 、HashTable</li>\n</ol>\n<ul>\n<li>HashMap<br>初始容量：16<br>扩容因子：0.75，即当 元素个数 超过 容量长度的0.75倍 并且发生Hash冲突时，进行扩容<br>扩容后长度：原长度 * 2</li>\n<li>HashTable<br>初始容量：11<br>扩容因子：同HashMap<br>扩容后长度：原长度 * 2 + 1</li>\n</ul>\n<ol>\n<li>ArrayList、Vector</li>\n</ol>\n<ul>\n<li>ArrayList<br>初始容量：10<br>扩容时机：即当 元素个数 超过 容量长度 时，进行扩容<br>扩容后长度：原长度 * 1.5 + 1</li>\n<li>Vector<br>初始容量：10<br>扩容时机：即当 元素个数 超过 容量长度 时，进行扩容<br>扩容后长度：原长度 * 2</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在编程中，常常需要集中存放多个数据。从传统意义上讲，数组是我们的一个很好的选择，前提是我们事先已经明确知道我们将要保存的对象的数量。一旦在数组初始化时指定了这个数组长度，这个数组长度就是不可变的，如果我们需要保存一个可以动态增长的数据(在编译时无法确定具体的数量)，java的集合类就是一个很好的设计方案了。<br>集合类主要负责保存、盛装其他数据，因此集合类也被称为容器类。所以的集合类都位于java.util包下，后来为了处理多线程环境下的并发安全问题，java5还在java.util.concurrent包下提供了一些多线程支持的集合类。<br>Java容器类类库的用途是”保存对象”，并将其划分为两个不同的概念：</p>\n<ul>\n<li>Collection<br>一组”对立”的元素，通常这些元素都服从某种规则<ul>\n<li>List必须保持元素特定的顺序</li>\n<li>Set不能有重复元素</li>\n<li>Queue保持一个队列(先进先出)的顺序</li>\n</ul>\n</li>\n<li>Map<br>一组成对的”键值对”对象","more":"</li>\n</ul>\n<h1 id=\"集合与数组\"><a href=\"#集合与数组\" class=\"headerlink\" title=\"集合与数组\"></a>集合与数组</h1><ul>\n<li>数组：大小固定，只能存储相同数据类型的数据</li>\n<li>集合：大小可动态扩展，可以存储各种类型的数据</li>\n</ul>\n<h1 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h1><p>单列集合,存储的元素是单独出现的</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>有序（输出的顺序就是插入的顺序）并且允许重复，元素可以为null</p>\n<ul>\n<li>ArrayList<br>基于动态数组实现，查询快，增删慢</li>\n<li>LinkedList<br>基于双向链表实现，查询慢，增删快</li>\n<li>Vector<br>同ArrayList，但是线程安全的（使用Synchronized关键字），性能略低于ArrayList<ul>\n<li>Stack<br>继承Vector,用于模拟“栈”，后进先出</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><p>无序（输出的顺序不一定是插入的顺序）并且不允许重复，元素有且只有一个可以为null</p>\n<ul>\n<li>HashSet<br>基于HashMap的key实现，value为同一个值，无序，具有良好的存取和查找性能。当向HashSet集合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到一个值，然后根据该值决定该对象在HashSet中的存储位置。<br>HashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等，并且两个对象的hashCode()方法的返回值相等。<ul>\n<li>LinkedHashSet<br>基于LinkedHashMap实现，使用链表维护元素的次序，性能略低于HashSet</li>\n</ul>\n</li>\n<li>SortedSet（接口）<ul>\n<li>TreeSet<br>基于TreeMap实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h2><p>用于模拟“队列”，先进先出</p>\n<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p>双列集合，存储的元素是成对出现的，用于存储键值对，根据键得到值。</p>\n<ul>\n<li>HashMap<br>基于哈希表实现。工作原理：简单来说，HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。<br>所以，性能考虑，HashMap中的链表出现越少，性能才会越好。当链表长度为8的时候链表转换为红黑树（jdk1.8新增）查找的方式来优化性能。<br>HashMap在并发环境下，可能会形成环状链表。Hash DOS攻击。可以使用Collections.synchronizedMap()方法实现hashMap线程安全。<ul>\n<li>LinkedHashMap<br>使用链表维护元素的次序，性能略低于HashMap</li>\n</ul>\n</li>\n<li>HashTable<br>同HashMap,但是线程安全的，且键和值都不允许为null,性能略低于HashMap</li>\n<li>ConcurrentHashMap<br>同HashMap，作为一种线程安全且高效的哈希表的解决方案，尤其是其中的”分段锁”的方案，相比HashTable的全表锁在性能上的提升非常之大。</li>\n<li>SortedMap（接口）<ul>\n<li>TreeMap<br>基于红黑树实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"集合的扩容机制\"><a href=\"#集合的扩容机制\" class=\"headerlink\" title=\"集合的扩容机制\"></a>集合的扩容机制</h1><ol>\n<li>HashMap（HashSet同HashMap） 、HashTable</li>\n</ol>\n<ul>\n<li>HashMap<br>初始容量：16<br>扩容因子：0.75，即当 元素个数 超过 容量长度的0.75倍 并且发生Hash冲突时，进行扩容<br>扩容后长度：原长度 * 2</li>\n<li>HashTable<br>初始容量：11<br>扩容因子：同HashMap<br>扩容后长度：原长度 * 2 + 1</li>\n</ul>\n<ol>\n<li>ArrayList、Vector</li>\n</ol>\n<ul>\n<li>ArrayList<br>初始容量：10<br>扩容时机：即当 元素个数 超过 容量长度 时，进行扩容<br>扩容后长度：原长度 * 1.5 + 1</li>\n<li>Vector<br>初始容量：10<br>扩容时机：即当 元素个数 超过 容量长度 时，进行扩容<br>扩容后长度：原长度 * 2</li>\n</ul>"},{"title":"初识设计模式","_content":"\n设计模式可分三大类：建造型模式，结构型模式，行为型模式\n<!-- more -->\n\n# 基本法则\n* 单一职责原则(Single responsibility principle)\n* 开放封闭原则(Open-Close Principle)\n* 依赖倒转原则(Dependence Inversion Principle)\n* 迪米特法则(Demeter Principle)\n* 里氏代换原则(Liskov Substitution Principle)\n* 接口分离原则(Interface Segregation Principle)\n\n# 创建型模式\n* 简单工厂模式(Simple Factory)(mybatis)\n* 工厂方法模式(Factory Method)\n* 抽象工厂模式(Abstract Factory)\n* 建造者模式(Builder)\n* 单例模式(Singleton)\n* 原型模式(Prototype)\n\n# 结构型模式\n* 适配器模式(Adapter)(Tomcat)\n* 装饰模式(Decorator)\n* 桥架模式(Bridge)\n* 组合模式(Composite)\n* 享元模式(Flyweight)\n* 代理模式(Proxy)(Spring)\n* 外观模式(Facade)(Tomcat)\n\n# 行为型模式\n* 观察者模式(Observer)(Tomcat)\n* 模板方法模式(Template Method)(Spring MVC)\n* 命令模式(Command)(Tomcat)\n* 状态模式(State)\n* 职责链模式(Chain of Responsibility)(Tomcat)\n* 解释器模式(Interpreter)\n* 中介者模式(Mediator)\n* 访问者模式(Visitor)\n* 策略模式(Strategy)(Spring)\n* 备忘录模式(Memento)\n* 迭代器模式(Iterator)\n","source":"_posts/20180725.md","raw":"---\ntitle: 初识设计模式\ntags: 设计模式\ncategories: Java\n---\n\n设计模式可分三大类：建造型模式，结构型模式，行为型模式\n<!-- more -->\n\n# 基本法则\n* 单一职责原则(Single responsibility principle)\n* 开放封闭原则(Open-Close Principle)\n* 依赖倒转原则(Dependence Inversion Principle)\n* 迪米特法则(Demeter Principle)\n* 里氏代换原则(Liskov Substitution Principle)\n* 接口分离原则(Interface Segregation Principle)\n\n# 创建型模式\n* 简单工厂模式(Simple Factory)(mybatis)\n* 工厂方法模式(Factory Method)\n* 抽象工厂模式(Abstract Factory)\n* 建造者模式(Builder)\n* 单例模式(Singleton)\n* 原型模式(Prototype)\n\n# 结构型模式\n* 适配器模式(Adapter)(Tomcat)\n* 装饰模式(Decorator)\n* 桥架模式(Bridge)\n* 组合模式(Composite)\n* 享元模式(Flyweight)\n* 代理模式(Proxy)(Spring)\n* 外观模式(Facade)(Tomcat)\n\n# 行为型模式\n* 观察者模式(Observer)(Tomcat)\n* 模板方法模式(Template Method)(Spring MVC)\n* 命令模式(Command)(Tomcat)\n* 状态模式(State)\n* 职责链模式(Chain of Responsibility)(Tomcat)\n* 解释器模式(Interpreter)\n* 中介者模式(Mediator)\n* 访问者模式(Visitor)\n* 策略模式(Strategy)(Spring)\n* 备忘录模式(Memento)\n* 迭代器模式(Iterator)\n","slug":"20180725","published":1,"date":"2019-01-08T01:20:48.446Z","updated":"2019-01-15T00:44:55.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smkn000eqwvgbkljgii0","content":"<p>设计模式可分三大类：建造型模式，结构型模式，行为型模式<br><a id=\"more\"></a></p>\n<h1 id=\"基本法则\"><a href=\"#基本法则\" class=\"headerlink\" title=\"基本法则\"></a>基本法则</h1><ul>\n<li>单一职责原则(Single responsibility principle)</li>\n<li>开放封闭原则(Open-Close Principle)</li>\n<li>依赖倒转原则(Dependence Inversion Principle)</li>\n<li>迪米特法则(Demeter Principle)</li>\n<li>里氏代换原则(Liskov Substitution Principle)</li>\n<li>接口分离原则(Interface Segregation Principle)</li>\n</ul>\n<h1 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h1><ul>\n<li>简单工厂模式(Simple Factory)(mybatis)</li>\n<li>工厂方法模式(Factory Method)</li>\n<li>抽象工厂模式(Abstract Factory)</li>\n<li>建造者模式(Builder)</li>\n<li>单例模式(Singleton)</li>\n<li>原型模式(Prototype)</li>\n</ul>\n<h1 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h1><ul>\n<li>适配器模式(Adapter)(Tomcat)</li>\n<li>装饰模式(Decorator)</li>\n<li>桥架模式(Bridge)</li>\n<li>组合模式(Composite)</li>\n<li>享元模式(Flyweight)</li>\n<li>代理模式(Proxy)(Spring)</li>\n<li>外观模式(Facade)(Tomcat)</li>\n</ul>\n<h1 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h1><ul>\n<li>观察者模式(Observer)(Tomcat)</li>\n<li>模板方法模式(Template Method)(Spring MVC)</li>\n<li>命令模式(Command)(Tomcat)</li>\n<li>状态模式(State)</li>\n<li>职责链模式(Chain of Responsibility)(Tomcat)</li>\n<li>解释器模式(Interpreter)</li>\n<li>中介者模式(Mediator)</li>\n<li>访问者模式(Visitor)</li>\n<li>策略模式(Strategy)(Spring)</li>\n<li>备忘录模式(Memento)</li>\n<li>迭代器模式(Iterator)</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>设计模式可分三大类：建造型模式，结构型模式，行为型模式<br>","more":"</p>\n<h1 id=\"基本法则\"><a href=\"#基本法则\" class=\"headerlink\" title=\"基本法则\"></a>基本法则</h1><ul>\n<li>单一职责原则(Single responsibility principle)</li>\n<li>开放封闭原则(Open-Close Principle)</li>\n<li>依赖倒转原则(Dependence Inversion Principle)</li>\n<li>迪米特法则(Demeter Principle)</li>\n<li>里氏代换原则(Liskov Substitution Principle)</li>\n<li>接口分离原则(Interface Segregation Principle)</li>\n</ul>\n<h1 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h1><ul>\n<li>简单工厂模式(Simple Factory)(mybatis)</li>\n<li>工厂方法模式(Factory Method)</li>\n<li>抽象工厂模式(Abstract Factory)</li>\n<li>建造者模式(Builder)</li>\n<li>单例模式(Singleton)</li>\n<li>原型模式(Prototype)</li>\n</ul>\n<h1 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h1><ul>\n<li>适配器模式(Adapter)(Tomcat)</li>\n<li>装饰模式(Decorator)</li>\n<li>桥架模式(Bridge)</li>\n<li>组合模式(Composite)</li>\n<li>享元模式(Flyweight)</li>\n<li>代理模式(Proxy)(Spring)</li>\n<li>外观模式(Facade)(Tomcat)</li>\n</ul>\n<h1 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h1><ul>\n<li>观察者模式(Observer)(Tomcat)</li>\n<li>模板方法模式(Template Method)(Spring MVC)</li>\n<li>命令模式(Command)(Tomcat)</li>\n<li>状态模式(State)</li>\n<li>职责链模式(Chain of Responsibility)(Tomcat)</li>\n<li>解释器模式(Interpreter)</li>\n<li>中介者模式(Mediator)</li>\n<li>访问者模式(Visitor)</li>\n<li>策略模式(Strategy)(Spring)</li>\n<li>备忘录模式(Memento)</li>\n<li>迭代器模式(Iterator)</li>\n</ul>"},{"title":"数据结构","_content":"\n数据结构的物理存储结构只有两种：顺序存储结构和链式存储结构（像栈，队列，树，图等是从逻辑结构去抽象的，映射到内存中，也这两种物理组织形式）\n* 数组\n采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(log n)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)\n* 链表在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)\n    * 树\n        * 二叉树：对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(log n)。\n        * 红黑树\n    * 哈希表\n    不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)，增删改查的性能十分之高。 哈希表的主干是数组，比如我们要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作，即存储位置 = f(关键字)，其中，这个函数f一般称为哈希函数，这个函数的设计好坏会直接影响到哈希表的优劣。\n        * 哈希冲突：两个不同的元素，通过哈希函数得出的实际存储地址相同\n        解决方案有多种:开放定址法（发生冲突，\n对于链表的新增，删除等操作（继续寻找下一块未被占用的存储地址），链地址法（数组 + 链表），再散列函数法。","source":"_posts/20180727.md","raw":"---\ntitle: 数据结构\ntags: 数据结构\ncategories: Java\n---\n\n数据结构的物理存储结构只有两种：顺序存储结构和链式存储结构（像栈，队列，树，图等是从逻辑结构去抽象的，映射到内存中，也这两种物理组织形式）\n* 数组\n采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(log n)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)\n* 链表在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)\n    * 树\n        * 二叉树：对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(log n)。\n        * 红黑树\n    * 哈希表\n    不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)，增删改查的性能十分之高。 哈希表的主干是数组，比如我们要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作，即存储位置 = f(关键字)，其中，这个函数f一般称为哈希函数，这个函数的设计好坏会直接影响到哈希表的优劣。\n        * 哈希冲突：两个不同的元素，通过哈希函数得出的实际存储地址相同\n        解决方案有多种:开放定址法（发生冲突，\n对于链表的新增，删除等操作（继续寻找下一块未被占用的存储地址），链地址法（数组 + 链表），再散列函数法。","slug":"20180727","published":1,"date":"2019-01-08T01:20:48.448Z","updated":"2019-01-15T00:44:55.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smkp000hqwvg57f8j79o","content":"<p>数据结构的物理存储结构只有两种：顺序存储结构和链式存储结构（像栈，队列，树，图等是从逻辑结构去抽象的，映射到内存中，也这两种物理组织形式）</p>\n<ul>\n<li>数组<br>采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(log n)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)</li>\n<li>链表在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)<ul>\n<li>树<ul>\n<li>二叉树：对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(log n)。</li>\n<li>红黑树</li>\n</ul>\n</li>\n<li>哈希表<br>不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)，增删改查的性能十分之高。 哈希表的主干是数组，比如我们要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作，即存储位置 = f(关键字)，其中，这个函数f一般称为哈希函数，这个函数的设计好坏会直接影响到哈希表的优劣。<ul>\n<li>哈希冲突：两个不同的元素，通过哈希函数得出的实际存储地址相同<br>解决方案有多种:开放定址法（发生冲突，<br>对于链表的新增，删除等操作（继续寻找下一块未被占用的存储地址），链地址法（数组 + 链表），再散列函数法。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>数据结构的物理存储结构只有两种：顺序存储结构和链式存储结构（像栈，队列，树，图等是从逻辑结构去抽象的，映射到内存中，也这两种物理组织形式）</p>\n<ul>\n<li>数组<br>采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(log n)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)</li>\n<li>链表在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)<ul>\n<li>树<ul>\n<li>二叉树：对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(log n)。</li>\n<li>红黑树</li>\n</ul>\n</li>\n<li>哈希表<br>不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)，增删改查的性能十分之高。 哈希表的主干是数组，比如我们要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作，即存储位置 = f(关键字)，其中，这个函数f一般称为哈希函数，这个函数的设计好坏会直接影响到哈希表的优劣。<ul>\n<li>哈希冲突：两个不同的元素，通过哈希函数得出的实际存储地址相同<br>解决方案有多种:开放定址法（发生冲突，<br>对于链表的新增，删除等操作（继续寻找下一块未被占用的存储地址），链地址法（数组 + 链表），再散列函数法。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"JVM","_content":"\n# JVM运行时内存区域划分\n* 程序计数器：存储程序当前执行的指令的地址，如果线程执行的是native方法，则程序计数器中的值是undefined。\n* Java虚拟机栈：存储方法\n* 本地方法栈：同Java虚拟机栈，但存储的是本地方法\n以上为线程私有的\n以下为线程共享的\n* Java堆：存储对象本身以及数组\n* 方法区：存储每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码\n\n# 内存溢出OOM和堆栈溢出SOE\n* SOE：如果线程请求的栈深度大于虚拟机允许的深度时，就会抛出SOE异常\n* OOM：如果在进行扩展时无法申请到足够的内存，就会抛出OOM异常\n\n# 如何判断对象是否可以回收或存活\n\n# 常见的GC回收算法及其含义\n* 标记-清楚算法\n* 复制算法\n* 标记-整理算法\n* 分代收集算法\n\n# 常见的JVM性能监控和故障处理工具类\n* 命令行工具\n\t* jps\n\t* jstat\n\t* jmap\n\t* jinfo\n* 可视化工具\n\t* jconsole\n\n# JVM如何设置参数\n\n# JVM性能调优\n\n# 类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的\n\n# 类加载的过程：加载、验证、准备、解析、初始化\n\n# 强引用、软引用、弱引用、虚引用\n\n# Java内存模型JMM","source":"_posts/20180802.md","raw":"---\ntitle: JVM\ntags: JVM\ncategories: Java\n---\n\n# JVM运行时内存区域划分\n* 程序计数器：存储程序当前执行的指令的地址，如果线程执行的是native方法，则程序计数器中的值是undefined。\n* Java虚拟机栈：存储方法\n* 本地方法栈：同Java虚拟机栈，但存储的是本地方法\n以上为线程私有的\n以下为线程共享的\n* Java堆：存储对象本身以及数组\n* 方法区：存储每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码\n\n# 内存溢出OOM和堆栈溢出SOE\n* SOE：如果线程请求的栈深度大于虚拟机允许的深度时，就会抛出SOE异常\n* OOM：如果在进行扩展时无法申请到足够的内存，就会抛出OOM异常\n\n# 如何判断对象是否可以回收或存活\n\n# 常见的GC回收算法及其含义\n* 标记-清楚算法\n* 复制算法\n* 标记-整理算法\n* 分代收集算法\n\n# 常见的JVM性能监控和故障处理工具类\n* 命令行工具\n\t* jps\n\t* jstat\n\t* jmap\n\t* jinfo\n* 可视化工具\n\t* jconsole\n\n# JVM如何设置参数\n\n# JVM性能调优\n\n# 类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的\n\n# 类加载的过程：加载、验证、准备、解析、初始化\n\n# 强引用、软引用、弱引用、虚引用\n\n# Java内存模型JMM","slug":"20180802","published":1,"date":"2019-01-08T01:20:48.449Z","updated":"2019-01-15T00:44:55.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smkq000jqwvgmzylue1b","content":"<h1 id=\"JVM运行时内存区域划分\"><a href=\"#JVM运行时内存区域划分\" class=\"headerlink\" title=\"JVM运行时内存区域划分\"></a>JVM运行时内存区域划分</h1><ul>\n<li>程序计数器：存储程序当前执行的指令的地址，如果线程执行的是native方法，则程序计数器中的值是undefined。</li>\n<li>Java虚拟机栈：存储方法</li>\n<li>本地方法栈：同Java虚拟机栈，但存储的是本地方法<br>以上为线程私有的<br>以下为线程共享的</li>\n<li>Java堆：存储对象本身以及数组</li>\n<li>方法区：存储每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码</li>\n</ul>\n<h1 id=\"内存溢出OOM和堆栈溢出SOE\"><a href=\"#内存溢出OOM和堆栈溢出SOE\" class=\"headerlink\" title=\"内存溢出OOM和堆栈溢出SOE\"></a>内存溢出OOM和堆栈溢出SOE</h1><ul>\n<li>SOE：如果线程请求的栈深度大于虚拟机允许的深度时，就会抛出SOE异常</li>\n<li>OOM：如果在进行扩展时无法申请到足够的内存，就会抛出OOM异常</li>\n</ul>\n<h1 id=\"如何判断对象是否可以回收或存活\"><a href=\"#如何判断对象是否可以回收或存活\" class=\"headerlink\" title=\"如何判断对象是否可以回收或存活\"></a>如何判断对象是否可以回收或存活</h1><h1 id=\"常见的GC回收算法及其含义\"><a href=\"#常见的GC回收算法及其含义\" class=\"headerlink\" title=\"常见的GC回收算法及其含义\"></a>常见的GC回收算法及其含义</h1><ul>\n<li>标记-清楚算法</li>\n<li>复制算法</li>\n<li>标记-整理算法</li>\n<li>分代收集算法</li>\n</ul>\n<h1 id=\"常见的JVM性能监控和故障处理工具类\"><a href=\"#常见的JVM性能监控和故障处理工具类\" class=\"headerlink\" title=\"常见的JVM性能监控和故障处理工具类\"></a>常见的JVM性能监控和故障处理工具类</h1><ul>\n<li>命令行工具<ul>\n<li>jps</li>\n<li>jstat</li>\n<li>jmap</li>\n<li>jinfo</li>\n</ul>\n</li>\n<li>可视化工具<ul>\n<li>jconsole</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"JVM如何设置参数\"><a href=\"#JVM如何设置参数\" class=\"headerlink\" title=\"JVM如何设置参数\"></a>JVM如何设置参数</h1><h1 id=\"JVM性能调优\"><a href=\"#JVM性能调优\" class=\"headerlink\" title=\"JVM性能调优\"></a>JVM性能调优</h1><h1 id=\"类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的\"><a href=\"#类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的\" class=\"headerlink\" title=\"类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的\"></a>类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的</h1><h1 id=\"类加载的过程：加载、验证、准备、解析、初始化\"><a href=\"#类加载的过程：加载、验证、准备、解析、初始化\" class=\"headerlink\" title=\"类加载的过程：加载、验证、准备、解析、初始化\"></a>类加载的过程：加载、验证、准备、解析、初始化</h1><h1 id=\"强引用、软引用、弱引用、虚引用\"><a href=\"#强引用、软引用、弱引用、虚引用\" class=\"headerlink\" title=\"强引用、软引用、弱引用、虚引用\"></a>强引用、软引用、弱引用、虚引用</h1><h1 id=\"Java内存模型JMM\"><a href=\"#Java内存模型JMM\" class=\"headerlink\" title=\"Java内存模型JMM\"></a>Java内存模型JMM</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM运行时内存区域划分\"><a href=\"#JVM运行时内存区域划分\" class=\"headerlink\" title=\"JVM运行时内存区域划分\"></a>JVM运行时内存区域划分</h1><ul>\n<li>程序计数器：存储程序当前执行的指令的地址，如果线程执行的是native方法，则程序计数器中的值是undefined。</li>\n<li>Java虚拟机栈：存储方法</li>\n<li>本地方法栈：同Java虚拟机栈，但存储的是本地方法<br>以上为线程私有的<br>以下为线程共享的</li>\n<li>Java堆：存储对象本身以及数组</li>\n<li>方法区：存储每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码</li>\n</ul>\n<h1 id=\"内存溢出OOM和堆栈溢出SOE\"><a href=\"#内存溢出OOM和堆栈溢出SOE\" class=\"headerlink\" title=\"内存溢出OOM和堆栈溢出SOE\"></a>内存溢出OOM和堆栈溢出SOE</h1><ul>\n<li>SOE：如果线程请求的栈深度大于虚拟机允许的深度时，就会抛出SOE异常</li>\n<li>OOM：如果在进行扩展时无法申请到足够的内存，就会抛出OOM异常</li>\n</ul>\n<h1 id=\"如何判断对象是否可以回收或存活\"><a href=\"#如何判断对象是否可以回收或存活\" class=\"headerlink\" title=\"如何判断对象是否可以回收或存活\"></a>如何判断对象是否可以回收或存活</h1><h1 id=\"常见的GC回收算法及其含义\"><a href=\"#常见的GC回收算法及其含义\" class=\"headerlink\" title=\"常见的GC回收算法及其含义\"></a>常见的GC回收算法及其含义</h1><ul>\n<li>标记-清楚算法</li>\n<li>复制算法</li>\n<li>标记-整理算法</li>\n<li>分代收集算法</li>\n</ul>\n<h1 id=\"常见的JVM性能监控和故障处理工具类\"><a href=\"#常见的JVM性能监控和故障处理工具类\" class=\"headerlink\" title=\"常见的JVM性能监控和故障处理工具类\"></a>常见的JVM性能监控和故障处理工具类</h1><ul>\n<li>命令行工具<ul>\n<li>jps</li>\n<li>jstat</li>\n<li>jmap</li>\n<li>jinfo</li>\n</ul>\n</li>\n<li>可视化工具<ul>\n<li>jconsole</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"JVM如何设置参数\"><a href=\"#JVM如何设置参数\" class=\"headerlink\" title=\"JVM如何设置参数\"></a>JVM如何设置参数</h1><h1 id=\"JVM性能调优\"><a href=\"#JVM性能调优\" class=\"headerlink\" title=\"JVM性能调优\"></a>JVM性能调优</h1><h1 id=\"类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的\"><a href=\"#类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的\" class=\"headerlink\" title=\"类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的\"></a>类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的</h1><h1 id=\"类加载的过程：加载、验证、准备、解析、初始化\"><a href=\"#类加载的过程：加载、验证、准备、解析、初始化\" class=\"headerlink\" title=\"类加载的过程：加载、验证、准备、解析、初始化\"></a>类加载的过程：加载、验证、准备、解析、初始化</h1><h1 id=\"强引用、软引用、弱引用、虚引用\"><a href=\"#强引用、软引用、弱引用、虚引用\" class=\"headerlink\" title=\"强引用、软引用、弱引用、虚引用\"></a>强引用、软引用、弱引用、虚引用</h1><h1 id=\"Java内存模型JMM\"><a href=\"#Java内存模型JMM\" class=\"headerlink\" title=\"Java内存模型JMM\"></a>Java内存模型JMM</h1>"},{"title":"Servlet容器","_content":"# Tomcat\n## 基础架构\n* Server：最顶层的容器，代表着整个服务器\n* Service：服务，一个Server可以包含多个Service，Service主要包含一个Container和多个Connector\n* Container：用于封装和管理Servlet，以及具体处理request请求\n\t* Engine：引擎\n\t* Host：站点\n\t* Context：应用程序\n\t* wrapper：\n* Connector：用于接受请求并将请求封装成Request和Response来具体处理\n生命周期管理--观察者模式\n门面模式\n\n## 如何加载Servlet\n\n## Pipeline-Valve（管道-阀门）机制\nContainer是容器的父接口\n命令模式\n责任链模式\n\n# Jetty\n## 基础架构\n* Server\n* Container\n* Handler\n\n## 与Tomcat的区别\n* 架构\n* 性能\n* 特性","source":"_posts/20180916.md","raw":"---\ntitle: Servlet容器\ntags: 容器\ncategories: Java\n---\n# Tomcat\n## 基础架构\n* Server：最顶层的容器，代表着整个服务器\n* Service：服务，一个Server可以包含多个Service，Service主要包含一个Container和多个Connector\n* Container：用于封装和管理Servlet，以及具体处理request请求\n\t* Engine：引擎\n\t* Host：站点\n\t* Context：应用程序\n\t* wrapper：\n* Connector：用于接受请求并将请求封装成Request和Response来具体处理\n生命周期管理--观察者模式\n门面模式\n\n## 如何加载Servlet\n\n## Pipeline-Valve（管道-阀门）机制\nContainer是容器的父接口\n命令模式\n责任链模式\n\n# Jetty\n## 基础架构\n* Server\n* Container\n* Handler\n\n## 与Tomcat的区别\n* 架构\n* 性能\n* 特性","slug":"20180916","published":1,"date":"2019-01-08T01:20:48.450Z","updated":"2019-01-15T00:44:55.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smks000nqwvgud282wg0","content":"<h1 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h1><h2 id=\"基础架构\"><a href=\"#基础架构\" class=\"headerlink\" title=\"基础架构\"></a>基础架构</h2><ul>\n<li>Server：最顶层的容器，代表着整个服务器</li>\n<li>Service：服务，一个Server可以包含多个Service，Service主要包含一个Container和多个Connector</li>\n<li>Container：用于封装和管理Servlet，以及具体处理request请求<ul>\n<li>Engine：引擎</li>\n<li>Host：站点</li>\n<li>Context：应用程序</li>\n<li>wrapper：</li>\n</ul>\n</li>\n<li>Connector：用于接受请求并将请求封装成Request和Response来具体处理<br>生命周期管理–观察者模式<br>门面模式</li>\n</ul>\n<h2 id=\"如何加载Servlet\"><a href=\"#如何加载Servlet\" class=\"headerlink\" title=\"如何加载Servlet\"></a>如何加载Servlet</h2><h2 id=\"Pipeline-Valve（管道-阀门）机制\"><a href=\"#Pipeline-Valve（管道-阀门）机制\" class=\"headerlink\" title=\"Pipeline-Valve（管道-阀门）机制\"></a>Pipeline-Valve（管道-阀门）机制</h2><p>Container是容器的父接口<br>命令模式<br>责任链模式</p>\n<h1 id=\"Jetty\"><a href=\"#Jetty\" class=\"headerlink\" title=\"Jetty\"></a>Jetty</h1><h2 id=\"基础架构-1\"><a href=\"#基础架构-1\" class=\"headerlink\" title=\"基础架构\"></a>基础架构</h2><ul>\n<li>Server</li>\n<li>Container</li>\n<li>Handler</li>\n</ul>\n<h2 id=\"与Tomcat的区别\"><a href=\"#与Tomcat的区别\" class=\"headerlink\" title=\"与Tomcat的区别\"></a>与Tomcat的区别</h2><ul>\n<li>架构</li>\n<li>性能</li>\n<li>特性</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h1><h2 id=\"基础架构\"><a href=\"#基础架构\" class=\"headerlink\" title=\"基础架构\"></a>基础架构</h2><ul>\n<li>Server：最顶层的容器，代表着整个服务器</li>\n<li>Service：服务，一个Server可以包含多个Service，Service主要包含一个Container和多个Connector</li>\n<li>Container：用于封装和管理Servlet，以及具体处理request请求<ul>\n<li>Engine：引擎</li>\n<li>Host：站点</li>\n<li>Context：应用程序</li>\n<li>wrapper：</li>\n</ul>\n</li>\n<li>Connector：用于接受请求并将请求封装成Request和Response来具体处理<br>生命周期管理–观察者模式<br>门面模式</li>\n</ul>\n<h2 id=\"如何加载Servlet\"><a href=\"#如何加载Servlet\" class=\"headerlink\" title=\"如何加载Servlet\"></a>如何加载Servlet</h2><h2 id=\"Pipeline-Valve（管道-阀门）机制\"><a href=\"#Pipeline-Valve（管道-阀门）机制\" class=\"headerlink\" title=\"Pipeline-Valve（管道-阀门）机制\"></a>Pipeline-Valve（管道-阀门）机制</h2><p>Container是容器的父接口<br>命令模式<br>责任链模式</p>\n<h1 id=\"Jetty\"><a href=\"#Jetty\" class=\"headerlink\" title=\"Jetty\"></a>Jetty</h1><h2 id=\"基础架构-1\"><a href=\"#基础架构-1\" class=\"headerlink\" title=\"基础架构\"></a>基础架构</h2><ul>\n<li>Server</li>\n<li>Container</li>\n<li>Handler</li>\n</ul>\n<h2 id=\"与Tomcat的区别\"><a href=\"#与Tomcat的区别\" class=\"headerlink\" title=\"与Tomcat的区别\"></a>与Tomcat的区别</h2><ul>\n<li>架构</li>\n<li>性能</li>\n<li>特性</li>\n</ul>\n"},{"title":"缓存技术","_content":"\n# Redis\n## 数据类型\nRedis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。\n\n## 内部结构\n\n## 使用场景\n随着数据量的增长，MySQL 已经满足不了大型互联网类应用的需求。因此，Redis 基于内存存储数据，可以极大的提高查询性能，对产品在架构上很好的补充。例如，为了提高服务端接口的访问速度，尽可能将读频率高的热点数据存放在 Redis 中。这个是非常典型的以空间换时间的策略，使用更多的内存换取 CPU 资源，通过增加系统的内存消耗，来加快程序的运行速度。\n\n在某些场景下，可以充分的利用 Redis 的特性，大大提高效率。这些场景包括缓存，会话缓存，时效性，访问频率，计数器，社交列表，记录用户判定信息，交集、并集和差集，热门列表与排行榜，最新动态等。\n\n使用 Redis 做缓存的时候，需要考虑数据不一致与脏读、缓存更新机制、缓存可用性、缓存服务降级、缓存穿透、缓存预热等缓存使用问题\n\n## 持久化机制\n* 快照\n* AOF\n* 虚拟内存方式\n\n## 集群方案与实现\n\n# 单线程\nredis利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销\n\n# 相关问题\n* 缓存雪崩\n由于原有缓存失效，新缓存未到期间(例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期)，所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。\n* 缓存穿透\n用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）\n* 缓存预热\n系统上线后，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！\n* 缓存更新\n除了缓存服务器自带的缓存失效策略之外，我们还可以根据具体的业务需求进行自定义的缓存淘汰\n* 缓存降级\n当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。\n降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。\n在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：\n（1）一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；\n（2）警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；\n（3）错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；\n（4）严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。\n\n## 使用合理性\n\n## 回收策略\n* volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n* volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n* volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n* allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰\n* allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\n* no-enviction（驱逐）：禁止驱逐数据","source":"_posts/20181010.md","raw":"---\ntitle: 缓存技术\ntags: 缓存技术\ncategories: Java\n---\n\n# Redis\n## 数据类型\nRedis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。\n\n## 内部结构\n\n## 使用场景\n随着数据量的增长，MySQL 已经满足不了大型互联网类应用的需求。因此，Redis 基于内存存储数据，可以极大的提高查询性能，对产品在架构上很好的补充。例如，为了提高服务端接口的访问速度，尽可能将读频率高的热点数据存放在 Redis 中。这个是非常典型的以空间换时间的策略，使用更多的内存换取 CPU 资源，通过增加系统的内存消耗，来加快程序的运行速度。\n\n在某些场景下，可以充分的利用 Redis 的特性，大大提高效率。这些场景包括缓存，会话缓存，时效性，访问频率，计数器，社交列表，记录用户判定信息，交集、并集和差集，热门列表与排行榜，最新动态等。\n\n使用 Redis 做缓存的时候，需要考虑数据不一致与脏读、缓存更新机制、缓存可用性、缓存服务降级、缓存穿透、缓存预热等缓存使用问题\n\n## 持久化机制\n* 快照\n* AOF\n* 虚拟内存方式\n\n## 集群方案与实现\n\n# 单线程\nredis利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销\n\n# 相关问题\n* 缓存雪崩\n由于原有缓存失效，新缓存未到期间(例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期)，所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。\n* 缓存穿透\n用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）\n* 缓存预热\n系统上线后，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！\n* 缓存更新\n除了缓存服务器自带的缓存失效策略之外，我们还可以根据具体的业务需求进行自定义的缓存淘汰\n* 缓存降级\n当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。\n降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。\n在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：\n（1）一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；\n（2）警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；\n（3）错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；\n（4）严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。\n\n## 使用合理性\n\n## 回收策略\n* volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n* volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n* volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n* allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰\n* allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\n* no-enviction（驱逐）：禁止驱逐数据","slug":"20181010","published":1,"date":"2019-01-08T01:20:48.450Z","updated":"2019-01-15T00:44:55.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smkt000qqwvgme27e7ke","content":"<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>\n<h2 id=\"内部结构\"><a href=\"#内部结构\" class=\"headerlink\" title=\"内部结构\"></a>内部结构</h2><h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>随着数据量的增长，MySQL 已经满足不了大型互联网类应用的需求。因此，Redis 基于内存存储数据，可以极大的提高查询性能，对产品在架构上很好的补充。例如，为了提高服务端接口的访问速度，尽可能将读频率高的热点数据存放在 Redis 中。这个是非常典型的以空间换时间的策略，使用更多的内存换取 CPU 资源，通过增加系统的内存消耗，来加快程序的运行速度。</p>\n<p>在某些场景下，可以充分的利用 Redis 的特性，大大提高效率。这些场景包括缓存，会话缓存，时效性，访问频率，计数器，社交列表，记录用户判定信息，交集、并集和差集，热门列表与排行榜，最新动态等。</p>\n<p>使用 Redis 做缓存的时候，需要考虑数据不一致与脏读、缓存更新机制、缓存可用性、缓存服务降级、缓存穿透、缓存预热等缓存使用问题</p>\n<h2 id=\"持久化机制\"><a href=\"#持久化机制\" class=\"headerlink\" title=\"持久化机制\"></a>持久化机制</h2><ul>\n<li>快照</li>\n<li>AOF</li>\n<li>虚拟内存方式</li>\n</ul>\n<h2 id=\"集群方案与实现\"><a href=\"#集群方案与实现\" class=\"headerlink\" title=\"集群方案与实现\"></a>集群方案与实现</h2><h1 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h1><p>redis利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销</p>\n<h1 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h1><ul>\n<li>缓存雪崩<br>由于原有缓存失效，新缓存未到期间(例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期)，所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。</li>\n<li>缓存穿透<br>用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）</li>\n<li>缓存预热<br>系统上线后，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</li>\n<li>缓存更新<br>除了缓存服务器自带的缓存失效策略之外，我们还可以根据具体的业务需求进行自定义的缓存淘汰</li>\n<li>缓存降级<br>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。<br>降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。<br>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：<br>（1）一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；<br>（2）警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；<br>（3）错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；<br>（4）严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</li>\n</ul>\n<h2 id=\"使用合理性\"><a href=\"#使用合理性\" class=\"headerlink\" title=\"使用合理性\"></a>使用合理性</h2><h2 id=\"回收策略\"><a href=\"#回收策略\" class=\"headerlink\" title=\"回收策略\"></a>回收策略</h2><ul>\n<li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>\n<li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>\n<li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>\n<li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li>\n<li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li>\n<li>no-enviction（驱逐）：禁止驱逐数据</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>\n<h2 id=\"内部结构\"><a href=\"#内部结构\" class=\"headerlink\" title=\"内部结构\"></a>内部结构</h2><h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>随着数据量的增长，MySQL 已经满足不了大型互联网类应用的需求。因此，Redis 基于内存存储数据，可以极大的提高查询性能，对产品在架构上很好的补充。例如，为了提高服务端接口的访问速度，尽可能将读频率高的热点数据存放在 Redis 中。这个是非常典型的以空间换时间的策略，使用更多的内存换取 CPU 资源，通过增加系统的内存消耗，来加快程序的运行速度。</p>\n<p>在某些场景下，可以充分的利用 Redis 的特性，大大提高效率。这些场景包括缓存，会话缓存，时效性，访问频率，计数器，社交列表，记录用户判定信息，交集、并集和差集，热门列表与排行榜，最新动态等。</p>\n<p>使用 Redis 做缓存的时候，需要考虑数据不一致与脏读、缓存更新机制、缓存可用性、缓存服务降级、缓存穿透、缓存预热等缓存使用问题</p>\n<h2 id=\"持久化机制\"><a href=\"#持久化机制\" class=\"headerlink\" title=\"持久化机制\"></a>持久化机制</h2><ul>\n<li>快照</li>\n<li>AOF</li>\n<li>虚拟内存方式</li>\n</ul>\n<h2 id=\"集群方案与实现\"><a href=\"#集群方案与实现\" class=\"headerlink\" title=\"集群方案与实现\"></a>集群方案与实现</h2><h1 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h1><p>redis利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销</p>\n<h1 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h1><ul>\n<li>缓存雪崩<br>由于原有缓存失效，新缓存未到期间(例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期)，所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。</li>\n<li>缓存穿透<br>用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）</li>\n<li>缓存预热<br>系统上线后，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</li>\n<li>缓存更新<br>除了缓存服务器自带的缓存失效策略之外，我们还可以根据具体的业务需求进行自定义的缓存淘汰</li>\n<li>缓存降级<br>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。<br>降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。<br>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：<br>（1）一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；<br>（2）警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；<br>（3）错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；<br>（4）严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</li>\n</ul>\n<h2 id=\"使用合理性\"><a href=\"#使用合理性\" class=\"headerlink\" title=\"使用合理性\"></a>使用合理性</h2><h2 id=\"回收策略\"><a href=\"#回收策略\" class=\"headerlink\" title=\"回收策略\"></a>回收策略</h2><ul>\n<li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>\n<li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>\n<li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>\n<li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li>\n<li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li>\n<li>no-enviction（驱逐）：禁止驱逐数据</li>\n</ul>\n"},{"title":"SQL优化及技巧","_content":"\n开发中经常遇到以下情况：\n* sql执行非常耗时\n* 行转列或列转行\n\n故记录一下解决思路，并记录一些常用函数\n<!-- more -->\n\n# SQL优化（MySQL）\n## 索引\n* 类型\n    * unique(唯一索引)：不可以出现相同的值，可以有NULL值\n    * normal(普通索引)：允许出现相同的索引内容\n    * primary key(主键索引)：不允许出现相同的值\n    * full text(全文索引)：可以针对值中的某个单词，但效率确实不敢恭维\n    * 组合索引：实质上是将多个字段建到一个索引里，列值的组合必须唯一\n* 底层实现类别\n    * B树（二叉树）、B-树、B+树（重点掌握）、B*树\n    * 哈希索引\n        * 自适应哈希索引：Innodb存储引擎会监控对表上各索引页的查询。如果观察到建立哈希索引可以带来速度提升，则建立哈希索引，称之为自适应哈希索引（AHI），AHI是通过缓冲池的B+树页构造而来，因此建立的速度很快，而且不需要对整张表构建哈希索引。Innodb存储引擎会自动根据访问的频率和模式来自动地为某些热点页建立哈希索引\n* 原理\n通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。\n\n## 存储引擎\n* MyISAM和InnoDB主要区别：\n   * MyISAM是非事务安全型的，而InnoDB是事务安全型的。\n   * MyISAM锁的粒度是表级，而InnoDB支持行级锁定。\n   * MyISAM支持全文类型索引，而InnoDB不支持全文索引。\n   * MyISAM相对简单，所以在效率上要优于InnoDB，小型应用可以考虑使用MyISAM。\n   * MyISAM表是保存成文件的形式，在跨平台的数据转移中使用MyISAM存储会省去不少的麻烦。\n   * InnoDB表比MyISAM表更安全，可以在保证数据不会丢失的情况下，切换非事务表到事务表（alter table tablename type=innodb）。\n\n* MyISAM和InnoDB的应用场景\n   * MyISAM管理非事务表。它提供高速存储和检索，以及全文搜索能力。如果应用中需要执行大量的SELECT查询，那么MyISAM是更好的选择。\n   * InnoDB用于事务处理应用程序，具有众多特性，包括ACID事务支持。如果应用中需要执行大量的INSERT或UPDATE操作，则应该使用InnoDB，这样可以提高多用户并发操作的性能。\n\n## 查看计划\n使用explain来查看sql的执行计划，其中type（使用到的索引类型）比较重要：\n\n| 类型 | 说明 |\n| --- | ------ |\n| system | 根据主键或者唯一索引进行的查询 |\n| const | 根据主键或者唯一索引进行的查询 |\n| eq_ref | 使用唯一索引的前缀扫描 |\n| ref | 使用非唯一性索引或者唯一索引的前缀扫描 |\n| range | 索引范围扫描 |\n| index | 索引全扫描 |\n| all | 全表扫描 |\n| NULL | MYSQL不用访问表或者索引就直接能到结果 |\n\n从最好到最差依次是：\n`system > const > eq_ref > ref > range > index > all`\n一般来说，保证查询至少要达到range，最好达到ref\n\n## 优化技巧\n首先要精简SQL（多余的表关联、重复的表访问、冗余的关联（过滤）条件、不必要的DISTINCT\\ORDER BY\\GROUP BY、曲折的访问路径）,其次驱动表的数据量要足够的少，最后集合操作是二维关系数据库引擎在数据处理时的根本。因此一个高效的SQL一定有一个合理的集合运算结构。根据业务需求，结合代码逻辑，有的时候需要将代码片通过子查询封装；而有的时候又需要将子查询合并到主查询中；有的时候需要将大集合根据业务逻辑切片成多个小的集合；有的时候又需要将若干个小的集合预先合并成大集合。总之，在进行SQL（优化）时，要用集合的思维指导SQL（优化）。\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，因为索引也要同时保存。使用索引的注意事项：\n* 建议使用索引的列：在where和join中出现的列、经常进行select操作的列\n* 索引列的要求：不会包含NULL、值比较唯一、非text、image和bit数据类型的列\n* 避免索引失效：不使用like‘%aaa%’、不使用NOT IN 、<>、！=操作、不要在列上进行运算、join操作时主键和外键的数据类型要相同\n\n# 行列互转(Oracle)\n[官方文档地址](http://www.oracle.com/technetwork/cn/articles/11g-pivot-101924-zhs.html)\n* pivot：行转列\n* unpivot：列转行","source":"_posts/20181023.md","raw":"---\ntitle: SQL优化及技巧\ntags: MySQL\ncategories: Database\n---\n\n开发中经常遇到以下情况：\n* sql执行非常耗时\n* 行转列或列转行\n\n故记录一下解决思路，并记录一些常用函数\n<!-- more -->\n\n# SQL优化（MySQL）\n## 索引\n* 类型\n    * unique(唯一索引)：不可以出现相同的值，可以有NULL值\n    * normal(普通索引)：允许出现相同的索引内容\n    * primary key(主键索引)：不允许出现相同的值\n    * full text(全文索引)：可以针对值中的某个单词，但效率确实不敢恭维\n    * 组合索引：实质上是将多个字段建到一个索引里，列值的组合必须唯一\n* 底层实现类别\n    * B树（二叉树）、B-树、B+树（重点掌握）、B*树\n    * 哈希索引\n        * 自适应哈希索引：Innodb存储引擎会监控对表上各索引页的查询。如果观察到建立哈希索引可以带来速度提升，则建立哈希索引，称之为自适应哈希索引（AHI），AHI是通过缓冲池的B+树页构造而来，因此建立的速度很快，而且不需要对整张表构建哈希索引。Innodb存储引擎会自动根据访问的频率和模式来自动地为某些热点页建立哈希索引\n* 原理\n通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。\n\n## 存储引擎\n* MyISAM和InnoDB主要区别：\n   * MyISAM是非事务安全型的，而InnoDB是事务安全型的。\n   * MyISAM锁的粒度是表级，而InnoDB支持行级锁定。\n   * MyISAM支持全文类型索引，而InnoDB不支持全文索引。\n   * MyISAM相对简单，所以在效率上要优于InnoDB，小型应用可以考虑使用MyISAM。\n   * MyISAM表是保存成文件的形式，在跨平台的数据转移中使用MyISAM存储会省去不少的麻烦。\n   * InnoDB表比MyISAM表更安全，可以在保证数据不会丢失的情况下，切换非事务表到事务表（alter table tablename type=innodb）。\n\n* MyISAM和InnoDB的应用场景\n   * MyISAM管理非事务表。它提供高速存储和检索，以及全文搜索能力。如果应用中需要执行大量的SELECT查询，那么MyISAM是更好的选择。\n   * InnoDB用于事务处理应用程序，具有众多特性，包括ACID事务支持。如果应用中需要执行大量的INSERT或UPDATE操作，则应该使用InnoDB，这样可以提高多用户并发操作的性能。\n\n## 查看计划\n使用explain来查看sql的执行计划，其中type（使用到的索引类型）比较重要：\n\n| 类型 | 说明 |\n| --- | ------ |\n| system | 根据主键或者唯一索引进行的查询 |\n| const | 根据主键或者唯一索引进行的查询 |\n| eq_ref | 使用唯一索引的前缀扫描 |\n| ref | 使用非唯一性索引或者唯一索引的前缀扫描 |\n| range | 索引范围扫描 |\n| index | 索引全扫描 |\n| all | 全表扫描 |\n| NULL | MYSQL不用访问表或者索引就直接能到结果 |\n\n从最好到最差依次是：\n`system > const > eq_ref > ref > range > index > all`\n一般来说，保证查询至少要达到range，最好达到ref\n\n## 优化技巧\n首先要精简SQL（多余的表关联、重复的表访问、冗余的关联（过滤）条件、不必要的DISTINCT\\ORDER BY\\GROUP BY、曲折的访问路径）,其次驱动表的数据量要足够的少，最后集合操作是二维关系数据库引擎在数据处理时的根本。因此一个高效的SQL一定有一个合理的集合运算结构。根据业务需求，结合代码逻辑，有的时候需要将代码片通过子查询封装；而有的时候又需要将子查询合并到主查询中；有的时候需要将大集合根据业务逻辑切片成多个小的集合；有的时候又需要将若干个小的集合预先合并成大集合。总之，在进行SQL（优化）时，要用集合的思维指导SQL（优化）。\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，因为索引也要同时保存。使用索引的注意事项：\n* 建议使用索引的列：在where和join中出现的列、经常进行select操作的列\n* 索引列的要求：不会包含NULL、值比较唯一、非text、image和bit数据类型的列\n* 避免索引失效：不使用like‘%aaa%’、不使用NOT IN 、<>、！=操作、不要在列上进行运算、join操作时主键和外键的数据类型要相同\n\n# 行列互转(Oracle)\n[官方文档地址](http://www.oracle.com/technetwork/cn/articles/11g-pivot-101924-zhs.html)\n* pivot：行转列\n* unpivot：列转行","slug":"20181023","published":1,"date":"2019-01-08T01:20:48.451Z","updated":"2019-01-15T00:44:55.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smkv000uqwvg61mpy3nb","content":"<p>开发中经常遇到以下情况：</p>\n<ul>\n<li>sql执行非常耗时</li>\n<li>行转列或列转行</li>\n</ul>\n<p>故记录一下解决思路，并记录一些常用函数<br><a id=\"more\"></a></p>\n<h1 id=\"SQL优化（MySQL）\"><a href=\"#SQL优化（MySQL）\" class=\"headerlink\" title=\"SQL优化（MySQL）\"></a>SQL优化（MySQL）</h1><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>类型<ul>\n<li>unique(唯一索引)：不可以出现相同的值，可以有NULL值</li>\n<li>normal(普通索引)：允许出现相同的索引内容</li>\n<li>primary key(主键索引)：不允许出现相同的值</li>\n<li>full text(全文索引)：可以针对值中的某个单词，但效率确实不敢恭维</li>\n<li>组合索引：实质上是将多个字段建到一个索引里，列值的组合必须唯一</li>\n</ul>\n</li>\n<li>底层实现类别<ul>\n<li>B树（二叉树）、B-树、B+树（重点掌握）、B*树</li>\n<li>哈希索引<ul>\n<li>自适应哈希索引：Innodb存储引擎会监控对表上各索引页的查询。如果观察到建立哈希索引可以带来速度提升，则建立哈希索引，称之为自适应哈希索引（AHI），AHI是通过缓冲池的B+树页构造而来，因此建立的速度很快，而且不需要对整张表构建哈希索引。Innodb存储引擎会自动根据访问的频率和模式来自动地为某些热点页建立哈希索引</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>原理<br>通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。</li>\n</ul>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><ul>\n<li><p>MyISAM和InnoDB主要区别：</p>\n<ul>\n<li>MyISAM是非事务安全型的，而InnoDB是事务安全型的。</li>\n<li>MyISAM锁的粒度是表级，而InnoDB支持行级锁定。</li>\n<li>MyISAM支持全文类型索引，而InnoDB不支持全文索引。</li>\n<li>MyISAM相对简单，所以在效率上要优于InnoDB，小型应用可以考虑使用MyISAM。</li>\n<li>MyISAM表是保存成文件的形式，在跨平台的数据转移中使用MyISAM存储会省去不少的麻烦。</li>\n<li>InnoDB表比MyISAM表更安全，可以在保证数据不会丢失的情况下，切换非事务表到事务表（alter table tablename type=innodb）。</li>\n</ul>\n</li>\n<li><p>MyISAM和InnoDB的应用场景</p>\n<ul>\n<li>MyISAM管理非事务表。它提供高速存储和检索，以及全文搜索能力。如果应用中需要执行大量的SELECT查询，那么MyISAM是更好的选择。</li>\n<li>InnoDB用于事务处理应用程序，具有众多特性，包括ACID事务支持。如果应用中需要执行大量的INSERT或UPDATE操作，则应该使用InnoDB，这样可以提高多用户并发操作的性能。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"查看计划\"><a href=\"#查看计划\" class=\"headerlink\" title=\"查看计划\"></a>查看计划</h2><p>使用explain来查看sql的执行计划，其中type（使用到的索引类型）比较重要：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>system</td>\n<td>根据主键或者唯一索引进行的查询</td>\n</tr>\n<tr>\n<td>const</td>\n<td>根据主键或者唯一索引进行的查询</td>\n</tr>\n<tr>\n<td>eq_ref</td>\n<td>使用唯一索引的前缀扫描</td>\n</tr>\n<tr>\n<td>ref</td>\n<td>使用非唯一性索引或者唯一索引的前缀扫描</td>\n</tr>\n<tr>\n<td>range</td>\n<td>索引范围扫描</td>\n</tr>\n<tr>\n<td>index</td>\n<td>索引全扫描</td>\n</tr>\n<tr>\n<td>all</td>\n<td>全表扫描</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>MYSQL不用访问表或者索引就直接能到结果</td>\n</tr>\n</tbody>\n</table>\n<p>从最好到最差依次是：<br><code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</code><br>一般来说，保证查询至少要达到range，最好达到ref</p>\n<h2 id=\"优化技巧\"><a href=\"#优化技巧\" class=\"headerlink\" title=\"优化技巧\"></a>优化技巧</h2><p>首先要精简SQL（多余的表关联、重复的表访问、冗余的关联（过滤）条件、不必要的DISTINCT\\ORDER BY\\GROUP BY、曲折的访问路径）,其次驱动表的数据量要足够的少，最后集合操作是二维关系数据库引擎在数据处理时的根本。因此一个高效的SQL一定有一个合理的集合运算结构。根据业务需求，结合代码逻辑，有的时候需要将代码片通过子查询封装；而有的时候又需要将子查询合并到主查询中；有的时候需要将大集合根据业务逻辑切片成多个小的集合；有的时候又需要将若干个小的集合预先合并成大集合。总之，在进行SQL（优化）时，要用集合的思维指导SQL（优化）。<br>虽然索引大大提高了查询速度，同时却会降低更新表的速度，因为索引也要同时保存。使用索引的注意事项：</p>\n<ul>\n<li>建议使用索引的列：在where和join中出现的列、经常进行select操作的列</li>\n<li>索引列的要求：不会包含NULL、值比较唯一、非text、image和bit数据类型的列</li>\n<li>避免索引失效：不使用like‘%aaa%’、不使用NOT IN 、&lt;&gt;、！=操作、不要在列上进行运算、join操作时主键和外键的数据类型要相同</li>\n</ul>\n<h1 id=\"行列互转-Oracle\"><a href=\"#行列互转-Oracle\" class=\"headerlink\" title=\"行列互转(Oracle)\"></a>行列互转(Oracle)</h1><p><a href=\"http://www.oracle.com/technetwork/cn/articles/11g-pivot-101924-zhs.html\" target=\"_blank\" rel=\"external\">官方文档地址</a></p>\n<ul>\n<li>pivot：行转列</li>\n<li>unpivot：列转行</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>开发中经常遇到以下情况：</p>\n<ul>\n<li>sql执行非常耗时</li>\n<li>行转列或列转行</li>\n</ul>\n<p>故记录一下解决思路，并记录一些常用函数<br>","more":"</p>\n<h1 id=\"SQL优化（MySQL）\"><a href=\"#SQL优化（MySQL）\" class=\"headerlink\" title=\"SQL优化（MySQL）\"></a>SQL优化（MySQL）</h1><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>类型<ul>\n<li>unique(唯一索引)：不可以出现相同的值，可以有NULL值</li>\n<li>normal(普通索引)：允许出现相同的索引内容</li>\n<li>primary key(主键索引)：不允许出现相同的值</li>\n<li>full text(全文索引)：可以针对值中的某个单词，但效率确实不敢恭维</li>\n<li>组合索引：实质上是将多个字段建到一个索引里，列值的组合必须唯一</li>\n</ul>\n</li>\n<li>底层实现类别<ul>\n<li>B树（二叉树）、B-树、B+树（重点掌握）、B*树</li>\n<li>哈希索引<ul>\n<li>自适应哈希索引：Innodb存储引擎会监控对表上各索引页的查询。如果观察到建立哈希索引可以带来速度提升，则建立哈希索引，称之为自适应哈希索引（AHI），AHI是通过缓冲池的B+树页构造而来，因此建立的速度很快，而且不需要对整张表构建哈希索引。Innodb存储引擎会自动根据访问的频率和模式来自动地为某些热点页建立哈希索引</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>原理<br>通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。</li>\n</ul>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><ul>\n<li><p>MyISAM和InnoDB主要区别：</p>\n<ul>\n<li>MyISAM是非事务安全型的，而InnoDB是事务安全型的。</li>\n<li>MyISAM锁的粒度是表级，而InnoDB支持行级锁定。</li>\n<li>MyISAM支持全文类型索引，而InnoDB不支持全文索引。</li>\n<li>MyISAM相对简单，所以在效率上要优于InnoDB，小型应用可以考虑使用MyISAM。</li>\n<li>MyISAM表是保存成文件的形式，在跨平台的数据转移中使用MyISAM存储会省去不少的麻烦。</li>\n<li>InnoDB表比MyISAM表更安全，可以在保证数据不会丢失的情况下，切换非事务表到事务表（alter table tablename type=innodb）。</li>\n</ul>\n</li>\n<li><p>MyISAM和InnoDB的应用场景</p>\n<ul>\n<li>MyISAM管理非事务表。它提供高速存储和检索，以及全文搜索能力。如果应用中需要执行大量的SELECT查询，那么MyISAM是更好的选择。</li>\n<li>InnoDB用于事务处理应用程序，具有众多特性，包括ACID事务支持。如果应用中需要执行大量的INSERT或UPDATE操作，则应该使用InnoDB，这样可以提高多用户并发操作的性能。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"查看计划\"><a href=\"#查看计划\" class=\"headerlink\" title=\"查看计划\"></a>查看计划</h2><p>使用explain来查看sql的执行计划，其中type（使用到的索引类型）比较重要：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>system</td>\n<td>根据主键或者唯一索引进行的查询</td>\n</tr>\n<tr>\n<td>const</td>\n<td>根据主键或者唯一索引进行的查询</td>\n</tr>\n<tr>\n<td>eq_ref</td>\n<td>使用唯一索引的前缀扫描</td>\n</tr>\n<tr>\n<td>ref</td>\n<td>使用非唯一性索引或者唯一索引的前缀扫描</td>\n</tr>\n<tr>\n<td>range</td>\n<td>索引范围扫描</td>\n</tr>\n<tr>\n<td>index</td>\n<td>索引全扫描</td>\n</tr>\n<tr>\n<td>all</td>\n<td>全表扫描</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>MYSQL不用访问表或者索引就直接能到结果</td>\n</tr>\n</tbody>\n</table>\n<p>从最好到最差依次是：<br><code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</code><br>一般来说，保证查询至少要达到range，最好达到ref</p>\n<h2 id=\"优化技巧\"><a href=\"#优化技巧\" class=\"headerlink\" title=\"优化技巧\"></a>优化技巧</h2><p>首先要精简SQL（多余的表关联、重复的表访问、冗余的关联（过滤）条件、不必要的DISTINCT\\ORDER BY\\GROUP BY、曲折的访问路径）,其次驱动表的数据量要足够的少，最后集合操作是二维关系数据库引擎在数据处理时的根本。因此一个高效的SQL一定有一个合理的集合运算结构。根据业务需求，结合代码逻辑，有的时候需要将代码片通过子查询封装；而有的时候又需要将子查询合并到主查询中；有的时候需要将大集合根据业务逻辑切片成多个小的集合；有的时候又需要将若干个小的集合预先合并成大集合。总之，在进行SQL（优化）时，要用集合的思维指导SQL（优化）。<br>虽然索引大大提高了查询速度，同时却会降低更新表的速度，因为索引也要同时保存。使用索引的注意事项：</p>\n<ul>\n<li>建议使用索引的列：在where和join中出现的列、经常进行select操作的列</li>\n<li>索引列的要求：不会包含NULL、值比较唯一、非text、image和bit数据类型的列</li>\n<li>避免索引失效：不使用like‘%aaa%’、不使用NOT IN 、&lt;&gt;、！=操作、不要在列上进行运算、join操作时主键和外键的数据类型要相同</li>\n</ul>\n<h1 id=\"行列互转-Oracle\"><a href=\"#行列互转-Oracle\" class=\"headerlink\" title=\"行列互转(Oracle)\"></a>行列互转(Oracle)</h1><p><a href=\"http://www.oracle.com/technetwork/cn/articles/11g-pivot-101924-zhs.html\" target=\"_blank\" rel=\"external\">官方文档地址</a></p>\n<ul>\n<li>pivot：行转列</li>\n<li>unpivot：列转行</li>\n</ul>"},{"title":"互联网三高之解决方案(1)","_content":"\n    如何应对C10K（在一秒之内连接客户端的数目为10k即1万）问题，最简单的思路就是，让每个服务器都能完成全部的请求，然后把请求随机的发给任何一个服务器处理（集群：相同业务部署在不同机器上，采用DNS轮询）。然而，单纯的请求随机转发，并不能解决一切问题。比如Session不会在服务器间共享。至此，一个典型的三层结构出现了：接入、逻辑、存储（分布式：不同业务部署在不同机器上）。然而现实中并不止三层这么简单，并且管理的复杂性也非常高。\n<!-- more -->\n# 负载均衡\n如何同时处理多个请求的问题上，业界有2个典型的方案：多线程和异步。多线程容易造成死锁，并且线程切换开销比较大，当非阻塞I/O出来后，异步比多线程更流行。典型的框架有Nginx（反向代理服务器）。\n\n# 分布式Session\n* 粘性Session\n* 服务器Session复制\n* Sesssion共享\n* Session持久化\n* Terracotta实现Session复制\n\n# 最终一致性\nCAP理论\n\n## 分布式锁\n* 基于数据库实现\n* 基于缓存实现\n* 基于Zookeeper实现\n\n## 分布式事务\n* 两阶段提交（2PC）\n* MQ事务消息\n* 补偿事务（TCC）","source":"_posts/20181111.md","raw":"---\ntitle: 互联网三高之解决方案(1)\ntags: 分布式\ncategories: Edge\n---\n\n    如何应对C10K（在一秒之内连接客户端的数目为10k即1万）问题，最简单的思路就是，让每个服务器都能完成全部的请求，然后把请求随机的发给任何一个服务器处理（集群：相同业务部署在不同机器上，采用DNS轮询）。然而，单纯的请求随机转发，并不能解决一切问题。比如Session不会在服务器间共享。至此，一个典型的三层结构出现了：接入、逻辑、存储（分布式：不同业务部署在不同机器上）。然而现实中并不止三层这么简单，并且管理的复杂性也非常高。\n<!-- more -->\n# 负载均衡\n如何同时处理多个请求的问题上，业界有2个典型的方案：多线程和异步。多线程容易造成死锁，并且线程切换开销比较大，当非阻塞I/O出来后，异步比多线程更流行。典型的框架有Nginx（反向代理服务器）。\n\n# 分布式Session\n* 粘性Session\n* 服务器Session复制\n* Sesssion共享\n* Session持久化\n* Terracotta实现Session复制\n\n# 最终一致性\nCAP理论\n\n## 分布式锁\n* 基于数据库实现\n* 基于缓存实现\n* 基于Zookeeper实现\n\n## 分布式事务\n* 两阶段提交（2PC）\n* MQ事务消息\n* 补偿事务（TCC）","slug":"20181111","published":1,"date":"2019-01-15T00:44:55.040Z","updated":"2019-01-15T00:44:55.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smkw000xqwvgsmban7op","content":"<pre><code>如何应对C10K（在一秒之内连接客户端的数目为10k即1万）问题，最简单的思路就是，让每个服务器都能完成全部的请求，然后把请求随机的发给任何一个服务器处理（集群：相同业务部署在不同机器上，采用DNS轮询）。然而，单纯的请求随机转发，并不能解决一切问题。比如Session不会在服务器间共享。至此，一个典型的三层结构出现了：接入、逻辑、存储（分布式：不同业务部署在不同机器上）。然而现实中并不止三层这么简单，并且管理的复杂性也非常高。\n</code></pre><a id=\"more\"></a>\n<h1 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h1><p>如何同时处理多个请求的问题上，业界有2个典型的方案：多线程和异步。多线程容易造成死锁，并且线程切换开销比较大，当非阻塞I/O出来后，异步比多线程更流行。典型的框架有Nginx（反向代理服务器）。</p>\n<h1 id=\"分布式Session\"><a href=\"#分布式Session\" class=\"headerlink\" title=\"分布式Session\"></a>分布式Session</h1><ul>\n<li>粘性Session</li>\n<li>服务器Session复制</li>\n<li>Sesssion共享</li>\n<li>Session持久化</li>\n<li>Terracotta实现Session复制</li>\n</ul>\n<h1 id=\"最终一致性\"><a href=\"#最终一致性\" class=\"headerlink\" title=\"最终一致性\"></a>最终一致性</h1><p>CAP理论</p>\n<h2 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h2><ul>\n<li>基于数据库实现</li>\n<li>基于缓存实现</li>\n<li>基于Zookeeper实现</li>\n</ul>\n<h2 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><ul>\n<li>两阶段提交（2PC）</li>\n<li>MQ事务消息</li>\n<li>补偿事务（TCC）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<pre><code>如何应对C10K（在一秒之内连接客户端的数目为10k即1万）问题，最简单的思路就是，让每个服务器都能完成全部的请求，然后把请求随机的发给任何一个服务器处理（集群：相同业务部署在不同机器上，采用DNS轮询）。然而，单纯的请求随机转发，并不能解决一切问题。比如Session不会在服务器间共享。至此，一个典型的三层结构出现了：接入、逻辑、存储（分布式：不同业务部署在不同机器上）。然而现实中并不止三层这么简单，并且管理的复杂性也非常高。\n</code></pre>","more":"<h1 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h1><p>如何同时处理多个请求的问题上，业界有2个典型的方案：多线程和异步。多线程容易造成死锁，并且线程切换开销比较大，当非阻塞I/O出来后，异步比多线程更流行。典型的框架有Nginx（反向代理服务器）。</p>\n<h1 id=\"分布式Session\"><a href=\"#分布式Session\" class=\"headerlink\" title=\"分布式Session\"></a>分布式Session</h1><ul>\n<li>粘性Session</li>\n<li>服务器Session复制</li>\n<li>Sesssion共享</li>\n<li>Session持久化</li>\n<li>Terracotta实现Session复制</li>\n</ul>\n<h1 id=\"最终一致性\"><a href=\"#最终一致性\" class=\"headerlink\" title=\"最终一致性\"></a>最终一致性</h1><p>CAP理论</p>\n<h2 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h2><ul>\n<li>基于数据库实现</li>\n<li>基于缓存实现</li>\n<li>基于Zookeeper实现</li>\n</ul>\n<h2 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><ul>\n<li>两阶段提交（2PC）</li>\n<li>MQ事务消息</li>\n<li>补偿事务（TCC）</li>\n</ul>"},{"title":"互联网三高之解决方案(2)","_content":"\n架构演进趋势：单体架构、垂直架构、SOA架构、微服务架构\n微服务架构，是以专注于单一责任的小型功能模块为基础、通过API集相互通信的方式完成复杂业务系统搭建的一种设计思想。\n<!-- more -->\n# 挑战性工作\n* 业务拆分，体现在设计环节：在设计的时候，要有足够的判断力来合理的规划服务之间的界限。\n\n* 服务治理，底层技术的支持：首先要选一款适合自己实际情况的分布式服务基础框架，对于服务的发现、治理、熔断、降级，都要做好相应的技术准备。\n\n* 自动测试，一定要自动化。微服务一个明显的表象就是随着服务的增多，如果继续沿用传统的测试模式就会遇到瓶颈，为了保证高效的迭代，尽量做到更多的环节实现自动化。\n\n* 自动运维 ：微服务拆分之后，每个服务都可以独立部署，进而言之应该是随时随地可以升级。尤其当互联网发展到今天，业务要保持对市场变化的一个高效响应，自动化运维就是提升交付速度的一个重要环节。\n\n* 监控：包括硬件环境、服务状态、系统健康度、接口调用情况、异常的实时告警以及潜在问题的事先预警等等。监控在实施微服务过程中会重要到什么程度呢?一句话：没准备好监控，就不要搞微服务。\n\n# 微服务框架选择\n[文章](https://blog.csdn.net/u010664947/article/details/80007767)\nSpring Cloud整机，dubbo需要自己组装；整机的性能有保证，组装的机子更自由。\n注册中心：dubbo可以选择zk、redis，Spring Cloud只能用Eureka或自研\nCAP理论：Zookeeper 保证的是CP，Eureka 设计则遵循AP原则\n\n# Spring Cloud特性：\n* 分布式/版本化配置(Distributed/versioned configuration)\nConfig\n* 服务注册与发现(Service registration and discovery)\nEureka\n* 路由(Routing)\nZuul\n* 断路器(Circuit Breakers)\nHystrix\n* 分布式消息传递(Distributed messaging)\nRibbon\n* 全局锁(Global locks)\n* 选主与集群状态(Leadership election and cluster state)\n* 服务和服务之间的调用(Service-to-service calls)\n* 负载均衡(Load balancing)\n# 官方文档\n## Spring Cloud\n[官方文档](http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html)\n## Spring Cloud Data Flow\n[官方文档](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started)","source":"_posts/20181112.md","raw":"---\ntitle: 互联网三高之解决方案(2)\ntags: 微服务\ncategories: Edge\n---\n\n架构演进趋势：单体架构、垂直架构、SOA架构、微服务架构\n微服务架构，是以专注于单一责任的小型功能模块为基础、通过API集相互通信的方式完成复杂业务系统搭建的一种设计思想。\n<!-- more -->\n# 挑战性工作\n* 业务拆分，体现在设计环节：在设计的时候，要有足够的判断力来合理的规划服务之间的界限。\n\n* 服务治理，底层技术的支持：首先要选一款适合自己实际情况的分布式服务基础框架，对于服务的发现、治理、熔断、降级，都要做好相应的技术准备。\n\n* 自动测试，一定要自动化。微服务一个明显的表象就是随着服务的增多，如果继续沿用传统的测试模式就会遇到瓶颈，为了保证高效的迭代，尽量做到更多的环节实现自动化。\n\n* 自动运维 ：微服务拆分之后，每个服务都可以独立部署，进而言之应该是随时随地可以升级。尤其当互联网发展到今天，业务要保持对市场变化的一个高效响应，自动化运维就是提升交付速度的一个重要环节。\n\n* 监控：包括硬件环境、服务状态、系统健康度、接口调用情况、异常的实时告警以及潜在问题的事先预警等等。监控在实施微服务过程中会重要到什么程度呢?一句话：没准备好监控，就不要搞微服务。\n\n# 微服务框架选择\n[文章](https://blog.csdn.net/u010664947/article/details/80007767)\nSpring Cloud整机，dubbo需要自己组装；整机的性能有保证，组装的机子更自由。\n注册中心：dubbo可以选择zk、redis，Spring Cloud只能用Eureka或自研\nCAP理论：Zookeeper 保证的是CP，Eureka 设计则遵循AP原则\n\n# Spring Cloud特性：\n* 分布式/版本化配置(Distributed/versioned configuration)\nConfig\n* 服务注册与发现(Service registration and discovery)\nEureka\n* 路由(Routing)\nZuul\n* 断路器(Circuit Breakers)\nHystrix\n* 分布式消息传递(Distributed messaging)\nRibbon\n* 全局锁(Global locks)\n* 选主与集群状态(Leadership election and cluster state)\n* 服务和服务之间的调用(Service-to-service calls)\n* 负载均衡(Load balancing)\n# 官方文档\n## Spring Cloud\n[官方文档](http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html)\n## Spring Cloud Data Flow\n[官方文档](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started)","slug":"20181112","published":1,"date":"2019-01-15T00:44:55.041Z","updated":"2019-01-15T00:44:55.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smky0011qwvgkxu0smi1","content":"<p>架构演进趋势：单体架构、垂直架构、SOA架构、微服务架构<br>微服务架构，是以专注于单一责任的小型功能模块为基础、通过API集相互通信的方式完成复杂业务系统搭建的一种设计思想。<br><a id=\"more\"></a></p>\n<h1 id=\"挑战性工作\"><a href=\"#挑战性工作\" class=\"headerlink\" title=\"挑战性工作\"></a>挑战性工作</h1><ul>\n<li><p>业务拆分，体现在设计环节：在设计的时候，要有足够的判断力来合理的规划服务之间的界限。</p>\n</li>\n<li><p>服务治理，底层技术的支持：首先要选一款适合自己实际情况的分布式服务基础框架，对于服务的发现、治理、熔断、降级，都要做好相应的技术准备。</p>\n</li>\n<li><p>自动测试，一定要自动化。微服务一个明显的表象就是随着服务的增多，如果继续沿用传统的测试模式就会遇到瓶颈，为了保证高效的迭代，尽量做到更多的环节实现自动化。</p>\n</li>\n<li><p>自动运维 ：微服务拆分之后，每个服务都可以独立部署，进而言之应该是随时随地可以升级。尤其当互联网发展到今天，业务要保持对市场变化的一个高效响应，自动化运维就是提升交付速度的一个重要环节。</p>\n</li>\n<li><p>监控：包括硬件环境、服务状态、系统健康度、接口调用情况、异常的实时告警以及潜在问题的事先预警等等。监控在实施微服务过程中会重要到什么程度呢?一句话：没准备好监控，就不要搞微服务。</p>\n</li>\n</ul>\n<h1 id=\"微服务框架选择\"><a href=\"#微服务框架选择\" class=\"headerlink\" title=\"微服务框架选择\"></a>微服务框架选择</h1><p><a href=\"https://blog.csdn.net/u010664947/article/details/80007767\" target=\"_blank\" rel=\"external\">文章</a><br>Spring Cloud整机，dubbo需要自己组装；整机的性能有保证，组装的机子更自由。<br>注册中心：dubbo可以选择zk、redis，Spring Cloud只能用Eureka或自研<br>CAP理论：Zookeeper 保证的是CP，Eureka 设计则遵循AP原则</p>\n<h1 id=\"Spring-Cloud特性：\"><a href=\"#Spring-Cloud特性：\" class=\"headerlink\" title=\"Spring Cloud特性：\"></a>Spring Cloud特性：</h1><ul>\n<li>分布式/版本化配置(Distributed/versioned configuration)<br>Config</li>\n<li>服务注册与发现(Service registration and discovery)<br>Eureka</li>\n<li>路由(Routing)<br>Zuul</li>\n<li>断路器(Circuit Breakers)<br>Hystrix</li>\n<li>分布式消息传递(Distributed messaging)<br>Ribbon</li>\n<li>全局锁(Global locks)</li>\n<li>选主与集群状态(Leadership election and cluster state)</li>\n<li>服务和服务之间的调用(Service-to-service calls)</li>\n<li>负载均衡(Load balancing)<h1 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h1><h2 id=\"Spring-Cloud\"><a href=\"#Spring-Cloud\" class=\"headerlink\" title=\"Spring Cloud\"></a>Spring Cloud</h2><a href=\"http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html\" target=\"_blank\" rel=\"external\">官方文档</a><h2 id=\"Spring-Cloud-Data-Flow\"><a href=\"#Spring-Cloud-Data-Flow\" class=\"headerlink\" title=\"Spring Cloud Data Flow\"></a>Spring Cloud Data Flow</h2><a href=\"https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>架构演进趋势：单体架构、垂直架构、SOA架构、微服务架构<br>微服务架构，是以专注于单一责任的小型功能模块为基础、通过API集相互通信的方式完成复杂业务系统搭建的一种设计思想。<br>","more":"</p>\n<h1 id=\"挑战性工作\"><a href=\"#挑战性工作\" class=\"headerlink\" title=\"挑战性工作\"></a>挑战性工作</h1><ul>\n<li><p>业务拆分，体现在设计环节：在设计的时候，要有足够的判断力来合理的规划服务之间的界限。</p>\n</li>\n<li><p>服务治理，底层技术的支持：首先要选一款适合自己实际情况的分布式服务基础框架，对于服务的发现、治理、熔断、降级，都要做好相应的技术准备。</p>\n</li>\n<li><p>自动测试，一定要自动化。微服务一个明显的表象就是随着服务的增多，如果继续沿用传统的测试模式就会遇到瓶颈，为了保证高效的迭代，尽量做到更多的环节实现自动化。</p>\n</li>\n<li><p>自动运维 ：微服务拆分之后，每个服务都可以独立部署，进而言之应该是随时随地可以升级。尤其当互联网发展到今天，业务要保持对市场变化的一个高效响应，自动化运维就是提升交付速度的一个重要环节。</p>\n</li>\n<li><p>监控：包括硬件环境、服务状态、系统健康度、接口调用情况、异常的实时告警以及潜在问题的事先预警等等。监控在实施微服务过程中会重要到什么程度呢?一句话：没准备好监控，就不要搞微服务。</p>\n</li>\n</ul>\n<h1 id=\"微服务框架选择\"><a href=\"#微服务框架选择\" class=\"headerlink\" title=\"微服务框架选择\"></a>微服务框架选择</h1><p><a href=\"https://blog.csdn.net/u010664947/article/details/80007767\" target=\"_blank\" rel=\"external\">文章</a><br>Spring Cloud整机，dubbo需要自己组装；整机的性能有保证，组装的机子更自由。<br>注册中心：dubbo可以选择zk、redis，Spring Cloud只能用Eureka或自研<br>CAP理论：Zookeeper 保证的是CP，Eureka 设计则遵循AP原则</p>\n<h1 id=\"Spring-Cloud特性：\"><a href=\"#Spring-Cloud特性：\" class=\"headerlink\" title=\"Spring Cloud特性：\"></a>Spring Cloud特性：</h1><ul>\n<li>分布式/版本化配置(Distributed/versioned configuration)<br>Config</li>\n<li>服务注册与发现(Service registration and discovery)<br>Eureka</li>\n<li>路由(Routing)<br>Zuul</li>\n<li>断路器(Circuit Breakers)<br>Hystrix</li>\n<li>分布式消息传递(Distributed messaging)<br>Ribbon</li>\n<li>全局锁(Global locks)</li>\n<li>选主与集群状态(Leadership election and cluster state)</li>\n<li>服务和服务之间的调用(Service-to-service calls)</li>\n<li>负载均衡(Load balancing)<h1 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h1><h2 id=\"Spring-Cloud\"><a href=\"#Spring-Cloud\" class=\"headerlink\" title=\"Spring Cloud\"></a>Spring Cloud</h2><a href=\"http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html\" target=\"_blank\" rel=\"external\">官方文档</a><h2 id=\"Spring-Cloud-Data-Flow\"><a href=\"#Spring-Cloud-Data-Flow\" class=\"headerlink\" title=\"Spring Cloud Data Flow\"></a>Spring Cloud Data Flow</h2><a href=\"https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n</ul>"},{"title":"消息队列","_content":"\n# 使用场景\n主要解决应用耦合，异步消息，流量削锋，日志处理等问题\n\n# 重发补偿\n业务处理失败，重新发送消息\n\n# 幂等性\n某个函数或者某个接口使用相同参数调用一次或者无限次，其造成的后果是一样的\n\n# 堆积\n* 持久化到数据库\n* 非持久化，缓存\n\n# 保证有序性\n在每个消息被创建的时候，都赋予一个全局唯一的、单调递增的、连续的序列号，可通过全局计数器来实现。\n\n# 自己实现\n发送、接收，产生、消费","source":"_posts/20181113.md","raw":"---\ntitle: 消息队列\ntags: 消息队列\ncategories: Java\n---\n\n# 使用场景\n主要解决应用耦合，异步消息，流量削锋，日志处理等问题\n\n# 重发补偿\n业务处理失败，重新发送消息\n\n# 幂等性\n某个函数或者某个接口使用相同参数调用一次或者无限次，其造成的后果是一样的\n\n# 堆积\n* 持久化到数据库\n* 非持久化，缓存\n\n# 保证有序性\n在每个消息被创建的时候，都赋予一个全局唯一的、单调递增的、连续的序列号，可通过全局计数器来实现。\n\n# 自己实现\n发送、接收，产生、消费","slug":"20181113","published":1,"date":"2019-01-15T00:44:55.041Z","updated":"2019-01-15T00:44:55.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smkz0014qwvgt64zfyjl","content":"<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><p>主要解决应用耦合，异步消息，流量削锋，日志处理等问题</p>\n<h1 id=\"重发补偿\"><a href=\"#重发补偿\" class=\"headerlink\" title=\"重发补偿\"></a>重发补偿</h1><p>业务处理失败，重新发送消息</p>\n<h1 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h1><p>某个函数或者某个接口使用相同参数调用一次或者无限次，其造成的后果是一样的</p>\n<h1 id=\"堆积\"><a href=\"#堆积\" class=\"headerlink\" title=\"堆积\"></a>堆积</h1><ul>\n<li>持久化到数据库</li>\n<li>非持久化，缓存</li>\n</ul>\n<h1 id=\"保证有序性\"><a href=\"#保证有序性\" class=\"headerlink\" title=\"保证有序性\"></a>保证有序性</h1><p>在每个消息被创建的时候，都赋予一个全局唯一的、单调递增的、连续的序列号，可通过全局计数器来实现。</p>\n<h1 id=\"自己实现\"><a href=\"#自己实现\" class=\"headerlink\" title=\"自己实现\"></a>自己实现</h1><p>发送、接收，产生、消费</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><p>主要解决应用耦合，异步消息，流量削锋，日志处理等问题</p>\n<h1 id=\"重发补偿\"><a href=\"#重发补偿\" class=\"headerlink\" title=\"重发补偿\"></a>重发补偿</h1><p>业务处理失败，重新发送消息</p>\n<h1 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h1><p>某个函数或者某个接口使用相同参数调用一次或者无限次，其造成的后果是一样的</p>\n<h1 id=\"堆积\"><a href=\"#堆积\" class=\"headerlink\" title=\"堆积\"></a>堆积</h1><ul>\n<li>持久化到数据库</li>\n<li>非持久化，缓存</li>\n</ul>\n<h1 id=\"保证有序性\"><a href=\"#保证有序性\" class=\"headerlink\" title=\"保证有序性\"></a>保证有序性</h1><p>在每个消息被创建的时候，都赋予一个全局唯一的、单调递增的、连续的序列号，可通过全局计数器来实现。</p>\n<h1 id=\"自己实现\"><a href=\"#自己实现\" class=\"headerlink\" title=\"自己实现\"></a>自己实现</h1><p>发送、接收，产生、消费</p>\n"},{"title":"面试常见问题","_content":"\n进入金融领域（电子商务、硬件领域也不错）的上市公司或D轮公司，往架构师方向发展\n优质金融公司：蚂蚁金服、陆金所、拍拍贷、众安在线、微汇金融、麦子金服、点融网、信而富\n优质电商公司：阿里巴巴、京东、美团\n<!-- more -->\n\n# 自我介绍\n## 中文版\n我叫王球，今年25岁，毕业于宿州学院软件工程专业。\n2015年12月份进入苏州科达科技，今年10月份离职来到上海。\n可以在一周之内入职。\n以下是我最近做的几个项目。\n\n## 英文版\nMy name is Wang Qiu. I am 25 years old and I graduated from Suzhou University in the field of software engineering.\nIn December 2015, I entered suzhou kedacom Internship. After three months of training, I began to work on the project until now.\nI can enter the office within one week.\n\n## 资产管理系统\n* 项目介绍\n客户是运营管理中心，主要完成了资产申请、转移、退还、报废等功能，数据库是MySQL，前台用的LigerUI，后台用的SSM，经多人陆续开发了四年，系统用户为全公司人员。\n我做了存货跌价模块，做了两个月。\n我负责开发，但在开发前，我在项目经理的带领下参与了需求评审，概要设计等工作，后期我负责配合测试人员和部署工作。\n* 项目亮点\n\t* 对接其他系统较多，如：K3、MES、销售、质量、主数据、PLM、BPM\n\t* 全体公司人员使用，苏州、上海、各办事处，管理方式复杂\n\t* 系统历经开发人员多，bug查起来比较艰难，曾修复过几个重大bug。\n\n## 供应商管理系统\n* 项目介绍\n客户是质量部，主要完成了指标配置，评分，考核等功能，数据库是Oracle，前台用的EasyUI，后台用的SSHM，七个人做了两个月。\n我负责指标配置和考核模块。做了两个月。\n我负责开发，但后期由我负责主导联调测试。\n* 项目亮点\n\t* 行转列&&动态列\n\t* 模板：指标、考核方案、归档考核方案\n\t* 动态语言Groovy\n\n## 标准管理系统\n* 项目介绍\n客户是标准化办公室，主要完成了标准的发布、搜索、预览等功能，数据库是MySQL，前台用的是LayUI，后台用的是SSHM，五个人做了三个月。\n我负责搜索模块，做了两个月。\n我负责开发，但在开发前，我参与了业务调研工作。\n* 项目亮点\n\t* 使用全文搜索引擎Solr\n\n## 其他项目（项目小或者时间远）\n财务计息、客户服务、主数据、任职资格、预算、费用报销、报价\n \n## DevOps\n开发与运维的完美合作\n用到的工具：Jenkins、SonarQube\n\n## 关键点\n* 在项目上线之前，我们会将正式环境的数据导入测试环境，查看运行效率，优化代码。项目上线后，我们会使用druid监控SQL运行情况，一旦发现问题，我们会第一时间解决。\n* 在项目里，我不仅要做开发的工作，而且需要自己测试，当开发好之后，需要自己部署到Linux上给测试人员进行测试。\n* 遇到问题我先查资料，如果实在没法解决，不会拖，会及时问相关的人（如果是业务方面的，我会及时和项目经理沟通，如果是技术问题，我会自己查资料，如果是测试方面的，我会及时和测试人员沟通），即使加班，也会在规定的时间内解决。\n* 在项目里，我会在保证进度的前提下和项目经理说我的想法，提出我的解决方案。在开发过程中，我会先思考一下，用一种比较好的方式，比如效率最高的方法实现。平时我会不断看一些新技术，会不断深入了解一些框架和技术的实现底层。\n\n# HR面试\n1. 自身缺点\n这么多年，我都是在OA领域发展，对金融行业知识、业务细节的了解和学习还不够，我自己也意识到了这一点，我已经买了很多书比如（曼昆的经济学原理、陈志武的金融的逻辑、宋鸿兵的货币战争），其实也就是想弥补自己这个不足，对我开展工作绝对也是有好处的。\n\n2. 问面试官的问题\n    * 公租房\n    * 晋升制度、培训制度、休假制度、考勤制度、加班/值班制度、其他福利（不必要）\n\n3. 期望薪资\n被问到薪资时先问薪资结构（福利、月度、年度、涨薪）。\n按公司框架来说，我期望的月薪是税前13K*12薪。\n依据是：\n    * 我前一份工作的薪酬水平；\n    * 我预期的涨幅；\n    * 我将入职岗位的价值；\n    * 我与这个岗位的匹配度，以及我在这个岗位上能贡献的额外价值以及获得的额外成长。\n    \n    \n# 任职要求\n\n## 初级Java程序员（扎实的基本功、工作思路开阔）\n1. 精通Java，熟练掌握多线程开发，熟悉Windows/Linux开发环境，两年及以上java开发经验；\n2. 熟练使用shell，熟练使用缓存技术（Redis、MemCache等），并对实现原理有一定了解；\n3. 熟练使用关系数据库，比如Oracle或Mysql；\n4. 深入了解tcp/http等网络传输协议；\n5. 有良好的团队合作意识，耐心，诚恳，有强烈的责任心和积极主动的工作态度，有优秀的学习能力；\n6. 有商用互联网产品或金融行业系统开发经验者优先；\n\n## 高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\n\n### 岗位要求\n1. 精通Java语言，对io、多线程、集合等框架有深入理解；有JVM优化，docker化经验更佳；\n2. 3年以上使用Java进行web开发的经验，熟悉主流技术架构体系，对相关技术领域的开源产品有深入的理解\n3. 有大型分布式、高并发、高可用系统设计、开发和调优经验，例如akka集群、kafka、rocketMQ等消息中间件使用经验优先；\n4. 具备较强的业务分析能力，有电商领域建模，架构经验；\n5. 对技术和互联网有热情，不断追求技术更新；\n\n### 加分项\n* 在Github或其他平台上有过开源项目\n* 在stackoverflow或其他知名社区上有较高声望值\n* 有个人技术博客，公开发布过技术文章、论文等\n* 喜爱运动\n\n## 资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\n\n1. 精通Java，对Java高级特性有深入的掌握，熟悉Java生态体系。\n2. 五年以上的Java系统开发经验，三年以上架构经验，精通面向对象设计，对项目中涉及的开源框架、技术产品、算法等有系统性的深入学习，了解其底层机制和原理。\n3. 有实际中大型系统架构经验，能有效利用技术手段解决实际业务需求。\n4. 对技术富有热情，能关注互联网行业技术发展趋势，勇于尝试，敢于推动。\n5. 良好的沟通能力，勇于承担，能和团队形成合力。\n具备以下能力或经验者优先：\n    分布式环境下高可用程序设计和实现（如银行、证券等高可用系统）\n    信息距离理论基础、智能问答系统、爬虫系统设计和实现。\n    统一数据接口层或类似平台的架构经验（如开发接口平台、GraphQL等）。","source":"_posts/20181115.md","raw":"---\ntitle: 面试常见问题\ntags: 面试\ncategories: Other\n---\n\n进入金融领域（电子商务、硬件领域也不错）的上市公司或D轮公司，往架构师方向发展\n优质金融公司：蚂蚁金服、陆金所、拍拍贷、众安在线、微汇金融、麦子金服、点融网、信而富\n优质电商公司：阿里巴巴、京东、美团\n<!-- more -->\n\n# 自我介绍\n## 中文版\n我叫王球，今年25岁，毕业于宿州学院软件工程专业。\n2015年12月份进入苏州科达科技，今年10月份离职来到上海。\n可以在一周之内入职。\n以下是我最近做的几个项目。\n\n## 英文版\nMy name is Wang Qiu. I am 25 years old and I graduated from Suzhou University in the field of software engineering.\nIn December 2015, I entered suzhou kedacom Internship. After three months of training, I began to work on the project until now.\nI can enter the office within one week.\n\n## 资产管理系统\n* 项目介绍\n客户是运营管理中心，主要完成了资产申请、转移、退还、报废等功能，数据库是MySQL，前台用的LigerUI，后台用的SSM，经多人陆续开发了四年，系统用户为全公司人员。\n我做了存货跌价模块，做了两个月。\n我负责开发，但在开发前，我在项目经理的带领下参与了需求评审，概要设计等工作，后期我负责配合测试人员和部署工作。\n* 项目亮点\n\t* 对接其他系统较多，如：K3、MES、销售、质量、主数据、PLM、BPM\n\t* 全体公司人员使用，苏州、上海、各办事处，管理方式复杂\n\t* 系统历经开发人员多，bug查起来比较艰难，曾修复过几个重大bug。\n\n## 供应商管理系统\n* 项目介绍\n客户是质量部，主要完成了指标配置，评分，考核等功能，数据库是Oracle，前台用的EasyUI，后台用的SSHM，七个人做了两个月。\n我负责指标配置和考核模块。做了两个月。\n我负责开发，但后期由我负责主导联调测试。\n* 项目亮点\n\t* 行转列&&动态列\n\t* 模板：指标、考核方案、归档考核方案\n\t* 动态语言Groovy\n\n## 标准管理系统\n* 项目介绍\n客户是标准化办公室，主要完成了标准的发布、搜索、预览等功能，数据库是MySQL，前台用的是LayUI，后台用的是SSHM，五个人做了三个月。\n我负责搜索模块，做了两个月。\n我负责开发，但在开发前，我参与了业务调研工作。\n* 项目亮点\n\t* 使用全文搜索引擎Solr\n\n## 其他项目（项目小或者时间远）\n财务计息、客户服务、主数据、任职资格、预算、费用报销、报价\n \n## DevOps\n开发与运维的完美合作\n用到的工具：Jenkins、SonarQube\n\n## 关键点\n* 在项目上线之前，我们会将正式环境的数据导入测试环境，查看运行效率，优化代码。项目上线后，我们会使用druid监控SQL运行情况，一旦发现问题，我们会第一时间解决。\n* 在项目里，我不仅要做开发的工作，而且需要自己测试，当开发好之后，需要自己部署到Linux上给测试人员进行测试。\n* 遇到问题我先查资料，如果实在没法解决，不会拖，会及时问相关的人（如果是业务方面的，我会及时和项目经理沟通，如果是技术问题，我会自己查资料，如果是测试方面的，我会及时和测试人员沟通），即使加班，也会在规定的时间内解决。\n* 在项目里，我会在保证进度的前提下和项目经理说我的想法，提出我的解决方案。在开发过程中，我会先思考一下，用一种比较好的方式，比如效率最高的方法实现。平时我会不断看一些新技术，会不断深入了解一些框架和技术的实现底层。\n\n# HR面试\n1. 自身缺点\n这么多年，我都是在OA领域发展，对金融行业知识、业务细节的了解和学习还不够，我自己也意识到了这一点，我已经买了很多书比如（曼昆的经济学原理、陈志武的金融的逻辑、宋鸿兵的货币战争），其实也就是想弥补自己这个不足，对我开展工作绝对也是有好处的。\n\n2. 问面试官的问题\n    * 公租房\n    * 晋升制度、培训制度、休假制度、考勤制度、加班/值班制度、其他福利（不必要）\n\n3. 期望薪资\n被问到薪资时先问薪资结构（福利、月度、年度、涨薪）。\n按公司框架来说，我期望的月薪是税前13K*12薪。\n依据是：\n    * 我前一份工作的薪酬水平；\n    * 我预期的涨幅；\n    * 我将入职岗位的价值；\n    * 我与这个岗位的匹配度，以及我在这个岗位上能贡献的额外价值以及获得的额外成长。\n    \n    \n# 任职要求\n\n## 初级Java程序员（扎实的基本功、工作思路开阔）\n1. 精通Java，熟练掌握多线程开发，熟悉Windows/Linux开发环境，两年及以上java开发经验；\n2. 熟练使用shell，熟练使用缓存技术（Redis、MemCache等），并对实现原理有一定了解；\n3. 熟练使用关系数据库，比如Oracle或Mysql；\n4. 深入了解tcp/http等网络传输协议；\n5. 有良好的团队合作意识，耐心，诚恳，有强烈的责任心和积极主动的工作态度，有优秀的学习能力；\n6. 有商用互联网产品或金融行业系统开发经验者优先；\n\n## 高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\n\n### 岗位要求\n1. 精通Java语言，对io、多线程、集合等框架有深入理解；有JVM优化，docker化经验更佳；\n2. 3年以上使用Java进行web开发的经验，熟悉主流技术架构体系，对相关技术领域的开源产品有深入的理解\n3. 有大型分布式、高并发、高可用系统设计、开发和调优经验，例如akka集群、kafka、rocketMQ等消息中间件使用经验优先；\n4. 具备较强的业务分析能力，有电商领域建模，架构经验；\n5. 对技术和互联网有热情，不断追求技术更新；\n\n### 加分项\n* 在Github或其他平台上有过开源项目\n* 在stackoverflow或其他知名社区上有较高声望值\n* 有个人技术博客，公开发布过技术文章、论文等\n* 喜爱运动\n\n## 资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\n\n1. 精通Java，对Java高级特性有深入的掌握，熟悉Java生态体系。\n2. 五年以上的Java系统开发经验，三年以上架构经验，精通面向对象设计，对项目中涉及的开源框架、技术产品、算法等有系统性的深入学习，了解其底层机制和原理。\n3. 有实际中大型系统架构经验，能有效利用技术手段解决实际业务需求。\n4. 对技术富有热情，能关注互联网行业技术发展趋势，勇于尝试，敢于推动。\n5. 良好的沟通能力，勇于承担，能和团队形成合力。\n具备以下能力或经验者优先：\n    分布式环境下高可用程序设计和实现（如银行、证券等高可用系统）\n    信息距离理论基础、智能问答系统、爬虫系统设计和实现。\n    统一数据接口层或类似平台的架构经验（如开发接口平台、GraphQL等）。","slug":"20181115","published":1,"date":"2019-01-15T00:44:55.042Z","updated":"2019-01-15T00:44:55.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1sml00019qwvgeqmi1oyf","content":"<p>进入金融领域（电子商务、硬件领域也不错）的上市公司或D轮公司，往架构师方向发展<br>优质金融公司：蚂蚁金服、陆金所、拍拍贷、众安在线、微汇金融、麦子金服、点融网、信而富<br>优质电商公司：阿里巴巴、京东、美团<br><a id=\"more\"></a></p>\n<h1 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h1><h2 id=\"中文版\"><a href=\"#中文版\" class=\"headerlink\" title=\"中文版\"></a>中文版</h2><p>我叫王球，今年25岁，毕业于宿州学院软件工程专业。<br>2015年12月份进入苏州科达科技，今年10月份离职来到上海。<br>可以在一周之内入职。<br>以下是我最近做的几个项目。</p>\n<h2 id=\"英文版\"><a href=\"#英文版\" class=\"headerlink\" title=\"英文版\"></a>英文版</h2><p>My name is Wang Qiu. I am 25 years old and I graduated from Suzhou University in the field of software engineering.<br>In December 2015, I entered suzhou kedacom Internship. After three months of training, I began to work on the project until now.<br>I can enter the office within one week.</p>\n<h2 id=\"资产管理系统\"><a href=\"#资产管理系统\" class=\"headerlink\" title=\"资产管理系统\"></a>资产管理系统</h2><ul>\n<li>项目介绍<br>客户是运营管理中心，主要完成了资产申请、转移、退还、报废等功能，数据库是MySQL，前台用的LigerUI，后台用的SSM，经多人陆续开发了四年，系统用户为全公司人员。<br>我做了存货跌价模块，做了两个月。<br>我负责开发，但在开发前，我在项目经理的带领下参与了需求评审，概要设计等工作，后期我负责配合测试人员和部署工作。</li>\n<li>项目亮点<ul>\n<li>对接其他系统较多，如：K3、MES、销售、质量、主数据、PLM、BPM</li>\n<li>全体公司人员使用，苏州、上海、各办事处，管理方式复杂</li>\n<li>系统历经开发人员多，bug查起来比较艰难，曾修复过几个重大bug。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"供应商管理系统\"><a href=\"#供应商管理系统\" class=\"headerlink\" title=\"供应商管理系统\"></a>供应商管理系统</h2><ul>\n<li>项目介绍<br>客户是质量部，主要完成了指标配置，评分，考核等功能，数据库是Oracle，前台用的EasyUI，后台用的SSHM，七个人做了两个月。<br>我负责指标配置和考核模块。做了两个月。<br>我负责开发，但后期由我负责主导联调测试。</li>\n<li>项目亮点<ul>\n<li>行转列&amp;&amp;动态列</li>\n<li>模板：指标、考核方案、归档考核方案</li>\n<li>动态语言Groovy</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"标准管理系统\"><a href=\"#标准管理系统\" class=\"headerlink\" title=\"标准管理系统\"></a>标准管理系统</h2><ul>\n<li>项目介绍<br>客户是标准化办公室，主要完成了标准的发布、搜索、预览等功能，数据库是MySQL，前台用的是LayUI，后台用的是SSHM，五个人做了三个月。<br>我负责搜索模块，做了两个月。<br>我负责开发，但在开发前，我参与了业务调研工作。</li>\n<li>项目亮点<ul>\n<li>使用全文搜索引擎Solr</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他项目（项目小或者时间远）\"><a href=\"#其他项目（项目小或者时间远）\" class=\"headerlink\" title=\"其他项目（项目小或者时间远）\"></a>其他项目（项目小或者时间远）</h2><p>财务计息、客户服务、主数据、任职资格、预算、费用报销、报价</p>\n<h2 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h2><p>开发与运维的完美合作<br>用到的工具：Jenkins、SonarQube</p>\n<h2 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h2><ul>\n<li>在项目上线之前，我们会将正式环境的数据导入测试环境，查看运行效率，优化代码。项目上线后，我们会使用druid监控SQL运行情况，一旦发现问题，我们会第一时间解决。</li>\n<li>在项目里，我不仅要做开发的工作，而且需要自己测试，当开发好之后，需要自己部署到Linux上给测试人员进行测试。</li>\n<li>遇到问题我先查资料，如果实在没法解决，不会拖，会及时问相关的人（如果是业务方面的，我会及时和项目经理沟通，如果是技术问题，我会自己查资料，如果是测试方面的，我会及时和测试人员沟通），即使加班，也会在规定的时间内解决。</li>\n<li>在项目里，我会在保证进度的前提下和项目经理说我的想法，提出我的解决方案。在开发过程中，我会先思考一下，用一种比较好的方式，比如效率最高的方法实现。平时我会不断看一些新技术，会不断深入了解一些框架和技术的实现底层。</li>\n</ul>\n<h1 id=\"HR面试\"><a href=\"#HR面试\" class=\"headerlink\" title=\"HR面试\"></a>HR面试</h1><ol>\n<li><p>自身缺点<br>这么多年，我都是在OA领域发展，对金融行业知识、业务细节的了解和学习还不够，我自己也意识到了这一点，我已经买了很多书比如（曼昆的经济学原理、陈志武的金融的逻辑、宋鸿兵的货币战争），其实也就是想弥补自己这个不足，对我开展工作绝对也是有好处的。</p>\n</li>\n<li><p>问面试官的问题</p>\n<ul>\n<li>公租房</li>\n<li>晋升制度、培训制度、休假制度、考勤制度、加班/值班制度、其他福利（不必要）</li>\n</ul>\n</li>\n<li><p>期望薪资<br>被问到薪资时先问薪资结构（福利、月度、年度、涨薪）。<br>按公司框架来说，我期望的月薪是税前13K*12薪。<br>依据是：</p>\n<ul>\n<li>我前一份工作的薪酬水平；</li>\n<li>我预期的涨幅；</li>\n<li>我将入职岗位的价值；</li>\n<li>我与这个岗位的匹配度，以及我在这个岗位上能贡献的额外价值以及获得的额外成长。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"任职要求\"><a href=\"#任职要求\" class=\"headerlink\" title=\"任职要求\"></a>任职要求</h1><h2 id=\"初级Java程序员（扎实的基本功、工作思路开阔）\"><a href=\"#初级Java程序员（扎实的基本功、工作思路开阔）\" class=\"headerlink\" title=\"初级Java程序员（扎实的基本功、工作思路开阔）\"></a>初级Java程序员（扎实的基本功、工作思路开阔）</h2><ol>\n<li>精通Java，熟练掌握多线程开发，熟悉Windows/Linux开发环境，两年及以上java开发经验；</li>\n<li>熟练使用shell，熟练使用缓存技术（Redis、MemCache等），并对实现原理有一定了解；</li>\n<li>熟练使用关系数据库，比如Oracle或Mysql；</li>\n<li>深入了解tcp/http等网络传输协议；</li>\n<li>有良好的团队合作意识，耐心，诚恳，有强烈的责任心和积极主动的工作态度，有优秀的学习能力；</li>\n<li>有商用互联网产品或金融行业系统开发经验者优先；</li>\n</ol>\n<h2 id=\"高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\"><a href=\"#高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\" class=\"headerlink\" title=\"高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\"></a>高级Java程序员（纵向的技术沉淀，横向知识面的拓展）</h2><h3 id=\"岗位要求\"><a href=\"#岗位要求\" class=\"headerlink\" title=\"岗位要求\"></a>岗位要求</h3><ol>\n<li>精通Java语言，对io、多线程、集合等框架有深入理解；有JVM优化，docker化经验更佳；</li>\n<li>3年以上使用Java进行web开发的经验，熟悉主流技术架构体系，对相关技术领域的开源产品有深入的理解</li>\n<li>有大型分布式、高并发、高可用系统设计、开发和调优经验，例如akka集群、kafka、rocketMQ等消息中间件使用经验优先；</li>\n<li>具备较强的业务分析能力，有电商领域建模，架构经验；</li>\n<li>对技术和互联网有热情，不断追求技术更新；</li>\n</ol>\n<h3 id=\"加分项\"><a href=\"#加分项\" class=\"headerlink\" title=\"加分项\"></a>加分项</h3><ul>\n<li>在Github或其他平台上有过开源项目</li>\n<li>在stackoverflow或其他知名社区上有较高声望值</li>\n<li>有个人技术博客，公开发布过技术文章、论文等</li>\n<li>喜爱运动</li>\n</ul>\n<h2 id=\"资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\"><a href=\"#资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\" class=\"headerlink\" title=\"资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\"></a>资深java程序员（业务角度进行技术规划、技术团队的管理与激励）</h2><ol>\n<li>精通Java，对Java高级特性有深入的掌握，熟悉Java生态体系。</li>\n<li>五年以上的Java系统开发经验，三年以上架构经验，精通面向对象设计，对项目中涉及的开源框架、技术产品、算法等有系统性的深入学习，了解其底层机制和原理。</li>\n<li>有实际中大型系统架构经验，能有效利用技术手段解决实际业务需求。</li>\n<li>对技术富有热情，能关注互联网行业技术发展趋势，勇于尝试，敢于推动。</li>\n<li>良好的沟通能力，勇于承担，能和团队形成合力。<br>具备以下能力或经验者优先：<br> 分布式环境下高可用程序设计和实现（如银行、证券等高可用系统）<br> 信息距离理论基础、智能问答系统、爬虫系统设计和实现。<br> 统一数据接口层或类似平台的架构经验（如开发接口平台、GraphQL等）。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>进入金融领域（电子商务、硬件领域也不错）的上市公司或D轮公司，往架构师方向发展<br>优质金融公司：蚂蚁金服、陆金所、拍拍贷、众安在线、微汇金融、麦子金服、点融网、信而富<br>优质电商公司：阿里巴巴、京东、美团<br>","more":"</p>\n<h1 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h1><h2 id=\"中文版\"><a href=\"#中文版\" class=\"headerlink\" title=\"中文版\"></a>中文版</h2><p>我叫王球，今年25岁，毕业于宿州学院软件工程专业。<br>2015年12月份进入苏州科达科技，今年10月份离职来到上海。<br>可以在一周之内入职。<br>以下是我最近做的几个项目。</p>\n<h2 id=\"英文版\"><a href=\"#英文版\" class=\"headerlink\" title=\"英文版\"></a>英文版</h2><p>My name is Wang Qiu. I am 25 years old and I graduated from Suzhou University in the field of software engineering.<br>In December 2015, I entered suzhou kedacom Internship. After three months of training, I began to work on the project until now.<br>I can enter the office within one week.</p>\n<h2 id=\"资产管理系统\"><a href=\"#资产管理系统\" class=\"headerlink\" title=\"资产管理系统\"></a>资产管理系统</h2><ul>\n<li>项目介绍<br>客户是运营管理中心，主要完成了资产申请、转移、退还、报废等功能，数据库是MySQL，前台用的LigerUI，后台用的SSM，经多人陆续开发了四年，系统用户为全公司人员。<br>我做了存货跌价模块，做了两个月。<br>我负责开发，但在开发前，我在项目经理的带领下参与了需求评审，概要设计等工作，后期我负责配合测试人员和部署工作。</li>\n<li>项目亮点<ul>\n<li>对接其他系统较多，如：K3、MES、销售、质量、主数据、PLM、BPM</li>\n<li>全体公司人员使用，苏州、上海、各办事处，管理方式复杂</li>\n<li>系统历经开发人员多，bug查起来比较艰难，曾修复过几个重大bug。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"供应商管理系统\"><a href=\"#供应商管理系统\" class=\"headerlink\" title=\"供应商管理系统\"></a>供应商管理系统</h2><ul>\n<li>项目介绍<br>客户是质量部，主要完成了指标配置，评分，考核等功能，数据库是Oracle，前台用的EasyUI，后台用的SSHM，七个人做了两个月。<br>我负责指标配置和考核模块。做了两个月。<br>我负责开发，但后期由我负责主导联调测试。</li>\n<li>项目亮点<ul>\n<li>行转列&amp;&amp;动态列</li>\n<li>模板：指标、考核方案、归档考核方案</li>\n<li>动态语言Groovy</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"标准管理系统\"><a href=\"#标准管理系统\" class=\"headerlink\" title=\"标准管理系统\"></a>标准管理系统</h2><ul>\n<li>项目介绍<br>客户是标准化办公室，主要完成了标准的发布、搜索、预览等功能，数据库是MySQL，前台用的是LayUI，后台用的是SSHM，五个人做了三个月。<br>我负责搜索模块，做了两个月。<br>我负责开发，但在开发前，我参与了业务调研工作。</li>\n<li>项目亮点<ul>\n<li>使用全文搜索引擎Solr</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他项目（项目小或者时间远）\"><a href=\"#其他项目（项目小或者时间远）\" class=\"headerlink\" title=\"其他项目（项目小或者时间远）\"></a>其他项目（项目小或者时间远）</h2><p>财务计息、客户服务、主数据、任职资格、预算、费用报销、报价</p>\n<h2 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h2><p>开发与运维的完美合作<br>用到的工具：Jenkins、SonarQube</p>\n<h2 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h2><ul>\n<li>在项目上线之前，我们会将正式环境的数据导入测试环境，查看运行效率，优化代码。项目上线后，我们会使用druid监控SQL运行情况，一旦发现问题，我们会第一时间解决。</li>\n<li>在项目里，我不仅要做开发的工作，而且需要自己测试，当开发好之后，需要自己部署到Linux上给测试人员进行测试。</li>\n<li>遇到问题我先查资料，如果实在没法解决，不会拖，会及时问相关的人（如果是业务方面的，我会及时和项目经理沟通，如果是技术问题，我会自己查资料，如果是测试方面的，我会及时和测试人员沟通），即使加班，也会在规定的时间内解决。</li>\n<li>在项目里，我会在保证进度的前提下和项目经理说我的想法，提出我的解决方案。在开发过程中，我会先思考一下，用一种比较好的方式，比如效率最高的方法实现。平时我会不断看一些新技术，会不断深入了解一些框架和技术的实现底层。</li>\n</ul>\n<h1 id=\"HR面试\"><a href=\"#HR面试\" class=\"headerlink\" title=\"HR面试\"></a>HR面试</h1><ol>\n<li><p>自身缺点<br>这么多年，我都是在OA领域发展，对金融行业知识、业务细节的了解和学习还不够，我自己也意识到了这一点，我已经买了很多书比如（曼昆的经济学原理、陈志武的金融的逻辑、宋鸿兵的货币战争），其实也就是想弥补自己这个不足，对我开展工作绝对也是有好处的。</p>\n</li>\n<li><p>问面试官的问题</p>\n<ul>\n<li>公租房</li>\n<li>晋升制度、培训制度、休假制度、考勤制度、加班/值班制度、其他福利（不必要）</li>\n</ul>\n</li>\n<li><p>期望薪资<br>被问到薪资时先问薪资结构（福利、月度、年度、涨薪）。<br>按公司框架来说，我期望的月薪是税前13K*12薪。<br>依据是：</p>\n<ul>\n<li>我前一份工作的薪酬水平；</li>\n<li>我预期的涨幅；</li>\n<li>我将入职岗位的价值；</li>\n<li>我与这个岗位的匹配度，以及我在这个岗位上能贡献的额外价值以及获得的额外成长。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"任职要求\"><a href=\"#任职要求\" class=\"headerlink\" title=\"任职要求\"></a>任职要求</h1><h2 id=\"初级Java程序员（扎实的基本功、工作思路开阔）\"><a href=\"#初级Java程序员（扎实的基本功、工作思路开阔）\" class=\"headerlink\" title=\"初级Java程序员（扎实的基本功、工作思路开阔）\"></a>初级Java程序员（扎实的基本功、工作思路开阔）</h2><ol>\n<li>精通Java，熟练掌握多线程开发，熟悉Windows/Linux开发环境，两年及以上java开发经验；</li>\n<li>熟练使用shell，熟练使用缓存技术（Redis、MemCache等），并对实现原理有一定了解；</li>\n<li>熟练使用关系数据库，比如Oracle或Mysql；</li>\n<li>深入了解tcp/http等网络传输协议；</li>\n<li>有良好的团队合作意识，耐心，诚恳，有强烈的责任心和积极主动的工作态度，有优秀的学习能力；</li>\n<li>有商用互联网产品或金融行业系统开发经验者优先；</li>\n</ol>\n<h2 id=\"高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\"><a href=\"#高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\" class=\"headerlink\" title=\"高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\"></a>高级Java程序员（纵向的技术沉淀，横向知识面的拓展）</h2><h3 id=\"岗位要求\"><a href=\"#岗位要求\" class=\"headerlink\" title=\"岗位要求\"></a>岗位要求</h3><ol>\n<li>精通Java语言，对io、多线程、集合等框架有深入理解；有JVM优化，docker化经验更佳；</li>\n<li>3年以上使用Java进行web开发的经验，熟悉主流技术架构体系，对相关技术领域的开源产品有深入的理解</li>\n<li>有大型分布式、高并发、高可用系统设计、开发和调优经验，例如akka集群、kafka、rocketMQ等消息中间件使用经验优先；</li>\n<li>具备较强的业务分析能力，有电商领域建模，架构经验；</li>\n<li>对技术和互联网有热情，不断追求技术更新；</li>\n</ol>\n<h3 id=\"加分项\"><a href=\"#加分项\" class=\"headerlink\" title=\"加分项\"></a>加分项</h3><ul>\n<li>在Github或其他平台上有过开源项目</li>\n<li>在stackoverflow或其他知名社区上有较高声望值</li>\n<li>有个人技术博客，公开发布过技术文章、论文等</li>\n<li>喜爱运动</li>\n</ul>\n<h2 id=\"资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\"><a href=\"#资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\" class=\"headerlink\" title=\"资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\"></a>资深java程序员（业务角度进行技术规划、技术团队的管理与激励）</h2><ol>\n<li>精通Java，对Java高级特性有深入的掌握，熟悉Java生态体系。</li>\n<li>五年以上的Java系统开发经验，三年以上架构经验，精通面向对象设计，对项目中涉及的开源框架、技术产品、算法等有系统性的深入学习，了解其底层机制和原理。</li>\n<li>有实际中大型系统架构经验，能有效利用技术手段解决实际业务需求。</li>\n<li>对技术富有热情，能关注互联网行业技术发展趋势，勇于尝试，敢于推动。</li>\n<li>良好的沟通能力，勇于承担，能和团队形成合力。<br>具备以下能力或经验者优先：<br> 分布式环境下高可用程序设计和实现（如银行、证券等高可用系统）<br> 信息距离理论基础、智能问答系统、爬虫系统设计和实现。<br> 统一数据接口层或类似平台的架构经验（如开发接口平台、GraphQL等）。</li>\n</ol>"},{"title":"全文搜索引擎","_content":"\n# Solr与ElasticSearch区别\nSolr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。\n* 二者安装都很简单；\n* Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;\n* Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；\n* Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；\n* Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。","source":"_posts/20181114.md","raw":"---\ntitle: 全文搜索引擎\ntags: 全文搜索引擎\ncategories: Java\n---\n\n# Solr与ElasticSearch区别\nSolr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。\n* 二者安装都很简单；\n* Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;\n* Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；\n* Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；\n* Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。","slug":"20181114","published":1,"date":"2019-01-15T00:44:55.041Z","updated":"2019-01-15T00:44:55.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1sml1001bqwvgc65wtd3c","content":"<h1 id=\"Solr与ElasticSearch区别\"><a href=\"#Solr与ElasticSearch区别\" class=\"headerlink\" title=\"Solr与ElasticSearch区别\"></a>Solr与ElasticSearch区别</h1><p>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</p>\n<ul>\n<li>二者安装都很简单；</li>\n<li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;</li>\n<li>Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；</li>\n<li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；</li>\n<li>Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Solr与ElasticSearch区别\"><a href=\"#Solr与ElasticSearch区别\" class=\"headerlink\" title=\"Solr与ElasticSearch区别\"></a>Solr与ElasticSearch区别</h1><p>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</p>\n<ul>\n<li>二者安装都很简单；</li>\n<li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;</li>\n<li>Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；</li>\n<li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；</li>\n<li>Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。</li>\n</ul>\n"},{"title":"如何写好业务代码","_content":"\n根据需求文档编写概要设计、详细设计文档，根据设计文档进行开发，单元测试过后交给测试人员进行测试。\n如果直接进行开发，需要理解表结构和业务，才能减少bug。这一个月来bug不少，主要有以下几个方面的原因：\n1. 长时间未接触代码，原有框架不太熟练，新框架不太会用。\n例如：mybatis判断是否为null或者空\n2. 认为业务代码很简单，没有仔细研究业务和表结构。\n例如：表与表之间的关系，未全面理解业务，只关系自己负责的部分\n3. 上班容易走神，未全身心投入。\n例如：一会看手机，一会看时间，认为现在的工作浪费时间，学不到东西。\n今后要根据这个方面进行调整。","source":"_posts/20190107.md","raw":"---\ntitle: 如何写好业务代码\ntags: 总结\ncategories: Other\n---\n\n根据需求文档编写概要设计、详细设计文档，根据设计文档进行开发，单元测试过后交给测试人员进行测试。\n如果直接进行开发，需要理解表结构和业务，才能减少bug。这一个月来bug不少，主要有以下几个方面的原因：\n1. 长时间未接触代码，原有框架不太熟练，新框架不太会用。\n例如：mybatis判断是否为null或者空\n2. 认为业务代码很简单，没有仔细研究业务和表结构。\n例如：表与表之间的关系，未全面理解业务，只关系自己负责的部分\n3. 上班容易走神，未全身心投入。\n例如：一会看手机，一会看时间，认为现在的工作浪费时间，学不到东西。\n今后要根据这个方面进行调整。","slug":"20190107","published":1,"date":"2019-01-15T00:44:55.042Z","updated":"2019-01-15T00:44:55.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1sml3001fqwvgc9rrqbqd","content":"<p>根据需求文档编写概要设计、详细设计文档，根据设计文档进行开发，单元测试过后交给测试人员进行测试。<br>如果直接进行开发，需要理解表结构和业务，才能减少bug。这一个月来bug不少，主要有以下几个方面的原因：</p>\n<ol>\n<li>长时间未接触代码，原有框架不太熟练，新框架不太会用。<br>例如：mybatis判断是否为null或者空</li>\n<li>认为业务代码很简单，没有仔细研究业务和表结构。<br>例如：表与表之间的关系，未全面理解业务，只关系自己负责的部分</li>\n<li>上班容易走神，未全身心投入。<br>例如：一会看手机，一会看时间，认为现在的工作浪费时间，学不到东西。<br>今后要根据这个方面进行调整。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>根据需求文档编写概要设计、详细设计文档，根据设计文档进行开发，单元测试过后交给测试人员进行测试。<br>如果直接进行开发，需要理解表结构和业务，才能减少bug。这一个月来bug不少，主要有以下几个方面的原因：</p>\n<ol>\n<li>长时间未接触代码，原有框架不太熟练，新框架不太会用。<br>例如：mybatis判断是否为null或者空</li>\n<li>认为业务代码很简单，没有仔细研究业务和表结构。<br>例如：表与表之间的关系，未全面理解业务，只关系自己负责的部分</li>\n<li>上班容易走神，未全身心投入。<br>例如：一会看手机，一会看时间，认为现在的工作浪费时间，学不到东西。<br>今后要根据这个方面进行调整。</li>\n</ol>\n"},{"title":"如何写好业务代码","_content":"\n业务代码不同于底层代码，与客户的需求有着相当密切的关系，一旦需求有小改动，可能业务代码就有很大改动\n所以写业务代码之前要认真分析需求，将做什么分析透彻，不合理的地方要提出来，遗漏的地方要补充。\n如果将做什么理解清楚了，那接下来就是思考怎么做。编写概要设计和详细设计，将怎么做全部用xmind用文字\n表达出来，写代码的时候直接根据设计写就好了，写代码是实现里最简单的部分，难点在于分析清楚怎么做，\n怎么高效的完成。\n1. 概要设计\n静态建模：\n用例图：当与系统交互的User超过一类并且相关的User Case超过5个\n类图：当模型类超过5个\n动态建模：\n状态图：当某个对象的状态超过3个\n时序图：当功能调用链路上涉及对象超过3个\n协作图：\n活动图：\n\n2. 详细设计\n\n\n3. 码代码\n    1. 如何减少重复工作\n        * 代码生成器\n    \n    2. 写代码的时候如何不纠结\n        * 方法命名（Controller、Service、Mapper）问题\n        * 代码位置问题\n    \n    3. 如何减少代码bug\n        * 防止NPE\n    \n\n4. 自测\n\n# 新blog环境搭建\n1. 切换终端cmd.exe\n\n2. 下载node.js并安装，重启IDEA\n\n3. npm install -g hexo-cli 下载hexo\n\n4. 测试发布和上传,完毕\n\n","source":"_posts/20190112.md","raw":"---\ntitle: 如何写好业务代码\ntags: 总结\ncategories: 其他\n---\n\n业务代码不同于底层代码，与客户的需求有着相当密切的关系，一旦需求有小改动，可能业务代码就有很大改动\n所以写业务代码之前要认真分析需求，将做什么分析透彻，不合理的地方要提出来，遗漏的地方要补充。\n如果将做什么理解清楚了，那接下来就是思考怎么做。编写概要设计和详细设计，将怎么做全部用xmind用文字\n表达出来，写代码的时候直接根据设计写就好了，写代码是实现里最简单的部分，难点在于分析清楚怎么做，\n怎么高效的完成。\n1. 概要设计\n静态建模：\n用例图：当与系统交互的User超过一类并且相关的User Case超过5个\n类图：当模型类超过5个\n动态建模：\n状态图：当某个对象的状态超过3个\n时序图：当功能调用链路上涉及对象超过3个\n协作图：\n活动图：\n\n2. 详细设计\n\n\n3. 码代码\n    1. 如何减少重复工作\n        * 代码生成器\n    \n    2. 写代码的时候如何不纠结\n        * 方法命名（Controller、Service、Mapper）问题\n        * 代码位置问题\n    \n    3. 如何减少代码bug\n        * 防止NPE\n    \n\n4. 自测\n\n# 新blog环境搭建\n1. 切换终端cmd.exe\n\n2. 下载node.js并安装，重启IDEA\n\n3. npm install -g hexo-cli 下载hexo\n\n4. 测试发布和上传,完毕\n\n","slug":"20190112","published":1,"date":"2019-01-12T05:30:34.570Z","updated":"2019-01-15T01:01:14.528Z","_id":"cjqx1sml4001iqwvgumt7txcc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>业务代码不同于底层代码，与客户的需求有着相当密切的关系，一旦需求有小改动，可能业务代码就有很大改动<br>所以写业务代码之前要认真分析需求，将做什么分析透彻，不合理的地方要提出来，遗漏的地方要补充。<br>如果将做什么理解清楚了，那接下来就是思考怎么做。编写概要设计和详细设计，将怎么做全部用xmind用文字<br>表达出来，写代码的时候直接根据设计写就好了，写代码是实现里最简单的部分，难点在于分析清楚怎么做，<br>怎么高效的完成。</p>\n<ol>\n<li><p>概要设计<br>静态建模：<br>用例图：当与系统交互的User超过一类并且相关的User Case超过5个<br>类图：当模型类超过5个<br>动态建模：<br>状态图：当某个对象的状态超过3个<br>时序图：当功能调用链路上涉及对象超过3个<br>协作图：<br>活动图：</p>\n</li>\n<li><p>详细设计</p>\n</li>\n</ol>\n<ol>\n<li><p>码代码</p>\n<ol>\n<li><p>如何减少重复工作</p>\n<ul>\n<li>代码生成器</li>\n</ul>\n</li>\n<li><p>写代码的时候如何不纠结</p>\n<ul>\n<li>方法命名（Controller、Service、Mapper）问题</li>\n<li>代码位置问题</li>\n</ul>\n</li>\n<li><p>如何减少代码bug</p>\n<ul>\n<li>防止NPE</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>自测</li>\n</ol>\n<h1 id=\"新blog环境搭建\"><a href=\"#新blog环境搭建\" class=\"headerlink\" title=\"新blog环境搭建\"></a>新blog环境搭建</h1><ol>\n<li><p>切换终端cmd.exe</p>\n</li>\n<li><p>下载node.js并安装，重启IDEA</p>\n</li>\n<li><p>npm install -g hexo-cli 下载hexo</p>\n</li>\n<li><p>测试发布和上传,完毕</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>业务代码不同于底层代码，与客户的需求有着相当密切的关系，一旦需求有小改动，可能业务代码就有很大改动<br>所以写业务代码之前要认真分析需求，将做什么分析透彻，不合理的地方要提出来，遗漏的地方要补充。<br>如果将做什么理解清楚了，那接下来就是思考怎么做。编写概要设计和详细设计，将怎么做全部用xmind用文字<br>表达出来，写代码的时候直接根据设计写就好了，写代码是实现里最简单的部分，难点在于分析清楚怎么做，<br>怎么高效的完成。</p>\n<ol>\n<li><p>概要设计<br>静态建模：<br>用例图：当与系统交互的User超过一类并且相关的User Case超过5个<br>类图：当模型类超过5个<br>动态建模：<br>状态图：当某个对象的状态超过3个<br>时序图：当功能调用链路上涉及对象超过3个<br>协作图：<br>活动图：</p>\n</li>\n<li><p>详细设计</p>\n</li>\n</ol>\n<ol>\n<li><p>码代码</p>\n<ol>\n<li><p>如何减少重复工作</p>\n<ul>\n<li>代码生成器</li>\n</ul>\n</li>\n<li><p>写代码的时候如何不纠结</p>\n<ul>\n<li>方法命名（Controller、Service、Mapper）问题</li>\n<li>代码位置问题</li>\n</ul>\n</li>\n<li><p>如何减少代码bug</p>\n<ul>\n<li>防止NPE</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>自测</li>\n</ol>\n<h1 id=\"新blog环境搭建\"><a href=\"#新blog环境搭建\" class=\"headerlink\" title=\"新blog环境搭建\"></a>新blog环境搭建</h1><ol>\n<li><p>切换终端cmd.exe</p>\n</li>\n<li><p>下载node.js并安装，重启IDEA</p>\n</li>\n<li><p>npm install -g hexo-cli 下载hexo</p>\n</li>\n<li><p>测试发布和上传,完毕</p>\n</li>\n</ol>\n"},{"title":"多线程","_content":"\n\n<!-- more -->\n# 进程与线程\n## 进程和线程\n* 进程：CPU进行资源分配和调度的基本单位\n* 线程：轻量级进程，程序执行的最小单元\n\n## 并行和并发\n* 并行：应用能够同时执行不同的任务\n* 并发：应用能够交替执行不同的任务\n\n## 创建线程的方式及实现\n* 继承Thread，重写run（）方法\n* 实现Runnable接口\n\n## 线程间通信的方式\n等待/通知机制：取票排队办业务\n* 使用synchronized关键字实现同步\nobject.wait()//等待\nobject.notify()//通知\nobject.notifyAll()//通知所有\n* 使用ReentrantLock和Condition实现同步\nlock.lock();//获取锁\nlock.unlock();//释放锁\ncondition.await()//等待\ncondition.signal()//通知\ncondition.signalAll()//通知所有\n\n## CountDownLatch、CyclicBarrier\n两者都是非常实用的多线程控制工具类\n* CountDownLatch：“倒计时器”，它允许一个或多个线程一直等待，直到其他线程的操作\n执行完后再执行。使用场景：实现最大的并行性、开始执行前等待n个线程完成各自任务、\n死锁检测。\n* CyclicBarrier：“循环屏障”，可循环使用的屏障。\n* 两者的区别\n\t* CountDownLatch的计数器只能使用一次。而CyclicBarrier的计数器可以使用reset() \n\t方法重置。所以CyclicBarrier能处理更为复杂的业务场景，比如如果计算发生错误，\n\t可以重置计数器，并让线程们重新执行一次。\n\t* CyclicBarrier还提供其他有用的方法，比如getNumberWaiting方法可以获得CyclicBarrier\n\t阻塞的线程数量。isBroken方法用来知道阻塞的线程是否被中断。\n\t* CountDownLatch会阻塞主线程，CyclicBarrier不会阻塞主线程，只会阻塞子线程。\n\n## Semaphore\n计数信号量。Semaphore管理一系列许可证。每个acquire方法阻塞，直到有一个许可证可以\n获得然后拿走一个许可证；每个release方法增加一个许可证，这可能会释放一个阻塞的\nacquire方法。然而，其实并没有实际的许可证这个对象，Semaphore只是维持了一个可获得\n许可证的数量。\nSemaphore有两种模式，公平模式和非公平模式。公平模式就是调用acquire的顺序就是获取\n许可证的顺序，遵循FIFO；而非公平模式是抢占式的，也就是有可能一个新的获取线程恰好\n在一个许可证释放时得到了这个许可证，而前面还有等待的线程。\n\n## Exchanger\n一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。它提供一个同步点，\n在这个同步点两个线程可以交换彼此的数据。这两个线程通过exchange方法交换数据， 如果\n第一个线程先执行exchange方法，它会一直等待第二个线程也执行exchange，当两个线程都\n到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。\n\n## ThreadLocal\nThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地\n改变自己的副本，而不会影响其它线程所对应的副本，容易造成OOM。\n\n## 线程池\n为了避免系统频繁的创建和销毁线程，我们可以将创建的线程进行复用。数据库中的数据库\n连接池也是此意。\n* 实现原理：\n\t1. 判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心\n\t线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，\n\t则进入下个流程。\n\t2. 线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个\n\t工作队列里。如果工作队列满了，则进入下个流程。\n\t3. 判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来\n\t执行任务。如果已经满了，则交给饱和策略来处理这个任务。\n* 实现方式：\n\t* FixedThreadPool：固定线程数量的线程池\n\t* CachedThreadPool：可以根据实际情况调整线程数量的线程池\n\t* SingleThreadExecutor：只有一个线程的线程池\n\t* SingleThreadScheduledExecutor：和SingleThreadExecutor的区别是给定了时间执行\n\t某任务的功能，可以进行定时执行等\n\t* ScheduledThreadPool：在SingleThreadScheduledExecutor的基础上可以指定线程数量\n\n## 线程的生命周期\n* 新建（new）\n* 运行（runnable）\n* 阻塞（blocked）\n* 限期等待（timed_waiting）\n* 无限期等待（waiting）\n* 结束（terminated）\n\n# 锁机制\n## 线程安全\n当多个线程访问某一个类（对象或方法）时，这个类始终能表现出正确的行为，那么这个\n类（对象或方法）就是线程安全的\n线程安全就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，\n其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据\n污染。 线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到\n的数据是脏数据。\n\n## 重入锁\n当线程请求一个由其它线程持有的对象锁时，该线程会阻塞，而当线程请求由自己持有的对象\n锁时，如果该锁是重入锁,请求就会成功，否则阻塞。防止死锁。\n\n## 死锁\n* 产生的4个必要条件\n\t1. 互斥：某种资源一次只允许一个线程访问，即该资源一旦分配给某个线程，其他线\n\t程就不能再访问，直到该线程访问结束。\n\t2. 占有且等待：一个线程本身占有资源（一种或多种），同时还有资源未得到满足，\n\t正在等待其他进程释放该资源。\n\t3. 不可抢占：别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人\n\t的资源抢过来。\n\t4. 循环等待：存在一个线程链，使得每个线程都占有下一个线程所需的至少一种资源。\n* 检查\n通过jConsole（JDK自带的图形化界面工具）检查死锁\n\n## volatile实现原理\n* 禁止指令的重排序优化\n\n* 提供内存可见性\n\n## synchronized实现原理\n关键字synchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在\n同一个时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和\n排他性。\n\n## synchronized 与 Lock 的区别\n* synchronized是java关键字，Lock是java类\n* synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁\n* synchronized会自动释放锁，Lock需在finally中手工释放锁\n* synchronized获取不到锁会一直等待，而Lock可以不用一直等待\n* synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可中断、可公平可非公平\n* Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题\n\n## AQS\n队列同步器，是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量表示\n同步状态，通过内置的FIFO队列（先进先出）来完成资源获取线程的排队工作。\n\n## CAS无锁、乐观锁、悲观锁\n对于并发控制而言，锁是一种悲观的策略。它总是假设每一次的临界区操作会产生冲突，因此，\n必须对每次操作都小心翼翼。如果有多个线程同时需要访问临界区资源，就宁可牺牲性能让\n线程进行等待，所以说锁会阻塞线程执行。\n而无锁是一种乐观的策略。它会假设对资源的访问是没有冲突的。既然没有冲突，自然不需\n要等待，所以所有的线程都可以在不停顿的状态下持续执行。基于比较交换技术（CAS Compare\n And Swap）来鉴别线程冲突，一旦检测到冲突产生，就重试当前操作直到没有冲突为止。\n\n## ABA问题\n比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two\n进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现\n内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但是不代表这个过程就是\n没有问题的。如果链表的头在变化了两次后恢复了原值，但是不代表链表就没有变化。\n\n## 乐观锁的业务场景及实现方式\n* 业务场景\n读取频繁的场景\n* 实现方式\n原子类\n\n## 并发类\n* 阻塞队列\n* 并发容器\n* 线程池\n* 锁\n* 原子类型\n* 并发工具\n\n## 原子操作类\n* 原子更新基本类型\n* 原子更新数组类型\n* 原子更新引用类型\n* 原子更新属性类型\n\n## 偏向锁、轻量级锁、重量级锁、自旋锁的概念\n* 偏向锁\n如果一个线程获得了锁，那么锁就进入了偏向模式。当这个线程再次请求锁时，无需再做任何\n同步操作\n* 轻量级锁\n只是简单的将对象头部作为指针，指向持有锁的线程堆栈的内部，来判断一个线程是否持有\n对象锁\n* 重量级锁\n内置锁在Java中被抽象为监视器锁（monitor），同步方式的成本非常高，包括系统调用引起\n的内核态与用户态切换、线程阻塞造成的线程切换等。因此，后来称这种锁为“重量级锁”\n* 自旋锁\n通过自旋锁，可以减少线程阻塞造成的线程切换，竞争锁失败时先自旋并同时重新竞争锁，\n如果自旋结束前还没有获取到锁，则阻塞自己\n","source":"_posts/20180720.md","raw":"---\ntitle: 多线程\ntags: 多线程\ncategories: Java\n---\n\n\n<!-- more -->\n# 进程与线程\n## 进程和线程\n* 进程：CPU进行资源分配和调度的基本单位\n* 线程：轻量级进程，程序执行的最小单元\n\n## 并行和并发\n* 并行：应用能够同时执行不同的任务\n* 并发：应用能够交替执行不同的任务\n\n## 创建线程的方式及实现\n* 继承Thread，重写run（）方法\n* 实现Runnable接口\n\n## 线程间通信的方式\n等待/通知机制：取票排队办业务\n* 使用synchronized关键字实现同步\nobject.wait()//等待\nobject.notify()//通知\nobject.notifyAll()//通知所有\n* 使用ReentrantLock和Condition实现同步\nlock.lock();//获取锁\nlock.unlock();//释放锁\ncondition.await()//等待\ncondition.signal()//通知\ncondition.signalAll()//通知所有\n\n## CountDownLatch、CyclicBarrier\n两者都是非常实用的多线程控制工具类\n* CountDownLatch：“倒计时器”，它允许一个或多个线程一直等待，直到其他线程的操作\n执行完后再执行。使用场景：实现最大的并行性、开始执行前等待n个线程完成各自任务、\n死锁检测。\n* CyclicBarrier：“循环屏障”，可循环使用的屏障。\n* 两者的区别\n\t* CountDownLatch的计数器只能使用一次。而CyclicBarrier的计数器可以使用reset() \n\t方法重置。所以CyclicBarrier能处理更为复杂的业务场景，比如如果计算发生错误，\n\t可以重置计数器，并让线程们重新执行一次。\n\t* CyclicBarrier还提供其他有用的方法，比如getNumberWaiting方法可以获得CyclicBarrier\n\t阻塞的线程数量。isBroken方法用来知道阻塞的线程是否被中断。\n\t* CountDownLatch会阻塞主线程，CyclicBarrier不会阻塞主线程，只会阻塞子线程。\n\n## Semaphore\n计数信号量。Semaphore管理一系列许可证。每个acquire方法阻塞，直到有一个许可证可以\n获得然后拿走一个许可证；每个release方法增加一个许可证，这可能会释放一个阻塞的\nacquire方法。然而，其实并没有实际的许可证这个对象，Semaphore只是维持了一个可获得\n许可证的数量。\nSemaphore有两种模式，公平模式和非公平模式。公平模式就是调用acquire的顺序就是获取\n许可证的顺序，遵循FIFO；而非公平模式是抢占式的，也就是有可能一个新的获取线程恰好\n在一个许可证释放时得到了这个许可证，而前面还有等待的线程。\n\n## Exchanger\n一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。它提供一个同步点，\n在这个同步点两个线程可以交换彼此的数据。这两个线程通过exchange方法交换数据， 如果\n第一个线程先执行exchange方法，它会一直等待第二个线程也执行exchange，当两个线程都\n到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。\n\n## ThreadLocal\nThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地\n改变自己的副本，而不会影响其它线程所对应的副本，容易造成OOM。\n\n## 线程池\n为了避免系统频繁的创建和销毁线程，我们可以将创建的线程进行复用。数据库中的数据库\n连接池也是此意。\n* 实现原理：\n\t1. 判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心\n\t线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，\n\t则进入下个流程。\n\t2. 线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个\n\t工作队列里。如果工作队列满了，则进入下个流程。\n\t3. 判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来\n\t执行任务。如果已经满了，则交给饱和策略来处理这个任务。\n* 实现方式：\n\t* FixedThreadPool：固定线程数量的线程池\n\t* CachedThreadPool：可以根据实际情况调整线程数量的线程池\n\t* SingleThreadExecutor：只有一个线程的线程池\n\t* SingleThreadScheduledExecutor：和SingleThreadExecutor的区别是给定了时间执行\n\t某任务的功能，可以进行定时执行等\n\t* ScheduledThreadPool：在SingleThreadScheduledExecutor的基础上可以指定线程数量\n\n## 线程的生命周期\n* 新建（new）\n* 运行（runnable）\n* 阻塞（blocked）\n* 限期等待（timed_waiting）\n* 无限期等待（waiting）\n* 结束（terminated）\n\n# 锁机制\n## 线程安全\n当多个线程访问某一个类（对象或方法）时，这个类始终能表现出正确的行为，那么这个\n类（对象或方法）就是线程安全的\n线程安全就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，\n其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据\n污染。 线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到\n的数据是脏数据。\n\n## 重入锁\n当线程请求一个由其它线程持有的对象锁时，该线程会阻塞，而当线程请求由自己持有的对象\n锁时，如果该锁是重入锁,请求就会成功，否则阻塞。防止死锁。\n\n## 死锁\n* 产生的4个必要条件\n\t1. 互斥：某种资源一次只允许一个线程访问，即该资源一旦分配给某个线程，其他线\n\t程就不能再访问，直到该线程访问结束。\n\t2. 占有且等待：一个线程本身占有资源（一种或多种），同时还有资源未得到满足，\n\t正在等待其他进程释放该资源。\n\t3. 不可抢占：别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人\n\t的资源抢过来。\n\t4. 循环等待：存在一个线程链，使得每个线程都占有下一个线程所需的至少一种资源。\n* 检查\n通过jConsole（JDK自带的图形化界面工具）检查死锁\n\n## volatile实现原理\n* 禁止指令的重排序优化\n\n* 提供内存可见性\n\n## synchronized实现原理\n关键字synchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在\n同一个时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和\n排他性。\n\n## synchronized 与 Lock 的区别\n* synchronized是java关键字，Lock是java类\n* synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁\n* synchronized会自动释放锁，Lock需在finally中手工释放锁\n* synchronized获取不到锁会一直等待，而Lock可以不用一直等待\n* synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可中断、可公平可非公平\n* Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题\n\n## AQS\n队列同步器，是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量表示\n同步状态，通过内置的FIFO队列（先进先出）来完成资源获取线程的排队工作。\n\n## CAS无锁、乐观锁、悲观锁\n对于并发控制而言，锁是一种悲观的策略。它总是假设每一次的临界区操作会产生冲突，因此，\n必须对每次操作都小心翼翼。如果有多个线程同时需要访问临界区资源，就宁可牺牲性能让\n线程进行等待，所以说锁会阻塞线程执行。\n而无锁是一种乐观的策略。它会假设对资源的访问是没有冲突的。既然没有冲突，自然不需\n要等待，所以所有的线程都可以在不停顿的状态下持续执行。基于比较交换技术（CAS Compare\n And Swap）来鉴别线程冲突，一旦检测到冲突产生，就重试当前操作直到没有冲突为止。\n\n## ABA问题\n比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two\n进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现\n内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但是不代表这个过程就是\n没有问题的。如果链表的头在变化了两次后恢复了原值，但是不代表链表就没有变化。\n\n## 乐观锁的业务场景及实现方式\n* 业务场景\n读取频繁的场景\n* 实现方式\n原子类\n\n## 并发类\n* 阻塞队列\n* 并发容器\n* 线程池\n* 锁\n* 原子类型\n* 并发工具\n\n## 原子操作类\n* 原子更新基本类型\n* 原子更新数组类型\n* 原子更新引用类型\n* 原子更新属性类型\n\n## 偏向锁、轻量级锁、重量级锁、自旋锁的概念\n* 偏向锁\n如果一个线程获得了锁，那么锁就进入了偏向模式。当这个线程再次请求锁时，无需再做任何\n同步操作\n* 轻量级锁\n只是简单的将对象头部作为指针，指向持有锁的线程堆栈的内部，来判断一个线程是否持有\n对象锁\n* 重量级锁\n内置锁在Java中被抽象为监视器锁（monitor），同步方式的成本非常高，包括系统调用引起\n的内核态与用户态切换、线程阻塞造成的线程切换等。因此，后来称这种锁为“重量级锁”\n* 自旋锁\n通过自旋锁，可以减少线程阻塞造成的线程切换，竞争锁失败时先自旋并同时重新竞争锁，\n如果自旋结束前还没有获取到锁，则阻塞自己\n","slug":"20180720","published":1,"date":"2019-01-08T01:20:48.445Z","updated":"2019-01-15T00:44:55.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smoj002cqwvgg4rh8y4n","content":"<a id=\"more\"></a>\n<h1 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h1><h2 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h2><ul>\n<li>进程：CPU进行资源分配和调度的基本单位</li>\n<li>线程：轻量级进程，程序执行的最小单元</li>\n</ul>\n<h2 id=\"并行和并发\"><a href=\"#并行和并发\" class=\"headerlink\" title=\"并行和并发\"></a>并行和并发</h2><ul>\n<li>并行：应用能够同时执行不同的任务</li>\n<li>并发：应用能够交替执行不同的任务</li>\n</ul>\n<h2 id=\"创建线程的方式及实现\"><a href=\"#创建线程的方式及实现\" class=\"headerlink\" title=\"创建线程的方式及实现\"></a>创建线程的方式及实现</h2><ul>\n<li>继承Thread，重写run（）方法</li>\n<li>实现Runnable接口</li>\n</ul>\n<h2 id=\"线程间通信的方式\"><a href=\"#线程间通信的方式\" class=\"headerlink\" title=\"线程间通信的方式\"></a>线程间通信的方式</h2><p>等待/通知机制：取票排队办业务</p>\n<ul>\n<li>使用synchronized关键字实现同步<br>object.wait()//等待<br>object.notify()//通知<br>object.notifyAll()//通知所有</li>\n<li>使用ReentrantLock和Condition实现同步<br>lock.lock();//获取锁<br>lock.unlock();//释放锁<br>condition.await()//等待<br>condition.signal()//通知<br>condition.signalAll()//通知所有</li>\n</ul>\n<h2 id=\"CountDownLatch、CyclicBarrier\"><a href=\"#CountDownLatch、CyclicBarrier\" class=\"headerlink\" title=\"CountDownLatch、CyclicBarrier\"></a>CountDownLatch、CyclicBarrier</h2><p>两者都是非常实用的多线程控制工具类</p>\n<ul>\n<li>CountDownLatch：“倒计时器”，它允许一个或多个线程一直等待，直到其他线程的操作<br>执行完后再执行。使用场景：实现最大的并行性、开始执行前等待n个线程完成各自任务、<br>死锁检测。</li>\n<li>CyclicBarrier：“循环屏障”，可循环使用的屏障。</li>\n<li>两者的区别<ul>\n<li>CountDownLatch的计数器只能使用一次。而CyclicBarrier的计数器可以使用reset()<br>方法重置。所以CyclicBarrier能处理更为复杂的业务场景，比如如果计算发生错误，<br>可以重置计数器，并让线程们重新执行一次。</li>\n<li>CyclicBarrier还提供其他有用的方法，比如getNumberWaiting方法可以获得CyclicBarrier<br>阻塞的线程数量。isBroken方法用来知道阻塞的线程是否被中断。</li>\n<li>CountDownLatch会阻塞主线程，CyclicBarrier不会阻塞主线程，只会阻塞子线程。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h2><p>计数信号量。Semaphore管理一系列许可证。每个acquire方法阻塞，直到有一个许可证可以<br>获得然后拿走一个许可证；每个release方法增加一个许可证，这可能会释放一个阻塞的<br>acquire方法。然而，其实并没有实际的许可证这个对象，Semaphore只是维持了一个可获得<br>许可证的数量。<br>Semaphore有两种模式，公平模式和非公平模式。公平模式就是调用acquire的顺序就是获取<br>许可证的顺序，遵循FIFO；而非公平模式是抢占式的，也就是有可能一个新的获取线程恰好<br>在一个许可证释放时得到了这个许可证，而前面还有等待的线程。</p>\n<h2 id=\"Exchanger\"><a href=\"#Exchanger\" class=\"headerlink\" title=\"Exchanger\"></a>Exchanger</h2><p>一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。它提供一个同步点，<br>在这个同步点两个线程可以交换彼此的数据。这两个线程通过exchange方法交换数据， 如果<br>第一个线程先执行exchange方法，它会一直等待第二个线程也执行exchange，当两个线程都<br>到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。</p>\n<h2 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h2><p>ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地<br>改变自己的副本，而不会影响其它线程所对应的副本，容易造成OOM。</p>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>为了避免系统频繁的创建和销毁线程，我们可以将创建的线程进行复用。数据库中的数据库<br>连接池也是此意。</p>\n<ul>\n<li>实现原理：<ol>\n<li>判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心<br>线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，<br>则进入下个流程。</li>\n<li>线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个<br>工作队列里。如果工作队列满了，则进入下个流程。</li>\n<li>判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来<br>执行任务。如果已经满了，则交给饱和策略来处理这个任务。</li>\n</ol>\n</li>\n<li>实现方式：<ul>\n<li>FixedThreadPool：固定线程数量的线程池</li>\n<li>CachedThreadPool：可以根据实际情况调整线程数量的线程池</li>\n<li>SingleThreadExecutor：只有一个线程的线程池</li>\n<li>SingleThreadScheduledExecutor：和SingleThreadExecutor的区别是给定了时间执行<br>某任务的功能，可以进行定时执行等</li>\n<li>ScheduledThreadPool：在SingleThreadScheduledExecutor的基础上可以指定线程数量</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h2><ul>\n<li>新建（new）</li>\n<li>运行（runnable）</li>\n<li>阻塞（blocked）</li>\n<li>限期等待（timed_waiting）</li>\n<li>无限期等待（waiting）</li>\n<li>结束（terminated）</li>\n</ul>\n<h1 id=\"锁机制\"><a href=\"#锁机制\" class=\"headerlink\" title=\"锁机制\"></a>锁机制</h1><h2 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h2><p>当多个线程访问某一个类（对象或方法）时，这个类始终能表现出正确的行为，那么这个<br>类（对象或方法）就是线程安全的<br>线程安全就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，<br>其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据<br>污染。 线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到<br>的数据是脏数据。</p>\n<h2 id=\"重入锁\"><a href=\"#重入锁\" class=\"headerlink\" title=\"重入锁\"></a>重入锁</h2><p>当线程请求一个由其它线程持有的对象锁时，该线程会阻塞，而当线程请求由自己持有的对象<br>锁时，如果该锁是重入锁,请求就会成功，否则阻塞。防止死锁。</p>\n<h2 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h2><ul>\n<li>产生的4个必要条件<ol>\n<li>互斥：某种资源一次只允许一个线程访问，即该资源一旦分配给某个线程，其他线<br>程就不能再访问，直到该线程访问结束。</li>\n<li>占有且等待：一个线程本身占有资源（一种或多种），同时还有资源未得到满足，<br>正在等待其他进程释放该资源。</li>\n<li>不可抢占：别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人<br>的资源抢过来。</li>\n<li>循环等待：存在一个线程链，使得每个线程都占有下一个线程所需的至少一种资源。</li>\n</ol>\n</li>\n<li>检查<br>通过jConsole（JDK自带的图形化界面工具）检查死锁</li>\n</ul>\n<h2 id=\"volatile实现原理\"><a href=\"#volatile实现原理\" class=\"headerlink\" title=\"volatile实现原理\"></a>volatile实现原理</h2><ul>\n<li><p>禁止指令的重排序优化</p>\n</li>\n<li><p>提供内存可见性</p>\n</li>\n</ul>\n<h2 id=\"synchronized实现原理\"><a href=\"#synchronized实现原理\" class=\"headerlink\" title=\"synchronized实现原理\"></a>synchronized实现原理</h2><p>关键字synchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在<br>同一个时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和<br>排他性。</p>\n<h2 id=\"synchronized-与-Lock-的区别\"><a href=\"#synchronized-与-Lock-的区别\" class=\"headerlink\" title=\"synchronized 与 Lock 的区别\"></a>synchronized 与 Lock 的区别</h2><ul>\n<li>synchronized是java关键字，Lock是java类</li>\n<li>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁</li>\n<li>synchronized会自动释放锁，Lock需在finally中手工释放锁</li>\n<li>synchronized获取不到锁会一直等待，而Lock可以不用一直等待</li>\n<li>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可中断、可公平可非公平</li>\n<li>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题</li>\n</ul>\n<h2 id=\"AQS\"><a href=\"#AQS\" class=\"headerlink\" title=\"AQS\"></a>AQS</h2><p>队列同步器，是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量表示<br>同步状态，通过内置的FIFO队列（先进先出）来完成资源获取线程的排队工作。</p>\n<h2 id=\"CAS无锁、乐观锁、悲观锁\"><a href=\"#CAS无锁、乐观锁、悲观锁\" class=\"headerlink\" title=\"CAS无锁、乐观锁、悲观锁\"></a>CAS无锁、乐观锁、悲观锁</h2><p>对于并发控制而言，锁是一种悲观的策略。它总是假设每一次的临界区操作会产生冲突，因此，<br>必须对每次操作都小心翼翼。如果有多个线程同时需要访问临界区资源，就宁可牺牲性能让<br>线程进行等待，所以说锁会阻塞线程执行。<br>而无锁是一种乐观的策略。它会假设对资源的访问是没有冲突的。既然没有冲突，自然不需<br>要等待，所以所有的线程都可以在不停顿的状态下持续执行。基于比较交换技术（CAS Compare<br> And Swap）来鉴别线程冲突，一旦检测到冲突产生，就重试当前操作直到没有冲突为止。</p>\n<h2 id=\"ABA问题\"><a href=\"#ABA问题\" class=\"headerlink\" title=\"ABA问题\"></a>ABA问题</h2><p>比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two<br>进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现<br>内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但是不代表这个过程就是<br>没有问题的。如果链表的头在变化了两次后恢复了原值，但是不代表链表就没有变化。</p>\n<h2 id=\"乐观锁的业务场景及实现方式\"><a href=\"#乐观锁的业务场景及实现方式\" class=\"headerlink\" title=\"乐观锁的业务场景及实现方式\"></a>乐观锁的业务场景及实现方式</h2><ul>\n<li>业务场景<br>读取频繁的场景</li>\n<li>实现方式<br>原子类</li>\n</ul>\n<h2 id=\"并发类\"><a href=\"#并发类\" class=\"headerlink\" title=\"并发类\"></a>并发类</h2><ul>\n<li>阻塞队列</li>\n<li>并发容器</li>\n<li>线程池</li>\n<li>锁</li>\n<li>原子类型</li>\n<li>并发工具</li>\n</ul>\n<h2 id=\"原子操作类\"><a href=\"#原子操作类\" class=\"headerlink\" title=\"原子操作类\"></a>原子操作类</h2><ul>\n<li>原子更新基本类型</li>\n<li>原子更新数组类型</li>\n<li>原子更新引用类型</li>\n<li>原子更新属性类型</li>\n</ul>\n<h2 id=\"偏向锁、轻量级锁、重量级锁、自旋锁的概念\"><a href=\"#偏向锁、轻量级锁、重量级锁、自旋锁的概念\" class=\"headerlink\" title=\"偏向锁、轻量级锁、重量级锁、自旋锁的概念\"></a>偏向锁、轻量级锁、重量级锁、自旋锁的概念</h2><ul>\n<li>偏向锁<br>如果一个线程获得了锁，那么锁就进入了偏向模式。当这个线程再次请求锁时，无需再做任何<br>同步操作</li>\n<li>轻量级锁<br>只是简单的将对象头部作为指针，指向持有锁的线程堆栈的内部，来判断一个线程是否持有<br>对象锁</li>\n<li>重量级锁<br>内置锁在Java中被抽象为监视器锁（monitor），同步方式的成本非常高，包括系统调用引起<br>的内核态与用户态切换、线程阻塞造成的线程切换等。因此，后来称这种锁为“重量级锁”</li>\n<li>自旋锁<br>通过自旋锁，可以减少线程阻塞造成的线程切换，竞争锁失败时先自旋并同时重新竞争锁，<br>如果自旋结束前还没有获取到锁，则阻塞自己</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h1><h2 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h2><ul>\n<li>进程：CPU进行资源分配和调度的基本单位</li>\n<li>线程：轻量级进程，程序执行的最小单元</li>\n</ul>\n<h2 id=\"并行和并发\"><a href=\"#并行和并发\" class=\"headerlink\" title=\"并行和并发\"></a>并行和并发</h2><ul>\n<li>并行：应用能够同时执行不同的任务</li>\n<li>并发：应用能够交替执行不同的任务</li>\n</ul>\n<h2 id=\"创建线程的方式及实现\"><a href=\"#创建线程的方式及实现\" class=\"headerlink\" title=\"创建线程的方式及实现\"></a>创建线程的方式及实现</h2><ul>\n<li>继承Thread，重写run（）方法</li>\n<li>实现Runnable接口</li>\n</ul>\n<h2 id=\"线程间通信的方式\"><a href=\"#线程间通信的方式\" class=\"headerlink\" title=\"线程间通信的方式\"></a>线程间通信的方式</h2><p>等待/通知机制：取票排队办业务</p>\n<ul>\n<li>使用synchronized关键字实现同步<br>object.wait()//等待<br>object.notify()//通知<br>object.notifyAll()//通知所有</li>\n<li>使用ReentrantLock和Condition实现同步<br>lock.lock();//获取锁<br>lock.unlock();//释放锁<br>condition.await()//等待<br>condition.signal()//通知<br>condition.signalAll()//通知所有</li>\n</ul>\n<h2 id=\"CountDownLatch、CyclicBarrier\"><a href=\"#CountDownLatch、CyclicBarrier\" class=\"headerlink\" title=\"CountDownLatch、CyclicBarrier\"></a>CountDownLatch、CyclicBarrier</h2><p>两者都是非常实用的多线程控制工具类</p>\n<ul>\n<li>CountDownLatch：“倒计时器”，它允许一个或多个线程一直等待，直到其他线程的操作<br>执行完后再执行。使用场景：实现最大的并行性、开始执行前等待n个线程完成各自任务、<br>死锁检测。</li>\n<li>CyclicBarrier：“循环屏障”，可循环使用的屏障。</li>\n<li>两者的区别<ul>\n<li>CountDownLatch的计数器只能使用一次。而CyclicBarrier的计数器可以使用reset()<br>方法重置。所以CyclicBarrier能处理更为复杂的业务场景，比如如果计算发生错误，<br>可以重置计数器，并让线程们重新执行一次。</li>\n<li>CyclicBarrier还提供其他有用的方法，比如getNumberWaiting方法可以获得CyclicBarrier<br>阻塞的线程数量。isBroken方法用来知道阻塞的线程是否被中断。</li>\n<li>CountDownLatch会阻塞主线程，CyclicBarrier不会阻塞主线程，只会阻塞子线程。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h2><p>计数信号量。Semaphore管理一系列许可证。每个acquire方法阻塞，直到有一个许可证可以<br>获得然后拿走一个许可证；每个release方法增加一个许可证，这可能会释放一个阻塞的<br>acquire方法。然而，其实并没有实际的许可证这个对象，Semaphore只是维持了一个可获得<br>许可证的数量。<br>Semaphore有两种模式，公平模式和非公平模式。公平模式就是调用acquire的顺序就是获取<br>许可证的顺序，遵循FIFO；而非公平模式是抢占式的，也就是有可能一个新的获取线程恰好<br>在一个许可证释放时得到了这个许可证，而前面还有等待的线程。</p>\n<h2 id=\"Exchanger\"><a href=\"#Exchanger\" class=\"headerlink\" title=\"Exchanger\"></a>Exchanger</h2><p>一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。它提供一个同步点，<br>在这个同步点两个线程可以交换彼此的数据。这两个线程通过exchange方法交换数据， 如果<br>第一个线程先执行exchange方法，它会一直等待第二个线程也执行exchange，当两个线程都<br>到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。</p>\n<h2 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h2><p>ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地<br>改变自己的副本，而不会影响其它线程所对应的副本，容易造成OOM。</p>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>为了避免系统频繁的创建和销毁线程，我们可以将创建的线程进行复用。数据库中的数据库<br>连接池也是此意。</p>\n<ul>\n<li>实现原理：<ol>\n<li>判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心<br>线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，<br>则进入下个流程。</li>\n<li>线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个<br>工作队列里。如果工作队列满了，则进入下个流程。</li>\n<li>判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来<br>执行任务。如果已经满了，则交给饱和策略来处理这个任务。</li>\n</ol>\n</li>\n<li>实现方式：<ul>\n<li>FixedThreadPool：固定线程数量的线程池</li>\n<li>CachedThreadPool：可以根据实际情况调整线程数量的线程池</li>\n<li>SingleThreadExecutor：只有一个线程的线程池</li>\n<li>SingleThreadScheduledExecutor：和SingleThreadExecutor的区别是给定了时间执行<br>某任务的功能，可以进行定时执行等</li>\n<li>ScheduledThreadPool：在SingleThreadScheduledExecutor的基础上可以指定线程数量</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h2><ul>\n<li>新建（new）</li>\n<li>运行（runnable）</li>\n<li>阻塞（blocked）</li>\n<li>限期等待（timed_waiting）</li>\n<li>无限期等待（waiting）</li>\n<li>结束（terminated）</li>\n</ul>\n<h1 id=\"锁机制\"><a href=\"#锁机制\" class=\"headerlink\" title=\"锁机制\"></a>锁机制</h1><h2 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h2><p>当多个线程访问某一个类（对象或方法）时，这个类始终能表现出正确的行为，那么这个<br>类（对象或方法）就是线程安全的<br>线程安全就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，<br>其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据<br>污染。 线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到<br>的数据是脏数据。</p>\n<h2 id=\"重入锁\"><a href=\"#重入锁\" class=\"headerlink\" title=\"重入锁\"></a>重入锁</h2><p>当线程请求一个由其它线程持有的对象锁时，该线程会阻塞，而当线程请求由自己持有的对象<br>锁时，如果该锁是重入锁,请求就会成功，否则阻塞。防止死锁。</p>\n<h2 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h2><ul>\n<li>产生的4个必要条件<ol>\n<li>互斥：某种资源一次只允许一个线程访问，即该资源一旦分配给某个线程，其他线<br>程就不能再访问，直到该线程访问结束。</li>\n<li>占有且等待：一个线程本身占有资源（一种或多种），同时还有资源未得到满足，<br>正在等待其他进程释放该资源。</li>\n<li>不可抢占：别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人<br>的资源抢过来。</li>\n<li>循环等待：存在一个线程链，使得每个线程都占有下一个线程所需的至少一种资源。</li>\n</ol>\n</li>\n<li>检查<br>通过jConsole（JDK自带的图形化界面工具）检查死锁</li>\n</ul>\n<h2 id=\"volatile实现原理\"><a href=\"#volatile实现原理\" class=\"headerlink\" title=\"volatile实现原理\"></a>volatile实现原理</h2><ul>\n<li><p>禁止指令的重排序优化</p>\n</li>\n<li><p>提供内存可见性</p>\n</li>\n</ul>\n<h2 id=\"synchronized实现原理\"><a href=\"#synchronized实现原理\" class=\"headerlink\" title=\"synchronized实现原理\"></a>synchronized实现原理</h2><p>关键字synchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在<br>同一个时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和<br>排他性。</p>\n<h2 id=\"synchronized-与-Lock-的区别\"><a href=\"#synchronized-与-Lock-的区别\" class=\"headerlink\" title=\"synchronized 与 Lock 的区别\"></a>synchronized 与 Lock 的区别</h2><ul>\n<li>synchronized是java关键字，Lock是java类</li>\n<li>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁</li>\n<li>synchronized会自动释放锁，Lock需在finally中手工释放锁</li>\n<li>synchronized获取不到锁会一直等待，而Lock可以不用一直等待</li>\n<li>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可中断、可公平可非公平</li>\n<li>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题</li>\n</ul>\n<h2 id=\"AQS\"><a href=\"#AQS\" class=\"headerlink\" title=\"AQS\"></a>AQS</h2><p>队列同步器，是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量表示<br>同步状态，通过内置的FIFO队列（先进先出）来完成资源获取线程的排队工作。</p>\n<h2 id=\"CAS无锁、乐观锁、悲观锁\"><a href=\"#CAS无锁、乐观锁、悲观锁\" class=\"headerlink\" title=\"CAS无锁、乐观锁、悲观锁\"></a>CAS无锁、乐观锁、悲观锁</h2><p>对于并发控制而言，锁是一种悲观的策略。它总是假设每一次的临界区操作会产生冲突，因此，<br>必须对每次操作都小心翼翼。如果有多个线程同时需要访问临界区资源，就宁可牺牲性能让<br>线程进行等待，所以说锁会阻塞线程执行。<br>而无锁是一种乐观的策略。它会假设对资源的访问是没有冲突的。既然没有冲突，自然不需<br>要等待，所以所有的线程都可以在不停顿的状态下持续执行。基于比较交换技术（CAS Compare<br> And Swap）来鉴别线程冲突，一旦检测到冲突产生，就重试当前操作直到没有冲突为止。</p>\n<h2 id=\"ABA问题\"><a href=\"#ABA问题\" class=\"headerlink\" title=\"ABA问题\"></a>ABA问题</h2><p>比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two<br>进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现<br>内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但是不代表这个过程就是<br>没有问题的。如果链表的头在变化了两次后恢复了原值，但是不代表链表就没有变化。</p>\n<h2 id=\"乐观锁的业务场景及实现方式\"><a href=\"#乐观锁的业务场景及实现方式\" class=\"headerlink\" title=\"乐观锁的业务场景及实现方式\"></a>乐观锁的业务场景及实现方式</h2><ul>\n<li>业务场景<br>读取频繁的场景</li>\n<li>实现方式<br>原子类</li>\n</ul>\n<h2 id=\"并发类\"><a href=\"#并发类\" class=\"headerlink\" title=\"并发类\"></a>并发类</h2><ul>\n<li>阻塞队列</li>\n<li>并发容器</li>\n<li>线程池</li>\n<li>锁</li>\n<li>原子类型</li>\n<li>并发工具</li>\n</ul>\n<h2 id=\"原子操作类\"><a href=\"#原子操作类\" class=\"headerlink\" title=\"原子操作类\"></a>原子操作类</h2><ul>\n<li>原子更新基本类型</li>\n<li>原子更新数组类型</li>\n<li>原子更新引用类型</li>\n<li>原子更新属性类型</li>\n</ul>\n<h2 id=\"偏向锁、轻量级锁、重量级锁、自旋锁的概念\"><a href=\"#偏向锁、轻量级锁、重量级锁、自旋锁的概念\" class=\"headerlink\" title=\"偏向锁、轻量级锁、重量级锁、自旋锁的概念\"></a>偏向锁、轻量级锁、重量级锁、自旋锁的概念</h2><ul>\n<li>偏向锁<br>如果一个线程获得了锁，那么锁就进入了偏向模式。当这个线程再次请求锁时，无需再做任何<br>同步操作</li>\n<li>轻量级锁<br>只是简单的将对象头部作为指针，指向持有锁的线程堆栈的内部，来判断一个线程是否持有<br>对象锁</li>\n<li>重量级锁<br>内置锁在Java中被抽象为监视器锁（monitor），同步方式的成本非常高，包括系统调用引起<br>的内核态与用户态切换、线程阻塞造成的线程切换等。因此，后来称这种锁为“重量级锁”</li>\n<li>自旋锁<br>通过自旋锁，可以减少线程阻塞造成的线程切换，竞争锁失败时先自旋并同时重新竞争锁，<br>如果自旋结束前还没有获取到锁，则阻塞自己</li>\n</ul>"},{"title":"开源框架","_content":"\n一般做框架的想法是出于以下几种考虑的\n* 目前现有的解决方案已经不能有效解决出现的问题，需要一个全新的框架和技术理论来处理\n* 现在的问题大部分都能解决，但是对于特定的问题还没有方便的处理方式，只是需要一个更好或者更方便的解决特定问题的办法\n所以要么做通用的框架，这种框架有非常好的扩展性，能够适应不同的应用场景；要么做一个针对特定应用场景的框架，让框架本身能够继承一些特定服务以简化开发。\n<!-- more -->\n\n# Servlet\n## Servlet的生命周期\n* 初始化方法init()：执行一次\n* 处理客户请求的方法service()：一个请求执行一次\n* 终止方法destroy()：执行一次\n\n## 转发与重定向的区别\n\n# Spring\n一般来说，Spring配置文件包含以下几个部分\n* 扫描bean：自动扫描某些文件夹\n* 数据库连接池：阿里的druid\n* 集成orm框架：JPA、MyBatis\n* 事务管理：AOP\n* 消息队列：ActiveMQ\n* 安全框架：security\n* 前端控制：spring mvc\n\n## BeanFactory 和 ApplicationContext 区别\n* BeanFactory延迟加载、ApplicationContext立即加载\n\n## Bean 的生命周期\n实例化，初始init，接收请求service，销毁destroy\n\n## IOC 如何实现\n\n## Bean的作用域\n* singleton：单例（默认）\n* prototype：多例\n* request：\n* session\n* globalSession\n\n## AOP\n* 应用场景：事务控制、权限控制、缓存控制、审计日志、异常处理、性能监控、分布式追\n踪等\n* 实现原理：基于动态代理实现\n* 好处：集中处理某一关注点/横切逻辑；可以很方便地添加/删除关注点；侵入性少，增强\n代码可读性及可维护性\n* 相关概念：\n    1. 切面（aspect）\n    切面是一个关注点的模块化，这个关注点可能是横切多个对象，Spring中常使用@Aspect\n    注解一个类使其称为一个切面。\n    2. 连接点（join point）\n    连接点是指在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候\n    3. 通知（advice）\n    指在切面的某个特定的连接点上执行的动作\n    通知类型：\n        * 前置通知\n        * 后置通知\n        * 返回通知\n        * 异常通知\n        * 环绕通知\n    4. 切点（pointcut）\n    指匹配连接点的断言。通知与一个切入点表达式关联，并在满足这个切入的连接点上运\n    行，例如：当执行某个特定的名称的方法\n    5. 目标对象（Target Object）\n    目标对象是被一个或者多个切面所\n    AOP代理是指AOP框架创建的对通知的对象\n    6. AOP代理（AOP Proxy）对象，用来实现切面契约（包括通知方法等功能）\n    7. 织入（weave）\n    指把切面连接到其他应用出程序类型或者对象上，并创建一个被通知的对象。或者说形\n    成代理对象的方法的过程\n\n## 动态代理（CGLib 与 JDK）\nJDK动态代理只能对实现了接口的类生成代理，而不能针对类，CGLib是针对类实现代理，底\n层采用ASM字节码生成代理类，主要是对指定的类生成一个子类，覆盖其中的方法（继承）。\njdk6之前，CGLib比JDK代理效率高，之后JDK代理效率要高于CGLib。故当Bean实现接口时，\nSpring就会用JDK的动态代理，当Bean没有实现接口时，Spring使用CGLib是实现，可以强制\n使用CGLib。\n\n## 事务\n* 实现方式\n    * 编程式事务管理：在代码中调用beginTransaction()、commit()、rollback()等事务\n    管理相关的方法\n    * 声明式事务管理：基于@Transactional、基于 TransactionProxyFactoryBean、基于\n    Aspectj AOP配置事务\n* 传播机制\n    * propagation_required\n    表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，\n    会启动一个新的事务\n    * propagation_supports\n    表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事\n    务中运行\n    * propagation_mandatory\n    表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常\n    * propagation_required_new\n    表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，\n    在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要\n    访问TransactionManager\n    * propagation_not_supported\n    表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将\n    被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\n    * propagation_never\n    表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常\n    * propagation_nested\n    表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以\n    独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与\n    propagation_required一样。注意各厂商对这种传播行为的支持是有所差异的。可以参\n    考资源管理器的文档来确认它们是否支持嵌套事务\n* 隔离级别\n    * isolation_default：使用数据库默认的隔离级别\n    * isolation_read_uncommitted：允许读取改变了的还未提交的数据，可能导致脏读、\n    不可重复读和幻读\n    * isolation_read committed：允许并发事务提交之后读取，可以避免脏读，可能导致\n    重复读和幻读\n    * isolation_repeatable_read：对相同字段的多次读取结果一致，可导致幻读\n    * isolation_serializable：完全服从ACID的原则，确保不发生脏读、不可重复读和幻读\n* 底层原理\n基于AOP实现\n* 事务失效\nSpring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑。\n\n## 自定义注解\n* 元注解\n@Target：描述注解的使用范围\n@Retention：描述注解的生命周期\n@Documented：标记注解，是否作为公共API\n@Inherited：被标注的类型是被继承的\n* 具体实现\n\n# SpringMVC\n## 运行流程\n* 用户发送请求至前端控制器DispatcherServlet\n* DispatcherServlet收到请求调用HandlerMapping处理器映射器。\n* 处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果没有\n则生成)一并返回给DispatcherServlet。\n* DispatcherServlet通过HandlerAdapter处理器适配器调用处理器\n* 执行处理器(Controller，也叫后端控制器)执行完成返回ModelAndView。\n* HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet\n* DispatcherServlet将ModelAndView传给ViewResolver视图解析器\n* ViewResolver解析后返回具体View\n* DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。\n* DispatcherServlet响应用户\n## 启动流程\n* initMultipartResolver：用于处理文件上传服务\n* initLocaleResolver：用于处理应用的国际化问题\n* initThemeResolver：用于定义一个主题\n* initHandlerMappings：用于定义用户设置的请求映射关系\n* initHandlerAdapter：用于根据Handler的类型定义不同的处理规则\n* initHandlerExceptionResolver：当Handler处理出错时，会通过这个Handler来统一处理\n* initRequestToViewNameTranslator：将指定的ViewName按照定义的requestToViewNameTranslator\n替换成想要的格式，如加上前缀或者后缀\n* initViewResolvers：用于将View解析成页面\n\n# ORM框架\n## MyBatis和Hibernate区别\n* hibernate是全自动，而mybatis是半自动\n* hibernate数据库移植性远大于mybatis\n* hibernate拥有完整的日志系统，mybatis则欠缺一些\n* mybatis相比hibernate需要关心很多细节\n* sql直接优化上，mybatis要比hibernate方便很多\n\n## MyBatis\n\n## Hibernate\n","source":"_posts/20180815.md","raw":"---\ntitle: 开源框架\ntags: 开源框架\ncategories: Java \n---\n\n一般做框架的想法是出于以下几种考虑的\n* 目前现有的解决方案已经不能有效解决出现的问题，需要一个全新的框架和技术理论来处理\n* 现在的问题大部分都能解决，但是对于特定的问题还没有方便的处理方式，只是需要一个更好或者更方便的解决特定问题的办法\n所以要么做通用的框架，这种框架有非常好的扩展性，能够适应不同的应用场景；要么做一个针对特定应用场景的框架，让框架本身能够继承一些特定服务以简化开发。\n<!-- more -->\n\n# Servlet\n## Servlet的生命周期\n* 初始化方法init()：执行一次\n* 处理客户请求的方法service()：一个请求执行一次\n* 终止方法destroy()：执行一次\n\n## 转发与重定向的区别\n\n# Spring\n一般来说，Spring配置文件包含以下几个部分\n* 扫描bean：自动扫描某些文件夹\n* 数据库连接池：阿里的druid\n* 集成orm框架：JPA、MyBatis\n* 事务管理：AOP\n* 消息队列：ActiveMQ\n* 安全框架：security\n* 前端控制：spring mvc\n\n## BeanFactory 和 ApplicationContext 区别\n* BeanFactory延迟加载、ApplicationContext立即加载\n\n## Bean 的生命周期\n实例化，初始init，接收请求service，销毁destroy\n\n## IOC 如何实现\n\n## Bean的作用域\n* singleton：单例（默认）\n* prototype：多例\n* request：\n* session\n* globalSession\n\n## AOP\n* 应用场景：事务控制、权限控制、缓存控制、审计日志、异常处理、性能监控、分布式追\n踪等\n* 实现原理：基于动态代理实现\n* 好处：集中处理某一关注点/横切逻辑；可以很方便地添加/删除关注点；侵入性少，增强\n代码可读性及可维护性\n* 相关概念：\n    1. 切面（aspect）\n    切面是一个关注点的模块化，这个关注点可能是横切多个对象，Spring中常使用@Aspect\n    注解一个类使其称为一个切面。\n    2. 连接点（join point）\n    连接点是指在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候\n    3. 通知（advice）\n    指在切面的某个特定的连接点上执行的动作\n    通知类型：\n        * 前置通知\n        * 后置通知\n        * 返回通知\n        * 异常通知\n        * 环绕通知\n    4. 切点（pointcut）\n    指匹配连接点的断言。通知与一个切入点表达式关联，并在满足这个切入的连接点上运\n    行，例如：当执行某个特定的名称的方法\n    5. 目标对象（Target Object）\n    目标对象是被一个或者多个切面所\n    AOP代理是指AOP框架创建的对通知的对象\n    6. AOP代理（AOP Proxy）对象，用来实现切面契约（包括通知方法等功能）\n    7. 织入（weave）\n    指把切面连接到其他应用出程序类型或者对象上，并创建一个被通知的对象。或者说形\n    成代理对象的方法的过程\n\n## 动态代理（CGLib 与 JDK）\nJDK动态代理只能对实现了接口的类生成代理，而不能针对类，CGLib是针对类实现代理，底\n层采用ASM字节码生成代理类，主要是对指定的类生成一个子类，覆盖其中的方法（继承）。\njdk6之前，CGLib比JDK代理效率高，之后JDK代理效率要高于CGLib。故当Bean实现接口时，\nSpring就会用JDK的动态代理，当Bean没有实现接口时，Spring使用CGLib是实现，可以强制\n使用CGLib。\n\n## 事务\n* 实现方式\n    * 编程式事务管理：在代码中调用beginTransaction()、commit()、rollback()等事务\n    管理相关的方法\n    * 声明式事务管理：基于@Transactional、基于 TransactionProxyFactoryBean、基于\n    Aspectj AOP配置事务\n* 传播机制\n    * propagation_required\n    表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，\n    会启动一个新的事务\n    * propagation_supports\n    表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事\n    务中运行\n    * propagation_mandatory\n    表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常\n    * propagation_required_new\n    表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，\n    在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要\n    访问TransactionManager\n    * propagation_not_supported\n    表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将\n    被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\n    * propagation_never\n    表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常\n    * propagation_nested\n    表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以\n    独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与\n    propagation_required一样。注意各厂商对这种传播行为的支持是有所差异的。可以参\n    考资源管理器的文档来确认它们是否支持嵌套事务\n* 隔离级别\n    * isolation_default：使用数据库默认的隔离级别\n    * isolation_read_uncommitted：允许读取改变了的还未提交的数据，可能导致脏读、\n    不可重复读和幻读\n    * isolation_read committed：允许并发事务提交之后读取，可以避免脏读，可能导致\n    重复读和幻读\n    * isolation_repeatable_read：对相同字段的多次读取结果一致，可导致幻读\n    * isolation_serializable：完全服从ACID的原则，确保不发生脏读、不可重复读和幻读\n* 底层原理\n基于AOP实现\n* 事务失效\nSpring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑。\n\n## 自定义注解\n* 元注解\n@Target：描述注解的使用范围\n@Retention：描述注解的生命周期\n@Documented：标记注解，是否作为公共API\n@Inherited：被标注的类型是被继承的\n* 具体实现\n\n# SpringMVC\n## 运行流程\n* 用户发送请求至前端控制器DispatcherServlet\n* DispatcherServlet收到请求调用HandlerMapping处理器映射器。\n* 处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果没有\n则生成)一并返回给DispatcherServlet。\n* DispatcherServlet通过HandlerAdapter处理器适配器调用处理器\n* 执行处理器(Controller，也叫后端控制器)执行完成返回ModelAndView。\n* HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet\n* DispatcherServlet将ModelAndView传给ViewResolver视图解析器\n* ViewResolver解析后返回具体View\n* DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。\n* DispatcherServlet响应用户\n## 启动流程\n* initMultipartResolver：用于处理文件上传服务\n* initLocaleResolver：用于处理应用的国际化问题\n* initThemeResolver：用于定义一个主题\n* initHandlerMappings：用于定义用户设置的请求映射关系\n* initHandlerAdapter：用于根据Handler的类型定义不同的处理规则\n* initHandlerExceptionResolver：当Handler处理出错时，会通过这个Handler来统一处理\n* initRequestToViewNameTranslator：将指定的ViewName按照定义的requestToViewNameTranslator\n替换成想要的格式，如加上前缀或者后缀\n* initViewResolvers：用于将View解析成页面\n\n# ORM框架\n## MyBatis和Hibernate区别\n* hibernate是全自动，而mybatis是半自动\n* hibernate数据库移植性远大于mybatis\n* hibernate拥有完整的日志系统，mybatis则欠缺一些\n* mybatis相比hibernate需要关心很多细节\n* sql直接优化上，mybatis要比hibernate方便很多\n\n## MyBatis\n\n## Hibernate\n","slug":"20180815","published":1,"date":"2019-01-08T01:20:48.449Z","updated":"2019-01-15T00:44:55.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqx1smoj002dqwvgww5zzsvi","content":"<p>一般做框架的想法是出于以下几种考虑的</p>\n<ul>\n<li>目前现有的解决方案已经不能有效解决出现的问题，需要一个全新的框架和技术理论来处理</li>\n<li>现在的问题大部分都能解决，但是对于特定的问题还没有方便的处理方式，只是需要一个更好或者更方便的解决特定问题的办法<br>所以要么做通用的框架，这种框架有非常好的扩展性，能够适应不同的应用场景；要么做一个针对特定应用场景的框架，让框架本身能够继承一些特定服务以简化开发。<a id=\"more\"></a>\n</li>\n</ul>\n<h1 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h1><h2 id=\"Servlet的生命周期\"><a href=\"#Servlet的生命周期\" class=\"headerlink\" title=\"Servlet的生命周期\"></a>Servlet的生命周期</h2><ul>\n<li>初始化方法init()：执行一次</li>\n<li>处理客户请求的方法service()：一个请求执行一次</li>\n<li>终止方法destroy()：执行一次</li>\n</ul>\n<h2 id=\"转发与重定向的区别\"><a href=\"#转发与重定向的区别\" class=\"headerlink\" title=\"转发与重定向的区别\"></a>转发与重定向的区别</h2><h1 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h1><p>一般来说，Spring配置文件包含以下几个部分</p>\n<ul>\n<li>扫描bean：自动扫描某些文件夹</li>\n<li>数据库连接池：阿里的druid</li>\n<li>集成orm框架：JPA、MyBatis</li>\n<li>事务管理：AOP</li>\n<li>消息队列：ActiveMQ</li>\n<li>安全框架：security</li>\n<li>前端控制：spring mvc</li>\n</ul>\n<h2 id=\"BeanFactory-和-ApplicationContext-区别\"><a href=\"#BeanFactory-和-ApplicationContext-区别\" class=\"headerlink\" title=\"BeanFactory 和 ApplicationContext 区别\"></a>BeanFactory 和 ApplicationContext 区别</h2><ul>\n<li>BeanFactory延迟加载、ApplicationContext立即加载</li>\n</ul>\n<h2 id=\"Bean-的生命周期\"><a href=\"#Bean-的生命周期\" class=\"headerlink\" title=\"Bean 的生命周期\"></a>Bean 的生命周期</h2><p>实例化，初始init，接收请求service，销毁destroy</p>\n<h2 id=\"IOC-如何实现\"><a href=\"#IOC-如何实现\" class=\"headerlink\" title=\"IOC 如何实现\"></a>IOC 如何实现</h2><h2 id=\"Bean的作用域\"><a href=\"#Bean的作用域\" class=\"headerlink\" title=\"Bean的作用域\"></a>Bean的作用域</h2><ul>\n<li>singleton：单例（默认）</li>\n<li>prototype：多例</li>\n<li>request：</li>\n<li>session</li>\n<li>globalSession</li>\n</ul>\n<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><ul>\n<li>应用场景：事务控制、权限控制、缓存控制、审计日志、异常处理、性能监控、分布式追<br>踪等</li>\n<li>实现原理：基于动态代理实现</li>\n<li>好处：集中处理某一关注点/横切逻辑；可以很方便地添加/删除关注点；侵入性少，增强<br>代码可读性及可维护性</li>\n<li>相关概念：<ol>\n<li>切面（aspect）<br>切面是一个关注点的模块化，这个关注点可能是横切多个对象，Spring中常使用@Aspect<br>注解一个类使其称为一个切面。</li>\n<li>连接点（join point）<br>连接点是指在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候</li>\n<li>通知（advice）<br>指在切面的某个特定的连接点上执行的动作<br>通知类型：<ul>\n<li>前置通知</li>\n<li>后置通知</li>\n<li>返回通知</li>\n<li>异常通知</li>\n<li>环绕通知</li>\n</ul>\n</li>\n<li>切点（pointcut）<br>指匹配连接点的断言。通知与一个切入点表达式关联，并在满足这个切入的连接点上运<br>行，例如：当执行某个特定的名称的方法</li>\n<li>目标对象（Target Object）<br>目标对象是被一个或者多个切面所<br>AOP代理是指AOP框架创建的对通知的对象</li>\n<li>AOP代理（AOP Proxy）对象，用来实现切面契约（包括通知方法等功能）</li>\n<li>织入（weave）<br>指把切面连接到其他应用出程序类型或者对象上，并创建一个被通知的对象。或者说形<br>成代理对象的方法的过程</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"动态代理（CGLib-与-JDK）\"><a href=\"#动态代理（CGLib-与-JDK）\" class=\"headerlink\" title=\"动态代理（CGLib 与 JDK）\"></a>动态代理（CGLib 与 JDK）</h2><p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类，CGLib是针对类实现代理，底<br>层采用ASM字节码生成代理类，主要是对指定的类生成一个子类，覆盖其中的方法（继承）。<br>jdk6之前，CGLib比JDK代理效率高，之后JDK代理效率要高于CGLib。故当Bean实现接口时，<br>Spring就会用JDK的动态代理，当Bean没有实现接口时，Spring使用CGLib是实现，可以强制<br>使用CGLib。</p>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><ul>\n<li>实现方式<ul>\n<li>编程式事务管理：在代码中调用beginTransaction()、commit()、rollback()等事务<br>管理相关的方法</li>\n<li>声明式事务管理：基于@Transactional、基于 TransactionProxyFactoryBean、基于<br>Aspectj AOP配置事务</li>\n</ul>\n</li>\n<li>传播机制<ul>\n<li>propagation_required<br>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，<br>会启动一个新的事务</li>\n<li>propagation_supports<br>表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事<br>务中运行</li>\n<li>propagation_mandatory<br>表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常</li>\n<li>propagation_required_new<br>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，<br>在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要<br>访问TransactionManager</li>\n<li>propagation_not_supported<br>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将<br>被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</li>\n<li>propagation_never<br>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</li>\n<li>propagation_nested<br>表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以<br>独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与<br>propagation_required一样。注意各厂商对这种传播行为的支持是有所差异的。可以参<br>考资源管理器的文档来确认它们是否支持嵌套事务</li>\n</ul>\n</li>\n<li>隔离级别<ul>\n<li>isolation_default：使用数据库默认的隔离级别</li>\n<li>isolation_read_uncommitted：允许读取改变了的还未提交的数据，可能导致脏读、<br>不可重复读和幻读</li>\n<li>isolation_read committed：允许并发事务提交之后读取，可以避免脏读，可能导致<br>重复读和幻读</li>\n<li>isolation_repeatable_read：对相同字段的多次读取结果一致，可导致幻读</li>\n<li>isolation_serializable：完全服从ACID的原则，确保不发生脏读、不可重复读和幻读</li>\n</ul>\n</li>\n<li>底层原理<br>基于AOP实现</li>\n<li>事务失效<br>Spring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑。</li>\n</ul>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><ul>\n<li>元注解<br>@Target：描述注解的使用范围<br>@Retention：描述注解的生命周期<br>@Documented：标记注解，是否作为公共API<br>@Inherited：被标注的类型是被继承的</li>\n<li>具体实现</li>\n</ul>\n<h1 id=\"SpringMVC\"><a href=\"#SpringMVC\" class=\"headerlink\" title=\"SpringMVC\"></a>SpringMVC</h1><h2 id=\"运行流程\"><a href=\"#运行流程\" class=\"headerlink\" title=\"运行流程\"></a>运行流程</h2><ul>\n<li>用户发送请求至前端控制器DispatcherServlet</li>\n<li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>\n<li>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果没有<br>则生成)一并返回给DispatcherServlet。</li>\n<li>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器</li>\n<li>执行处理器(Controller，也叫后端控制器)执行完成返回ModelAndView。</li>\n<li>HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet</li>\n<li>DispatcherServlet将ModelAndView传给ViewResolver视图解析器</li>\n<li>ViewResolver解析后返回具体View</li>\n<li>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</li>\n<li>DispatcherServlet响应用户<h2 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h2></li>\n<li>initMultipartResolver：用于处理文件上传服务</li>\n<li>initLocaleResolver：用于处理应用的国际化问题</li>\n<li>initThemeResolver：用于定义一个主题</li>\n<li>initHandlerMappings：用于定义用户设置的请求映射关系</li>\n<li>initHandlerAdapter：用于根据Handler的类型定义不同的处理规则</li>\n<li>initHandlerExceptionResolver：当Handler处理出错时，会通过这个Handler来统一处理</li>\n<li>initRequestToViewNameTranslator：将指定的ViewName按照定义的requestToViewNameTranslator<br>替换成想要的格式，如加上前缀或者后缀</li>\n<li>initViewResolvers：用于将View解析成页面</li>\n</ul>\n<h1 id=\"ORM框架\"><a href=\"#ORM框架\" class=\"headerlink\" title=\"ORM框架\"></a>ORM框架</h1><h2 id=\"MyBatis和Hibernate区别\"><a href=\"#MyBatis和Hibernate区别\" class=\"headerlink\" title=\"MyBatis和Hibernate区别\"></a>MyBatis和Hibernate区别</h2><ul>\n<li>hibernate是全自动，而mybatis是半自动</li>\n<li>hibernate数据库移植性远大于mybatis</li>\n<li>hibernate拥有完整的日志系统，mybatis则欠缺一些</li>\n<li>mybatis相比hibernate需要关心很多细节</li>\n<li>sql直接优化上，mybatis要比hibernate方便很多</li>\n</ul>\n<h2 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h2><h2 id=\"Hibernate\"><a href=\"#Hibernate\" class=\"headerlink\" title=\"Hibernate\"></a>Hibernate</h2>","site":{"data":{}},"excerpt":"<p>一般做框架的想法是出于以下几种考虑的</p>\n<ul>\n<li>目前现有的解决方案已经不能有效解决出现的问题，需要一个全新的框架和技术理论来处理</li>\n<li>现在的问题大部分都能解决，但是对于特定的问题还没有方便的处理方式，只是需要一个更好或者更方便的解决特定问题的办法<br>所以要么做通用的框架，这种框架有非常好的扩展性，能够适应不同的应用场景；要么做一个针对特定应用场景的框架，让框架本身能够继承一些特定服务以简化开发。","more":"</li>\n</ul>\n<h1 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h1><h2 id=\"Servlet的生命周期\"><a href=\"#Servlet的生命周期\" class=\"headerlink\" title=\"Servlet的生命周期\"></a>Servlet的生命周期</h2><ul>\n<li>初始化方法init()：执行一次</li>\n<li>处理客户请求的方法service()：一个请求执行一次</li>\n<li>终止方法destroy()：执行一次</li>\n</ul>\n<h2 id=\"转发与重定向的区别\"><a href=\"#转发与重定向的区别\" class=\"headerlink\" title=\"转发与重定向的区别\"></a>转发与重定向的区别</h2><h1 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h1><p>一般来说，Spring配置文件包含以下几个部分</p>\n<ul>\n<li>扫描bean：自动扫描某些文件夹</li>\n<li>数据库连接池：阿里的druid</li>\n<li>集成orm框架：JPA、MyBatis</li>\n<li>事务管理：AOP</li>\n<li>消息队列：ActiveMQ</li>\n<li>安全框架：security</li>\n<li>前端控制：spring mvc</li>\n</ul>\n<h2 id=\"BeanFactory-和-ApplicationContext-区别\"><a href=\"#BeanFactory-和-ApplicationContext-区别\" class=\"headerlink\" title=\"BeanFactory 和 ApplicationContext 区别\"></a>BeanFactory 和 ApplicationContext 区别</h2><ul>\n<li>BeanFactory延迟加载、ApplicationContext立即加载</li>\n</ul>\n<h2 id=\"Bean-的生命周期\"><a href=\"#Bean-的生命周期\" class=\"headerlink\" title=\"Bean 的生命周期\"></a>Bean 的生命周期</h2><p>实例化，初始init，接收请求service，销毁destroy</p>\n<h2 id=\"IOC-如何实现\"><a href=\"#IOC-如何实现\" class=\"headerlink\" title=\"IOC 如何实现\"></a>IOC 如何实现</h2><h2 id=\"Bean的作用域\"><a href=\"#Bean的作用域\" class=\"headerlink\" title=\"Bean的作用域\"></a>Bean的作用域</h2><ul>\n<li>singleton：单例（默认）</li>\n<li>prototype：多例</li>\n<li>request：</li>\n<li>session</li>\n<li>globalSession</li>\n</ul>\n<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><ul>\n<li>应用场景：事务控制、权限控制、缓存控制、审计日志、异常处理、性能监控、分布式追<br>踪等</li>\n<li>实现原理：基于动态代理实现</li>\n<li>好处：集中处理某一关注点/横切逻辑；可以很方便地添加/删除关注点；侵入性少，增强<br>代码可读性及可维护性</li>\n<li>相关概念：<ol>\n<li>切面（aspect）<br>切面是一个关注点的模块化，这个关注点可能是横切多个对象，Spring中常使用@Aspect<br>注解一个类使其称为一个切面。</li>\n<li>连接点（join point）<br>连接点是指在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候</li>\n<li>通知（advice）<br>指在切面的某个特定的连接点上执行的动作<br>通知类型：<ul>\n<li>前置通知</li>\n<li>后置通知</li>\n<li>返回通知</li>\n<li>异常通知</li>\n<li>环绕通知</li>\n</ul>\n</li>\n<li>切点（pointcut）<br>指匹配连接点的断言。通知与一个切入点表达式关联，并在满足这个切入的连接点上运<br>行，例如：当执行某个特定的名称的方法</li>\n<li>目标对象（Target Object）<br>目标对象是被一个或者多个切面所<br>AOP代理是指AOP框架创建的对通知的对象</li>\n<li>AOP代理（AOP Proxy）对象，用来实现切面契约（包括通知方法等功能）</li>\n<li>织入（weave）<br>指把切面连接到其他应用出程序类型或者对象上，并创建一个被通知的对象。或者说形<br>成代理对象的方法的过程</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"动态代理（CGLib-与-JDK）\"><a href=\"#动态代理（CGLib-与-JDK）\" class=\"headerlink\" title=\"动态代理（CGLib 与 JDK）\"></a>动态代理（CGLib 与 JDK）</h2><p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类，CGLib是针对类实现代理，底<br>层采用ASM字节码生成代理类，主要是对指定的类生成一个子类，覆盖其中的方法（继承）。<br>jdk6之前，CGLib比JDK代理效率高，之后JDK代理效率要高于CGLib。故当Bean实现接口时，<br>Spring就会用JDK的动态代理，当Bean没有实现接口时，Spring使用CGLib是实现，可以强制<br>使用CGLib。</p>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><ul>\n<li>实现方式<ul>\n<li>编程式事务管理：在代码中调用beginTransaction()、commit()、rollback()等事务<br>管理相关的方法</li>\n<li>声明式事务管理：基于@Transactional、基于 TransactionProxyFactoryBean、基于<br>Aspectj AOP配置事务</li>\n</ul>\n</li>\n<li>传播机制<ul>\n<li>propagation_required<br>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，<br>会启动一个新的事务</li>\n<li>propagation_supports<br>表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事<br>务中运行</li>\n<li>propagation_mandatory<br>表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常</li>\n<li>propagation_required_new<br>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，<br>在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要<br>访问TransactionManager</li>\n<li>propagation_not_supported<br>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将<br>被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</li>\n<li>propagation_never<br>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</li>\n<li>propagation_nested<br>表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以<br>独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与<br>propagation_required一样。注意各厂商对这种传播行为的支持是有所差异的。可以参<br>考资源管理器的文档来确认它们是否支持嵌套事务</li>\n</ul>\n</li>\n<li>隔离级别<ul>\n<li>isolation_default：使用数据库默认的隔离级别</li>\n<li>isolation_read_uncommitted：允许读取改变了的还未提交的数据，可能导致脏读、<br>不可重复读和幻读</li>\n<li>isolation_read committed：允许并发事务提交之后读取，可以避免脏读，可能导致<br>重复读和幻读</li>\n<li>isolation_repeatable_read：对相同字段的多次读取结果一致，可导致幻读</li>\n<li>isolation_serializable：完全服从ACID的原则，确保不发生脏读、不可重复读和幻读</li>\n</ul>\n</li>\n<li>底层原理<br>基于AOP实现</li>\n<li>事务失效<br>Spring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑。</li>\n</ul>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><ul>\n<li>元注解<br>@Target：描述注解的使用范围<br>@Retention：描述注解的生命周期<br>@Documented：标记注解，是否作为公共API<br>@Inherited：被标注的类型是被继承的</li>\n<li>具体实现</li>\n</ul>\n<h1 id=\"SpringMVC\"><a href=\"#SpringMVC\" class=\"headerlink\" title=\"SpringMVC\"></a>SpringMVC</h1><h2 id=\"运行流程\"><a href=\"#运行流程\" class=\"headerlink\" title=\"运行流程\"></a>运行流程</h2><ul>\n<li>用户发送请求至前端控制器DispatcherServlet</li>\n<li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>\n<li>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果没有<br>则生成)一并返回给DispatcherServlet。</li>\n<li>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器</li>\n<li>执行处理器(Controller，也叫后端控制器)执行完成返回ModelAndView。</li>\n<li>HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet</li>\n<li>DispatcherServlet将ModelAndView传给ViewResolver视图解析器</li>\n<li>ViewResolver解析后返回具体View</li>\n<li>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</li>\n<li>DispatcherServlet响应用户<h2 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h2></li>\n<li>initMultipartResolver：用于处理文件上传服务</li>\n<li>initLocaleResolver：用于处理应用的国际化问题</li>\n<li>initThemeResolver：用于定义一个主题</li>\n<li>initHandlerMappings：用于定义用户设置的请求映射关系</li>\n<li>initHandlerAdapter：用于根据Handler的类型定义不同的处理规则</li>\n<li>initHandlerExceptionResolver：当Handler处理出错时，会通过这个Handler来统一处理</li>\n<li>initRequestToViewNameTranslator：将指定的ViewName按照定义的requestToViewNameTranslator<br>替换成想要的格式，如加上前缀或者后缀</li>\n<li>initViewResolvers：用于将View解析成页面</li>\n</ul>\n<h1 id=\"ORM框架\"><a href=\"#ORM框架\" class=\"headerlink\" title=\"ORM框架\"></a>ORM框架</h1><h2 id=\"MyBatis和Hibernate区别\"><a href=\"#MyBatis和Hibernate区别\" class=\"headerlink\" title=\"MyBatis和Hibernate区别\"></a>MyBatis和Hibernate区别</h2><ul>\n<li>hibernate是全自动，而mybatis是半自动</li>\n<li>hibernate数据库移植性远大于mybatis</li>\n<li>hibernate拥有完整的日志系统，mybatis则欠缺一些</li>\n<li>mybatis相比hibernate需要关心很多细节</li>\n<li>sql直接优化上，mybatis要比hibernate方便很多</li>\n</ul>\n<h2 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h2><h2 id=\"Hibernate\"><a href=\"#Hibernate\" class=\"headerlink\" title=\"Hibernate\"></a>Hibernate</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjqx1smk90001qwvgm4w30e4d","category_id":"cjqx1smkg0004qwvgx7g9wpyy","_id":"cjqx1smkm000dqwvgx88pd88i"},{"post_id":"cjqx1smkk0008qwvgkw2gqr1w","category_id":"cjqx1smkg0004qwvgx7g9wpyy","_id":"cjqx1smko000gqwvggr1kq24e"},{"post_id":"cjqx1smke0003qwvg3urbmfzz","category_id":"cjqx1smkk0009qwvgxs5cwx4p","_id":"cjqx1smkr000lqwvg8tfvn67x"},{"post_id":"cjqx1smkp000hqwvg57f8j79o","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1smkt000pqwvgausts40q"},{"post_id":"cjqx1smki0005qwvghj1bce7d","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1smkv000tqwvg87m2cjpn"},{"post_id":"cjqx1smkq000jqwvgmzylue1b","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1smkw000vqwvghs0frg5h"},{"post_id":"cjqx1smks000nqwvgud282wg0","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1smkx0010qwvg3o92gzng"},{"post_id":"cjqx1smkj0007qwvgg94m60pn","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1smkz0013qwvgwuzg4ctc"},{"post_id":"cjqx1smkt000qqwvgme27e7ke","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1sml00017qwvg5jf4uzf8"},{"post_id":"cjqx1smkv000uqwvg61mpy3nb","category_id":"cjqx1smkk0009qwvgxs5cwx4p","_id":"cjqx1sml1001aqwvges7rhb7m"},{"post_id":"cjqx1smkl000aqwvgpqwwdn0s","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1sml2001dqwvgk4ncj770"},{"post_id":"cjqx1smkn000eqwvgbkljgii0","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1sml4001hqwvgtnyedyby"},{"post_id":"cjqx1smkz0014qwvgt64zfyjl","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1sml5001kqwvgun6986n6"},{"post_id":"cjqx1sml00019qwvgeqmi1oyf","category_id":"cjqx1smkg0004qwvgx7g9wpyy","_id":"cjqx1sml6001nqwvgjesa0i2v"},{"post_id":"cjqx1smkw000xqwvgsmban7op","category_id":"cjqx1sml00016qwvgj6q4zpv0","_id":"cjqx1sml6001oqwvgbr9shfjy"},{"post_id":"cjqx1sml1001bqwvgc65wtd3c","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1sml7001rqwvgzq3xhbsn"},{"post_id":"cjqx1sml3001fqwvgc9rrqbqd","category_id":"cjqx1smkg0004qwvgx7g9wpyy","_id":"cjqx1sml7001sqwvgcct3c2r6"},{"post_id":"cjqx1smky0011qwvgkxu0smi1","category_id":"cjqx1sml00016qwvgj6q4zpv0","_id":"cjqx1sml8001uqwvghl18cp0b"},{"post_id":"cjqx1sml4001iqwvgumt7txcc","category_id":"cjqx1sml6001mqwvgjffapsun","_id":"cjqx1sml9001wqwvgdlxv15pu"},{"post_id":"cjqx1smoj002cqwvgg4rh8y4n","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1smol002fqwvg7xlb60nt"},{"post_id":"cjqx1smoj002dqwvgww5zzsvi","category_id":"cjqx1smkn000fqwvgbiz3qi7c","_id":"cjqx1smol002gqwvga1vjhxjz"}],"PostTag":[{"post_id":"cjqx1smke0003qwvg3urbmfzz","tag_id":"cjqx1smki0006qwvgkieereio","_id":"cjqx1smkm000cqwvgqa6cx0ti"},{"post_id":"cjqx1smki0005qwvghj1bce7d","tag_id":"cjqx1smkm000bqwvgulee4u4m","_id":"cjqx1smkq000kqwvgmihi1loi"},{"post_id":"cjqx1smkj0007qwvgg94m60pn","tag_id":"cjqx1smkp000iqwvgq8gkcj1z","_id":"cjqx1smku000rqwvgawek3u6k"},{"post_id":"cjqx1smkk0008qwvgkw2gqr1w","tag_id":"cjqx1smkt000oqwvg2249z6oe","_id":"cjqx1smkx000yqwvg7am8ky05"},{"post_id":"cjqx1smkv000uqwvg61mpy3nb","tag_id":"cjqx1smki0006qwvgkieereio","_id":"cjqx1smky0012qwvgks67718e"},{"post_id":"cjqx1smkl000aqwvgpqwwdn0s","tag_id":"cjqx1smkw000wqwvg8grrody7","_id":"cjqx1sml00018qwvgqz7scckq"},{"post_id":"cjqx1smkn000eqwvgbkljgii0","tag_id":"cjqx1smkz0015qwvgvtngcnh3","_id":"cjqx1sml3001gqwvghjsz4eao"},{"post_id":"cjqx1smkp000hqwvg57f8j79o","tag_id":"cjqx1sml2001cqwvgdewsjze1","_id":"cjqx1sml6001lqwvgr6fqng4v"},{"post_id":"cjqx1smkq000jqwvgmzylue1b","tag_id":"cjqx1sml5001jqwvg9o01xbvr","_id":"cjqx1sml7001qqwvgl7pslsoo"},{"post_id":"cjqx1smks000nqwvgud282wg0","tag_id":"cjqx1sml6001pqwvg09y946x3","_id":"cjqx1sml8001vqwvgd88e0a7u"},{"post_id":"cjqx1smkt000qqwvgme27e7ke","tag_id":"cjqx1sml7001tqwvge6h8mau7","_id":"cjqx1sml9001yqwvg5ljdhj2n"},{"post_id":"cjqx1smkw000xqwvgsmban7op","tag_id":"cjqx1sml9001xqwvgwk2z37oc","_id":"cjqx1smla0020qwvg7oswbr20"},{"post_id":"cjqx1smky0011qwvgkxu0smi1","tag_id":"cjqx1sml9001zqwvghh366s1x","_id":"cjqx1smla0022qwvg30aqsmi7"},{"post_id":"cjqx1smkz0014qwvgt64zfyjl","tag_id":"cjqx1smla0021qwvg8314z9oc","_id":"cjqx1smlb0024qwvgylgd6oz7"},{"post_id":"cjqx1sml00019qwvgeqmi1oyf","tag_id":"cjqx1smla0023qwvg8vvhehqr","_id":"cjqx1smlb0026qwvgeze6boij"},{"post_id":"cjqx1sml1001bqwvgc65wtd3c","tag_id":"cjqx1smlb0025qwvgzb6xfkrk","_id":"cjqx1smlc0028qwvg57abknxq"},{"post_id":"cjqx1sml3001fqwvgc9rrqbqd","tag_id":"cjqx1smlc0027qwvgz11hkaiw","_id":"cjqx1smlc002aqwvguh0jyz9f"},{"post_id":"cjqx1sml4001iqwvgumt7txcc","tag_id":"cjqx1smlc0027qwvgz11hkaiw","_id":"cjqx1smld002bqwvg4h3m84k9"},{"post_id":"cjqx1smoj002cqwvgg4rh8y4n","tag_id":"cjqx1smok002eqwvghlz6gt08","_id":"cjqx1smol002iqwvg1x4r89dp"},{"post_id":"cjqx1smoj002dqwvgww5zzsvi","tag_id":"cjqx1smol002hqwvg7mkoi0f9","_id":"cjqx1smom002jqwvg3anyr3en"}],"Tag":[{"name":"MySQL","_id":"cjqx1smki0006qwvgkieereio"},{"name":"I/O","_id":"cjqx1smkm000bqwvgulee4u4m"},{"name":"基础","_id":"cjqx1smkp000iqwvgq8gkcj1z"},{"name":"BPM","_id":"cjqx1smkt000oqwvg2249z6oe"},{"name":"集合","_id":"cjqx1smkw000wqwvg8grrody7"},{"name":"设计模式","_id":"cjqx1smkz0015qwvgvtngcnh3"},{"name":"数据结构","_id":"cjqx1sml2001cqwvgdewsjze1"},{"name":"JVM","_id":"cjqx1sml5001jqwvg9o01xbvr"},{"name":"容器","_id":"cjqx1sml6001pqwvg09y946x3"},{"name":"缓存技术","_id":"cjqx1sml7001tqwvge6h8mau7"},{"name":"分布式","_id":"cjqx1sml9001xqwvgwk2z37oc"},{"name":"微服务","_id":"cjqx1sml9001zqwvghh366s1x"},{"name":"消息队列","_id":"cjqx1smla0021qwvg8314z9oc"},{"name":"面试","_id":"cjqx1smla0023qwvg8vvhehqr"},{"name":"全文搜索引擎","_id":"cjqx1smlb0025qwvgzb6xfkrk"},{"name":"总结","_id":"cjqx1smlc0027qwvgz11hkaiw"},{"name":"多线程","_id":"cjqx1smok002eqwvghlz6gt08"},{"name":"开源框架","_id":"cjqx1smol002hqwvg7mkoi0f9"}]}}