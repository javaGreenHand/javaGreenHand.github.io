{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/dlw.jpg","path":"images/dlw.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/zfbpay.JPG","path":"images/zfbpay.JPG","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/wxpay.JPG","path":"images/wxpay.JPG","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1501237237101},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1501237237082},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1501237237085},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1501237237091},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1501237237106},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1501237237110},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1501237237114},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1501237237124},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1501237237136},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1501237237130},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1501237237121},{"_id":"themes/next/_config.yml","hash":"49f45e1868afe3b87673ae19cd7a11147f8889b8","modified":1536115085728},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1501237237152},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1501237237142},{"_id":"source/_posts/20170918.md","hash":"08a15bab487a8ebcd82abd1c73a0dc5d81d31774","modified":1539608378106},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1501237237159},{"_id":"themes/next/package.json","hash":"55305ae40690c059cb9140900eb20f9e7f3a7707","modified":1501237238310},{"_id":"source/_posts/20180617.md","hash":"10cd869874119f4ddc357ee2e7d1f58f0883e1a7","modified":1539913024920},{"_id":"source/_posts/20180619.md","hash":"cb039f20a5f4bb6a7604f1aa384d7bea90e36689","modified":1539913026781},{"_id":"source/_posts/20171212.md","hash":"836bac8be8625761b107d0c198861bfaf67ce35f","modified":1529242310827},{"_id":"source/_posts/20180618.md","hash":"264da42dbf6799e8d6ec8bd10a1a9273156cf454","modified":1540191588230},{"_id":"source/_posts/20180630.md","hash":"3b61e44323d1b273726847c20606e0e89fe32b88","modified":1540175279704},{"_id":"source/_posts/20180720.md","hash":"945f932b4ea913b199a07929a4f62be15a551936","modified":1540191608261},{"_id":"source/_posts/20180727.md","hash":"aa098cb6ff9f8b81ae34b1c312da475e2b60ab12","modified":1540188042000},{"_id":"source/_posts/20180725.md","hash":"00bcf8436f4db8081da9f220d00a800726bf3a85","modified":1540191608313},{"_id":"source/_posts/20180802.md","hash":"d4e77ee91bf5e4e7283d86e0de41ea24ff2124b3","modified":1539911154456},{"_id":"source/_posts/20181010.md","hash":"3b3a46c3b2a6105891e60b6ab06bd73ed01bba97","modified":1539911024974},{"_id":"source/_posts/20180803.md","hash":"fbf43cbddd5630ef6bb30407e21de722c62797f4","modified":1534570617962},{"_id":"source/categories/index.md","hash":"29c0847328d0a937c6eb5cc67d6d76c57692c075","modified":1514345184064},{"_id":"source/_posts/20180815.md","hash":"e4908fe3ac85e49d36d18106e53f9aea239bf2e9","modified":1540271796098},{"_id":"source/tags/index.md","hash":"c82a9f2ddf4dc397e406bdd227948780d9c32953","modified":1501237236185},{"_id":"source/_posts/20180916.md","hash":"02438f1fe02a694993a4f64b4e9dd06e9d37a17e","modified":1540193252543},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1501237237171},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1501237237163},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1501237237177},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1501237237205},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1501237237212},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1501237237184},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1501237237218},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1501237237234},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1501237237223},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1501237237240},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1501237237229},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1501237237251},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1501237237245},{"_id":"themes/next/layout/_layout.swig","hash":"b88585f9e1b7071f6670b20b77b656edd087ccc9","modified":1501237237258},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1501237238240},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1501237238246},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1501237238234},{"_id":"themes/next/layout/page.swig","hash":"22ba721a9688d490fc66f360e5a319288b63b05a","modified":1501237238287},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1501237238299},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1501237238319},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1501237238343},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1501237238293},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1501237238305},{"_id":"themes/next/source/404.html","hash":"9ce7edc47cd7f94f374ea3d93b31e1906e15d64f","modified":1514345184092},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1501237242344},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501237239538},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1501237237251},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1501237237252},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1501237237268},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1501237242378},{"_id":"themes/next/layout/_macro/post.swig","hash":"dc3792e703d10daacdb86a9f8d03e846d5b4da83","modified":1501237237296},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1501237237264},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1501237242362},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0cab451f1df8bba76ee8c81ab345d4de7ad0e15b","modified":1501237237313},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1501237237305},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1501237237319},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a229b569743555215a4f2561997ad496d81e938","modified":1501237237325},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1501237237332},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1501237237365},{"_id":"themes/next/layout/_partials/head.swig","hash":"09b110f77c415c5b71ebd886771a10bc84b95633","modified":1501237237347},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1501237237370},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1501237237557},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1501237237410},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1501237237405},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1501237237551},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1501237238061},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1501237237582},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1501237238066},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1501237238142},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1501237238366},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1501237238356},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1501237238394},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1501237238382},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1501237238426},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1501237238415},{"_id":"themes/next/scripts/tags/note.js","hash":"fc4958427ca7bdb47a7d830077f432ed824973e4","modified":1501237238467},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1501237238099},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1501237238086},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1501237239544},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1501237239538},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1501237238121},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1501237239552},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1501237239625},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501237239546},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1501237239629},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1501237239634},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1501237239644},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1501237239638},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1501237239682},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501237239691},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501237239692},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1501237239696},{"_id":"themes/next/source/images/dlw.jpg","hash":"7cbaaa261b568973a2c957e12de9cf3443100f9a","modified":1501237239690},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1501237239701},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501237239703},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501237237563},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501237237563},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501237239075},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501237239075},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501237239169},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501237239507},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501237239528},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1501237237352},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1501237237415},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1501237237431},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1501237237436},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1501237237443},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1501237237358},{"_id":"themes/next/source/images/zfbpay.JPG","hash":"497817b0d96353853c64b5e2f4931bca2f219480","modified":1514031221363},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1501237237528},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1501237237563},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1501237237568},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1501237237522},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1501237237642},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1501237237544},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1501237237649},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1501237237602},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1501237237654},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1501237237668},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1501237237689},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1501237237684},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1501237237760},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1501237237745},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1501237237776},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1501237237721},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1501237237839},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1501237237903},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1501237237814},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"be2aaeb8f05979e2ba501248480d5294256d61f2","modified":1501237237949},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1501237238056},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1501237238162},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1501237237944},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1501237238050},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1501237238219},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1501237239081},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1501237239074},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1501237238208},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1501237238191},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1501237239168},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1501237239507},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1501237239528},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1501237239517},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1501237239726},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ad83d5e453501f7c16785662d8803792aacd22a","modified":1501237239756},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1501237239742},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1501237239789},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1501237239774},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1501237239810},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1501237239843},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1501237239828},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1501237239863},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1501237239883},{"_id":"themes/next/source/js/src/utils.js","hash":"e7465a22b536ed15006a5f5556d9a4e633f6bd71","modified":1501237239898},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501237240287},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1501237240829},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501237240666},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1501237240681},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1501237240836},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1501237240877},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1501237240936},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1501237240868},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1501237240941},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1501237240946},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1501237240952},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1501237240930},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1501237241241},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1501237241257},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1501237241284},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1501237241252},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1501237241310},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1501237241184},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1501237241298},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501237241315},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501237241324},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501237241471},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501237241476},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501237241480},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501237241484},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501237241488},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501237241497},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501237241492},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501237241502},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501237241518},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501237241508},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501237241514},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1501237241553},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1501237241574},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1501237241599},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1501237242224},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1501237241953},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1501237242230},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1501237242306},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1501237242321},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1501237242338},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1501237241236},{"_id":"themes/next/source/images/wxpay.JPG","hash":"a4001e3adf5d8fcc5062eddf5932f53b9340020f","modified":1514031159862},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1501237238150},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1501237238156},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1501237238478},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1501237238495},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1501237238489},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1501237238828},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d68bdfcdb9d9e0bf60ed9a2df88e0b55cbfcc1e6","modified":1501237238473},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1501237238483},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1501237238583},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1501237239037},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"eec22651977ea25b5e65e8cb1b4906eef69ec588","modified":1501237239016},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1501237239030},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1501237239175},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1501237238961},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1501237239023},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1501237239213},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1501237239189},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1501237239068},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1501237239246},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1501237239241},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1501237239220},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1501237239236},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1501237239442},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1501237239466},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1501237239447},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1501237239455},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1501237239460},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1501237239485},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1501237239497},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1501237239493},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1501237239853},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1501237240091},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501237240683},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1501237240245},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1501237240282},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501237240685},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501237240687},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501237240689},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501237240690},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1501237240762},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1501237240822},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501237240692},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1501237240791},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1501237240892},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501237240924},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1501237240993},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1501237240958},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1501237241002},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1501237239183},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1501237239199},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1501237239206},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1501237242201},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1501237242219},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1501237240238},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501237241160},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501237241178},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1501237242268},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1501237238502},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1501237238507},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1501237238530},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1501237238512},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1501237238536},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1501237238525},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1501237238542},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1501237238521},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1501237238548},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1501237238559},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1501237238554},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1501237238572},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1501237238568},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1501237238589},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1501237238603},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1501237238609},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1501237238577},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1501237238598},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1501237238621},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1501237238616},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1501237238636},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1501237238625},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1501237238631},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1501237238641},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1501237238696},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1501237238705},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1501237238714},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1501237238710},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1501237238773},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1501237238781},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bc08cfb2ef2ff44ba3fc7dffdb2deb01a9d17d15","modified":1501237238769},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1501237238789},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1501237238777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1501237238785},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1501237238803},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1501237238795},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1501237238810},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1501237238816},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1501237238845},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1501237238822},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1501237238857},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1501237238836},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1501237238852},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1501237238870},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1501237238880},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1501237238875},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1501237238924},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74019008ba973ab30f0f4a6b3c2cd33c66d3a4b4","modified":1501237238866},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1501237238934},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1501237238940},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1501237238951},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1501237239224},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1501237239229},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1501237239449},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1501237238929},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1501237238946},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501237239907},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501237239903},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501237239913},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501237240085},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501237240693},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1501237240695},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1501237240731},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1501237240714},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501237241009},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1501237240733},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1501237240755},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501237241033},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501237241119},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1501237241112},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1501237240648},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1501237242183}],"Category":[{"name":"后端开发","_id":"cjnaatg770005dwv32ab3wy83"},{"name":"数据库","_id":"cjnaatg7z000hdwv3a27oq30w"},{"name":"前沿技术","_id":"cjnaatg8a000qdwv38nxhdusk"},{"name":"其他","_id":"cjnaatg8o000zdwv329w0bybs"}],"Data":[],"Page":[{"title":"分类","date":"2017-12-23T12:34:27.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-12-23 20:34:27\ntype: \"categories\"\n---\n","updated":"2017-12-27T03:26:24.064Z","path":"categories/index.html","_id":"cjnaatg6r0001dwv3ti4fhioz","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-07-28T07:17:20.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-07-28 15:17:20\ntype: \"tags\"\n---\n","updated":"2017-07-28T10:20:36.185Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjnaatg6y0003dwv3t3pj6lwc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"技能树","_content":"\n努力很容易，坚持努力很难，不忘初心，方得始终。\n<!-- more -->\n# 前沿技术\n* 微服务\n\n# 后端开发\n* Java\n* Python\n\n# 云计算&大数据\n* Hadoop\n\n# 运维&测试\n* Linux\n\n# 数据库\n* [MySQL](/tags/MySQL/)\n* MongoDB\n* Oracle\n\n# 工具\n* Maven\n* Git\n\n","source":"_posts/20170918.md","raw":"---\ntitle: 技能树\ncategories: 其他\n---\n\n努力很容易，坚持努力很难，不忘初心，方得始终。\n<!-- more -->\n# 前沿技术\n* 微服务\n\n# 后端开发\n* Java\n* Python\n\n# 云计算&大数据\n* Hadoop\n\n# 运维&测试\n* Linux\n\n# 数据库\n* [MySQL](/tags/MySQL/)\n* MongoDB\n* Oracle\n\n# 工具\n* Maven\n* Git\n\n","slug":"20170918","published":1,"date":"2017-09-18T13:47:10.412Z","updated":"2018-10-15T12:59:38.106Z","_id":"cjnaatg6e0000dwv3v4v06h8d","comments":1,"layout":"post","photos":[],"link":"","content":"<p>努力很容易，坚持努力很难，不忘初心，方得始终。<br><a id=\"more\"></a></p>\n<h1 id=\"前沿技术\"><a href=\"#前沿技术\" class=\"headerlink\" title=\"前沿技术\"></a>前沿技术</h1><ul>\n<li>微服务</li>\n</ul>\n<h1 id=\"后端开发\"><a href=\"#后端开发\" class=\"headerlink\" title=\"后端开发\"></a>后端开发</h1><ul>\n<li>Java</li>\n<li>Python</li>\n</ul>\n<h1 id=\"云计算-amp-大数据\"><a href=\"#云计算-amp-大数据\" class=\"headerlink\" title=\"云计算&amp;大数据\"></a>云计算&amp;大数据</h1><ul>\n<li>Hadoop</li>\n</ul>\n<h1 id=\"运维-amp-测试\"><a href=\"#运维-amp-测试\" class=\"headerlink\" title=\"运维&amp;测试\"></a>运维&amp;测试</h1><ul>\n<li>Linux</li>\n</ul>\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><ul>\n<li><a href=\"/tags/MySQL/\">MySQL</a></li>\n<li>MongoDB</li>\n<li>Oracle</li>\n</ul>\n<h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><ul>\n<li>Maven</li>\n<li>Git</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>努力很容易，坚持努力很难，不忘初心，方得始终。<br>","more":"</p>\n<h1 id=\"前沿技术\"><a href=\"#前沿技术\" class=\"headerlink\" title=\"前沿技术\"></a>前沿技术</h1><ul>\n<li>微服务</li>\n</ul>\n<h1 id=\"后端开发\"><a href=\"#后端开发\" class=\"headerlink\" title=\"后端开发\"></a>后端开发</h1><ul>\n<li>Java</li>\n<li>Python</li>\n</ul>\n<h1 id=\"云计算-amp-大数据\"><a href=\"#云计算-amp-大数据\" class=\"headerlink\" title=\"云计算&amp;大数据\"></a>云计算&amp;大数据</h1><ul>\n<li>Hadoop</li>\n</ul>\n<h1 id=\"运维-amp-测试\"><a href=\"#运维-amp-测试\" class=\"headerlink\" title=\"运维&amp;测试\"></a>运维&amp;测试</h1><ul>\n<li>Linux</li>\n</ul>\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><ul>\n<li><a href=\"/tags/MySQL/\">MySQL</a></li>\n<li>MongoDB</li>\n<li>Oracle</li>\n</ul>\n<h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><ul>\n<li>Maven</li>\n<li>Git</li>\n</ul>"},{"title":"重新认识BPM","_content":"\n好记性不如烂笔头\n<!-- more -->\n\n# doNext\n如果存在多个任务并存，则doNext时必须指定taskId。\ndoNext最好指定taskId,防止重复执行。\n\n# 表单状态\n## 多任务并行\n进入并行前设置状态\n任务处理后注意替换状态而不是直接更新状态\n合并前的节点注意设置状态\n\n# 表单\n注意表单和明细之分\n## 电脑端\n1. 外系统审批\n2. bpm系统审批\n\n## 手机端\n1. 外系统审批\n2. bpm系统审批\n\n# 网关\n1. 分支\n需要设置各个分支的条件，最终只会走其中满足条件的那个分支\n2. 同步\n不需要设置分支条件，各个分支并行流出并汇聚\n3. 条件同步\n设置分支条件为可选，其他同‘同步’\n\n# 按钮\n## 电脑端按钮\n同意、驳回发起人、审批历史、流程图常用，其他按需要加\n## 手机端按钮\n同意、驳回发起人常用，其他按需要加\n\n# 常见错误\n1. taskId is null 解决办法：设置task\n2. executionId dosen't exist 解决办法： bpm错误\n3. ORA-01722: 无效数字 解决办法：查看是否有变量值为字符串\n\n# 导入流程\n在发布版本的时候，经常会有流程变动，为了提高发布效率，往往会选择导入，但要按以下步骤操作：\n1. 首先确保测试和正式的角色和消息模板保持一致，防止导入后需要重新设置\n2. 导出正式流程，并导入测试\n3. 立马修改`SYS_URL`和`SYS_WS_URL`为test\n4. 修改流程注意：原流程节点ID保持不变;新节点规范ID;保存修改而不是发布新版\n5. 修改完流程后仔细核对节点设置，例如：前置后置脚本、人员、表单地址（电脑端和手机端）、操作按钮等\n6. 导出测试流程，并导入正式\n\n","source":"_posts/20180617.md","raw":"---\ntitle: 重新认识BPM\ntags: BPM\ncategories: 后端开发\n---\n\n好记性不如烂笔头\n<!-- more -->\n\n# doNext\n如果存在多个任务并存，则doNext时必须指定taskId。\ndoNext最好指定taskId,防止重复执行。\n\n# 表单状态\n## 多任务并行\n进入并行前设置状态\n任务处理后注意替换状态而不是直接更新状态\n合并前的节点注意设置状态\n\n# 表单\n注意表单和明细之分\n## 电脑端\n1. 外系统审批\n2. bpm系统审批\n\n## 手机端\n1. 外系统审批\n2. bpm系统审批\n\n# 网关\n1. 分支\n需要设置各个分支的条件，最终只会走其中满足条件的那个分支\n2. 同步\n不需要设置分支条件，各个分支并行流出并汇聚\n3. 条件同步\n设置分支条件为可选，其他同‘同步’\n\n# 按钮\n## 电脑端按钮\n同意、驳回发起人、审批历史、流程图常用，其他按需要加\n## 手机端按钮\n同意、驳回发起人常用，其他按需要加\n\n# 常见错误\n1. taskId is null 解决办法：设置task\n2. executionId dosen't exist 解决办法： bpm错误\n3. ORA-01722: 无效数字 解决办法：查看是否有变量值为字符串\n\n# 导入流程\n在发布版本的时候，经常会有流程变动，为了提高发布效率，往往会选择导入，但要按以下步骤操作：\n1. 首先确保测试和正式的角色和消息模板保持一致，防止导入后需要重新设置\n2. 导出正式流程，并导入测试\n3. 立马修改`SYS_URL`和`SYS_WS_URL`为test\n4. 修改流程注意：原流程节点ID保持不变;新节点规范ID;保存修改而不是发布新版\n5. 修改完流程后仔细核对节点设置，例如：前置后置脚本、人员、表单地址（电脑端和手机端）、操作按钮等\n6. 导出测试流程，并导入正式\n\n","slug":"20180617","published":1,"date":"2018-09-05T01:33:08.144Z","updated":"2018-10-19T01:37:04.920Z","_id":"cjnaatg6u0002dwv3a3qk9inm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>好记性不如烂笔头<br><a id=\"more\"></a></p>\n<h1 id=\"doNext\"><a href=\"#doNext\" class=\"headerlink\" title=\"doNext\"></a>doNext</h1><p>如果存在多个任务并存，则doNext时必须指定taskId。<br>doNext最好指定taskId,防止重复执行。</p>\n<h1 id=\"表单状态\"><a href=\"#表单状态\" class=\"headerlink\" title=\"表单状态\"></a>表单状态</h1><h2 id=\"多任务并行\"><a href=\"#多任务并行\" class=\"headerlink\" title=\"多任务并行\"></a>多任务并行</h2><p>进入并行前设置状态<br>任务处理后注意替换状态而不是直接更新状态<br>合并前的节点注意设置状态</p>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>注意表单和明细之分</p>\n<h2 id=\"电脑端\"><a href=\"#电脑端\" class=\"headerlink\" title=\"电脑端\"></a>电脑端</h2><ol>\n<li>外系统审批</li>\n<li>bpm系统审批</li>\n</ol>\n<h2 id=\"手机端\"><a href=\"#手机端\" class=\"headerlink\" title=\"手机端\"></a>手机端</h2><ol>\n<li>外系统审批</li>\n<li>bpm系统审批</li>\n</ol>\n<h1 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h1><ol>\n<li>分支<br>需要设置各个分支的条件，最终只会走其中满足条件的那个分支</li>\n<li>同步<br>不需要设置分支条件，各个分支并行流出并汇聚</li>\n<li>条件同步<br>设置分支条件为可选，其他同‘同步’</li>\n</ol>\n<h1 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h1><h2 id=\"电脑端按钮\"><a href=\"#电脑端按钮\" class=\"headerlink\" title=\"电脑端按钮\"></a>电脑端按钮</h2><p>同意、驳回发起人、审批历史、流程图常用，其他按需要加</p>\n<h2 id=\"手机端按钮\"><a href=\"#手机端按钮\" class=\"headerlink\" title=\"手机端按钮\"></a>手机端按钮</h2><p>同意、驳回发起人常用，其他按需要加</p>\n<h1 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h1><ol>\n<li>taskId is null 解决办法：设置task</li>\n<li>executionId dosen’t exist 解决办法： bpm错误</li>\n<li>ORA-01722: 无效数字 解决办法：查看是否有变量值为字符串</li>\n</ol>\n<h1 id=\"导入流程\"><a href=\"#导入流程\" class=\"headerlink\" title=\"导入流程\"></a>导入流程</h1><p>在发布版本的时候，经常会有流程变动，为了提高发布效率，往往会选择导入，但要按以下步骤操作：</p>\n<ol>\n<li>首先确保测试和正式的角色和消息模板保持一致，防止导入后需要重新设置</li>\n<li>导出正式流程，并导入测试</li>\n<li>立马修改<code>SYS_URL</code>和<code>SYS_WS_URL</code>为test</li>\n<li>修改流程注意：原流程节点ID保持不变;新节点规范ID;保存修改而不是发布新版</li>\n<li>修改完流程后仔细核对节点设置，例如：前置后置脚本、人员、表单地址（电脑端和手机端）、操作按钮等</li>\n<li>导出测试流程，并导入正式</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>好记性不如烂笔头<br>","more":"</p>\n<h1 id=\"doNext\"><a href=\"#doNext\" class=\"headerlink\" title=\"doNext\"></a>doNext</h1><p>如果存在多个任务并存，则doNext时必须指定taskId。<br>doNext最好指定taskId,防止重复执行。</p>\n<h1 id=\"表单状态\"><a href=\"#表单状态\" class=\"headerlink\" title=\"表单状态\"></a>表单状态</h1><h2 id=\"多任务并行\"><a href=\"#多任务并行\" class=\"headerlink\" title=\"多任务并行\"></a>多任务并行</h2><p>进入并行前设置状态<br>任务处理后注意替换状态而不是直接更新状态<br>合并前的节点注意设置状态</p>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>注意表单和明细之分</p>\n<h2 id=\"电脑端\"><a href=\"#电脑端\" class=\"headerlink\" title=\"电脑端\"></a>电脑端</h2><ol>\n<li>外系统审批</li>\n<li>bpm系统审批</li>\n</ol>\n<h2 id=\"手机端\"><a href=\"#手机端\" class=\"headerlink\" title=\"手机端\"></a>手机端</h2><ol>\n<li>外系统审批</li>\n<li>bpm系统审批</li>\n</ol>\n<h1 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h1><ol>\n<li>分支<br>需要设置各个分支的条件，最终只会走其中满足条件的那个分支</li>\n<li>同步<br>不需要设置分支条件，各个分支并行流出并汇聚</li>\n<li>条件同步<br>设置分支条件为可选，其他同‘同步’</li>\n</ol>\n<h1 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h1><h2 id=\"电脑端按钮\"><a href=\"#电脑端按钮\" class=\"headerlink\" title=\"电脑端按钮\"></a>电脑端按钮</h2><p>同意、驳回发起人、审批历史、流程图常用，其他按需要加</p>\n<h2 id=\"手机端按钮\"><a href=\"#手机端按钮\" class=\"headerlink\" title=\"手机端按钮\"></a>手机端按钮</h2><p>同意、驳回发起人常用，其他按需要加</p>\n<h1 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h1><ol>\n<li>taskId is null 解决办法：设置task</li>\n<li>executionId dosen’t exist 解决办法： bpm错误</li>\n<li>ORA-01722: 无效数字 解决办法：查看是否有变量值为字符串</li>\n</ol>\n<h1 id=\"导入流程\"><a href=\"#导入流程\" class=\"headerlink\" title=\"导入流程\"></a>导入流程</h1><p>在发布版本的时候，经常会有流程变动，为了提高发布效率，往往会选择导入，但要按以下步骤操作：</p>\n<ol>\n<li>首先确保测试和正式的角色和消息模板保持一致，防止导入后需要重新设置</li>\n<li>导出正式流程，并导入测试</li>\n<li>立马修改<code>SYS_URL</code>和<code>SYS_WS_URL</code>为test</li>\n<li>修改流程注意：原流程节点ID保持不变;新节点规范ID;保存修改而不是发布新版</li>\n<li>修改完流程后仔细核对节点设置，例如：前置后置脚本、人员、表单地址（电脑端和手机端）、操作按钮等</li>\n<li>导出测试流程，并导入正式</li>\n</ol>"},{"title":"深入分析Java I/O的工作机制","_content":"\n在当前这个海量数据时代，数据在网络中随处流动。在这个流动的过程中都涉及I/O问题，故可以说大部分Web应用系统的瓶颈都是I/O瓶颈。\n本文将分析I/O类库的基本架构、磁盘I/O的工作机制、网络I/O的工作机制、NIO的工作方式、I/O优化技巧。\n<!-- more -->\n\n# Java的I/O类库的基本架构\n* 基于字节操作的I/O接口：InputStream 和 OutputStream\n* 基于字符操作的I/O接口：Writer 和 Reader \n* 基于磁盘操作的I/O接口：File \n* 基于网络操作的I/O接口：Socket \n\n# 磁盘I/O的工作机制\n\n# 网络I/O的工作机制\n\n# I/O优化技巧","source":"_posts/20180619.md","raw":"---\ntitle: 深入分析Java I/O的工作机制\ntags: Java\ncategories: 后端开发\n---\n\n在当前这个海量数据时代，数据在网络中随处流动。在这个流动的过程中都涉及I/O问题，故可以说大部分Web应用系统的瓶颈都是I/O瓶颈。\n本文将分析I/O类库的基本架构、磁盘I/O的工作机制、网络I/O的工作机制、NIO的工作方式、I/O优化技巧。\n<!-- more -->\n\n# Java的I/O类库的基本架构\n* 基于字节操作的I/O接口：InputStream 和 OutputStream\n* 基于字符操作的I/O接口：Writer 和 Reader \n* 基于磁盘操作的I/O接口：File \n* 基于网络操作的I/O接口：Socket \n\n# 磁盘I/O的工作机制\n\n# 网络I/O的工作机制\n\n# I/O优化技巧","slug":"20180619","published":1,"date":"2018-09-05T01:33:08.145Z","updated":"2018-10-19T01:37:06.781Z","_id":"cjnaatg720004dwv3ton2wnos","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在当前这个海量数据时代，数据在网络中随处流动。在这个流动的过程中都涉及I/O问题，故可以说大部分Web应用系统的瓶颈都是I/O瓶颈。<br>本文将分析I/O类库的基本架构、磁盘I/O的工作机制、网络I/O的工作机制、NIO的工作方式、I/O优化技巧。<br><a id=\"more\"></a></p>\n<h1 id=\"Java的I-O类库的基本架构\"><a href=\"#Java的I-O类库的基本架构\" class=\"headerlink\" title=\"Java的I/O类库的基本架构\"></a>Java的I/O类库的基本架构</h1><ul>\n<li>基于字节操作的I/O接口：InputStream 和 OutputStream</li>\n<li>基于字符操作的I/O接口：Writer 和 Reader </li>\n<li>基于磁盘操作的I/O接口：File </li>\n<li>基于网络操作的I/O接口：Socket </li>\n</ul>\n<h1 id=\"磁盘I-O的工作机制\"><a href=\"#磁盘I-O的工作机制\" class=\"headerlink\" title=\"磁盘I/O的工作机制\"></a>磁盘I/O的工作机制</h1><h1 id=\"网络I-O的工作机制\"><a href=\"#网络I-O的工作机制\" class=\"headerlink\" title=\"网络I/O的工作机制\"></a>网络I/O的工作机制</h1><h1 id=\"I-O优化技巧\"><a href=\"#I-O优化技巧\" class=\"headerlink\" title=\"I/O优化技巧\"></a>I/O优化技巧</h1>","site":{"data":{}},"excerpt":"<p>在当前这个海量数据时代，数据在网络中随处流动。在这个流动的过程中都涉及I/O问题，故可以说大部分Web应用系统的瓶颈都是I/O瓶颈。<br>本文将分析I/O类库的基本架构、磁盘I/O的工作机制、网络I/O的工作机制、NIO的工作方式、I/O优化技巧。<br>","more":"</p>\n<h1 id=\"Java的I-O类库的基本架构\"><a href=\"#Java的I-O类库的基本架构\" class=\"headerlink\" title=\"Java的I/O类库的基本架构\"></a>Java的I/O类库的基本架构</h1><ul>\n<li>基于字节操作的I/O接口：InputStream 和 OutputStream</li>\n<li>基于字符操作的I/O接口：Writer 和 Reader </li>\n<li>基于磁盘操作的I/O接口：File </li>\n<li>基于网络操作的I/O接口：Socket </li>\n</ul>\n<h1 id=\"磁盘I-O的工作机制\"><a href=\"#磁盘I-O的工作机制\" class=\"headerlink\" title=\"磁盘I/O的工作机制\"></a>磁盘I/O的工作机制</h1><h1 id=\"网络I-O的工作机制\"><a href=\"#网络I-O的工作机制\" class=\"headerlink\" title=\"网络I/O的工作机制\"></a>网络I/O的工作机制</h1><h1 id=\"I-O优化技巧\"><a href=\"#I-O优化技巧\" class=\"headerlink\" title=\"I/O优化技巧\"></a>I/O优化技巧</h1>"},{"title":"MySQL 5.7.20安装和卸载","_content":"\nMySQL 5.7.20安装和卸载\n<!-- more -->\n\n# MySQL安装\n1. 下载[mysql](https://dev.mysql.com/downloads/mysql/)\n将文件解压，解压后在:`E:\\Java\\mysql-5.7.20-winx64`\n2. 配置环境变量\n将`E:\\Java\\mysql-5.7.20-winx64\\bin`添加至系统变量Path\n3. 用管理员身份运行CMD，依次输入下面的命令即可。\n`mysqld --initialize --user=mysql --console`\n初始化data文件夹，并生成一个临时密码。\n`mysqld -install`\n安装MySQL服务\n`net start mysql`\n启动MySQL服务\n`mysql -u root -p`\n输入刚才生成的临时密码\n`set password = password('123456');`\n修改密码为123456\n\n# MySQL卸载\n1. 用管理员身份运行CMD，执行以下两个命令\n`net stop mysql` 停止MySQL\n`mysqld -remove` 删除服务\n2. 删除mysql注册表","source":"_posts/20171212.md","raw":"---\ntitle: MySQL 5.7.20安装和卸载\ntags: MySQL\ncategories: 数据库\n---\n\nMySQL 5.7.20安装和卸载\n<!-- more -->\n\n# MySQL安装\n1. 下载[mysql](https://dev.mysql.com/downloads/mysql/)\n将文件解压，解压后在:`E:\\Java\\mysql-5.7.20-winx64`\n2. 配置环境变量\n将`E:\\Java\\mysql-5.7.20-winx64\\bin`添加至系统变量Path\n3. 用管理员身份运行CMD，依次输入下面的命令即可。\n`mysqld --initialize --user=mysql --console`\n初始化data文件夹，并生成一个临时密码。\n`mysqld -install`\n安装MySQL服务\n`net start mysql`\n启动MySQL服务\n`mysql -u root -p`\n输入刚才生成的临时密码\n`set password = password('123456');`\n修改密码为123456\n\n# MySQL卸载\n1. 用管理员身份运行CMD，执行以下两个命令\n`net stop mysql` 停止MySQL\n`mysqld -remove` 删除服务\n2. 删除mysql注册表","slug":"20171212","published":1,"date":"2017-12-12T12:50:18.316Z","updated":"2018-06-17T13:31:50.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnaatg7e0007dwv3qpy2x53h","content":"<p>MySQL 5.7.20安装和卸载<br><a id=\"more\"></a></p>\n<h1 id=\"MySQL安装\"><a href=\"#MySQL安装\" class=\"headerlink\" title=\"MySQL安装\"></a>MySQL安装</h1><ol>\n<li>下载<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"external\">mysql</a><br>将文件解压，解压后在:<code>E:\\Java\\mysql-5.7.20-winx64</code></li>\n<li>配置环境变量<br>将<code>E:\\Java\\mysql-5.7.20-winx64\\bin</code>添加至系统变量Path</li>\n<li>用管理员身份运行CMD，依次输入下面的命令即可。<br><code>mysqld --initialize --user=mysql --console</code><br>初始化data文件夹，并生成一个临时密码。<br><code>mysqld -install</code><br>安装MySQL服务<br><code>net start mysql</code><br>启动MySQL服务<br><code>mysql -u root -p</code><br>输入刚才生成的临时密码<br><code>set password = password(&#39;123456&#39;);</code><br>修改密码为123456</li>\n</ol>\n<h1 id=\"MySQL卸载\"><a href=\"#MySQL卸载\" class=\"headerlink\" title=\"MySQL卸载\"></a>MySQL卸载</h1><ol>\n<li>用管理员身份运行CMD，执行以下两个命令<br><code>net stop mysql</code> 停止MySQL<br><code>mysqld -remove</code> 删除服务</li>\n<li>删除mysql注册表</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>MySQL 5.7.20安装和卸载<br>","more":"</p>\n<h1 id=\"MySQL安装\"><a href=\"#MySQL安装\" class=\"headerlink\" title=\"MySQL安装\"></a>MySQL安装</h1><ol>\n<li>下载<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"external\">mysql</a><br>将文件解压，解压后在:<code>E:\\Java\\mysql-5.7.20-winx64</code></li>\n<li>配置环境变量<br>将<code>E:\\Java\\mysql-5.7.20-winx64\\bin</code>添加至系统变量Path</li>\n<li>用管理员身份运行CMD，依次输入下面的命令即可。<br><code>mysqld --initialize --user=mysql --console</code><br>初始化data文件夹，并生成一个临时密码。<br><code>mysqld -install</code><br>安装MySQL服务<br><code>net start mysql</code><br>启动MySQL服务<br><code>mysql -u root -p</code><br>输入刚才生成的临时密码<br><code>set password = password(&#39;123456&#39;);</code><br>修改密码为123456</li>\n</ol>\n<h1 id=\"MySQL卸载\"><a href=\"#MySQL卸载\" class=\"headerlink\" title=\"MySQL卸载\"></a>MySQL卸载</h1><ol>\n<li>用管理员身份运行CMD，执行以下两个命令<br><code>net stop mysql</code> 停止MySQL<br><code>mysqld -remove</code> 删除服务</li>\n<li>删除mysql注册表</li>\n</ol>"},{"title":"Java地基","_content":"\n<!-- more -->\n\n# 面向对象的三大特性\n* 继承\n* 封装\n* 多态\n\n## 平台无关性\n\n## 序列化\n\n# String、StringBuilder、StringBuffer\n\n# 抽象类和接口\n\n# 自定义注解\n\n## 反射\n\n## Session与Cookie\n\n## MVC设计思想\n","source":"_posts/20180618.md","raw":"---\ntitle: Java地基\ntags: Java\ncategories: 后端开发\n---\n\n<!-- more -->\n\n# 面向对象的三大特性\n* 继承\n* 封装\n* 多态\n\n## 平台无关性\n\n## 序列化\n\n# String、StringBuilder、StringBuffer\n\n# 抽象类和接口\n\n# 自定义注解\n\n## 反射\n\n## Session与Cookie\n\n## MVC设计思想\n","slug":"20180618","published":1,"date":"2018-09-05T01:34:04.298Z","updated":"2018-10-22T06:59:48.230Z","_id":"cjnaatg7g0008dwv3u2dtj7rk","comments":1,"layout":"post","photos":[],"link":"","content":"<a id=\"more\"></a>\n<h1 id=\"面向对象的三大特性\"><a href=\"#面向对象的三大特性\" class=\"headerlink\" title=\"面向对象的三大特性\"></a>面向对象的三大特性</h1><ul>\n<li>继承</li>\n<li>封装</li>\n<li>多态</li>\n</ul>\n<h2 id=\"平台无关性\"><a href=\"#平台无关性\" class=\"headerlink\" title=\"平台无关性\"></a>平台无关性</h2><h2 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h2><h1 id=\"String、StringBuilder、StringBuffer\"><a href=\"#String、StringBuilder、StringBuffer\" class=\"headerlink\" title=\"String、StringBuilder、StringBuffer\"></a>String、StringBuilder、StringBuffer</h1><h1 id=\"抽象类和接口\"><a href=\"#抽象类和接口\" class=\"headerlink\" title=\"抽象类和接口\"></a>抽象类和接口</h1><h1 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h1><h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><h2 id=\"Session与Cookie\"><a href=\"#Session与Cookie\" class=\"headerlink\" title=\"Session与Cookie\"></a>Session与Cookie</h2><h2 id=\"MVC设计思想\"><a href=\"#MVC设计思想\" class=\"headerlink\" title=\"MVC设计思想\"></a>MVC设计思想</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"面向对象的三大特性\"><a href=\"#面向对象的三大特性\" class=\"headerlink\" title=\"面向对象的三大特性\"></a>面向对象的三大特性</h1><ul>\n<li>继承</li>\n<li>封装</li>\n<li>多态</li>\n</ul>\n<h2 id=\"平台无关性\"><a href=\"#平台无关性\" class=\"headerlink\" title=\"平台无关性\"></a>平台无关性</h2><h2 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h2><h1 id=\"String、StringBuilder、StringBuffer\"><a href=\"#String、StringBuilder、StringBuffer\" class=\"headerlink\" title=\"String、StringBuilder、StringBuffer\"></a>String、StringBuilder、StringBuffer</h1><h1 id=\"抽象类和接口\"><a href=\"#抽象类和接口\" class=\"headerlink\" title=\"抽象类和接口\"></a>抽象类和接口</h1><h1 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h1><h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><h2 id=\"Session与Cookie\"><a href=\"#Session与Cookie\" class=\"headerlink\" title=\"Session与Cookie\"></a>Session与Cookie</h2><h2 id=\"MVC设计思想\"><a href=\"#MVC设计思想\" class=\"headerlink\" title=\"MVC设计思想\"></a>MVC设计思想</h2>"},{"title":"集合","_content":"\n在编程中，常常需要集中存放多个数据。从传统意义上讲，数组是我们的一个很好的选择，前提是我们事先已经明确知道我们将要保存的对象的数量。一旦在数组初始化时指定了这个数组长度，这个数组长度就是不可变的，如果我们需要保存一个可以动态增长的数据(在编译时无法确定具体的数量)，java的集合类就是一个很好的设计方案了。\n集合类主要负责保存、盛装其他数据，因此集合类也被称为容器类。所以的集合类都位于java.util包下，后来为了处理多线程环境下的并发安全问题，java5还在java.util.concurrent包下提供了一些多线程支持的集合类。\nJava容器类类库的用途是\"保存对象\"，并将其划分为两个不同的概念：\n* Collection\n一组\"对立\"的元素，通常这些元素都服从某种规则\n    * List必须保持元素特定的顺序\n    * Set不能有重复元素\n    * Queue保持一个队列(先进先出)的顺序\n* Map\n一组成对的\"键值对\"对象\n<!-- more -->\n\n# 集合与数组的区别\n* 数组：大小固定，只能存储相同数据类型的数据\n* 集合：大小可动态扩展，可以存储各种类型的数据\n\n# 数据结构\n数据结构的物理存储结构只有两种：顺序存储结构和链式存储结构（像栈，队列，树，图等是从逻辑结构去抽象的，映射到内存中，也这两种物理组织形式）\n* 数组\n采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(log n)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)\n* 链表\n对于链表的新增，删除等操作（在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)\n* 树\n    * 二叉树：对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(log n)。\n    * 红黑树\n* 哈希表\n不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)，增删改查的性能十分之高。 哈希表的主干是数组，比如我们要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作，即存储位置 = f(关键字)，其中，这个函数f一般称为哈希函数，这个函数的设计好坏会直接影响到哈希表的优劣。\n    * 哈希冲突：两个不同的元素，通过哈希函数得出的实际存储地址相同\n    解决方案有多种:开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），链地址法（数组 + 链表），再散列函数法。\n    \n# Collection\n单列集合,存储的元素是单独出现的\n## List\n有序（输出的顺序就是插入的顺序）并且允许重复，元素可以为null\n* ArrayList\n基于动态数组实现，查询快，增删慢\n* LinkedList\n基于双向链表实现，查询慢，增删快\n* Vector\n同ArrayList，但是线程安全的（使用Synchronized关键字），性能略低于ArrayList\n    * Stack\n    继承Vector,用于模拟“栈”，后进先出\n## Set\n无序（输出的顺序不一定是插入的顺序）并且不允许重复，元素有且只有一个可以为null\n* HashSet\n基于HashMap的key实现，value为同一个值，无序，具有良好的存取和查找性能。当向HashSet集合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据该HashCode值决定该对象在HashSet中的存储位置。值得主要的是，HashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等，并且两个对象的hashCode()方法的返回值相等。\n    * LinkedHashSet\n    基于LinkedHashMap实现，使用链表维护元素的次序，性能略低于HashSet\n* SortedSet（接口）\n    * TreeSet\n    基于TreeMap实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序\n* EnumSet（不常用）\nEnumSet中所有元素都必须是指定枚举类型的枚举值\n## Queue\n用于模拟“队列”，先进先出\n* PriorityQueue\n* Deque\n\n# Map\n双列集合，存储的元素是成对出现的\n用于存储键值对，根据键得到值，因此键不允许键重复,但允许值重复\n* HashMap（重点掌握工作原理及代码实现）\n基于哈希表实现。工作原理：简单来说，HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。所以，性能考虑，HashMap中的链表出现越少，性能才会越好。当链表长度为8的时候链表转换为红黑树（jdk1.8新增，之前为二叉树）查找的方式来优化性能。HashMap在并发环境下，可能会形成环状链表。Hash DOS攻击。\n    * LinkedHashMap\n    使用链表维护元素的次序，性能略低于HashMap\n* HashTable\n同HashMap,但是线程安全的，且键和值都不允许为null,性能略低于HashMap\n    * Properties \n    用于模拟“属性文件”\n* ConcurrentHashMap\n同HashMap，作为一种线程安全且高效的哈希表的解决方案，尤其是其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大。\n* SortedMap（接口）\n    * TreeMap\n    基于红黑树实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序\n* WeakHashMap\n与HashMap基本相似，但HashMap的key保留了对实际对象的\"强引用\",而WeakHashMap的key只保留了对实际对象的“弱引用”，影响垃圾回收\n* IdentityHashMap\n与HashMap基本相似，但当且仅当两个key严格相等(key1 == key2)时，IdentityHashMap才认为两个key相等\n* EnumMap\nEnumMap是一个与枚举类一起使用的Map实现，EnumMap中的所有key都必须是单个枚举类的枚举值。创建EnumMap时必须显式或隐式指定它对应的枚举类。EnumMap根据key的自然顺序(即枚举值在枚举类中的定义顺序)\n\n# 集合扩容机制\n1. HashMap（HashSet同HashMap） 、HashTable\n* HashMap\n初始容量：16\n扩容因子：0.75，即当 元素个数 超过 容量长度的0.75倍 并且发生Hash冲突时，进行扩容\n扩容后长度：原长度 * 2\n* HashTable\n初始容量：11\n扩容因子：同HashMap\n扩容后长度：原长度 * 2 + 1\n2. ArrayList、Vector\n* ArrayList\n初始容量：10\n扩容时机：即当 元素个数 超过 容量长度 时，进行扩容\n扩容后长度：原长度 * 1.5 + 1\n* Vector\n初始容量：10\n加载因子为1：即当 元素个数 超过 容量长度 时，进行扩容\n扩容后长度：原长度 * 2","source":"_posts/20180630.md","raw":"---\ntitle: 集合\ntags: Java\ncategories: 后端开发\n---\n\n在编程中，常常需要集中存放多个数据。从传统意义上讲，数组是我们的一个很好的选择，前提是我们事先已经明确知道我们将要保存的对象的数量。一旦在数组初始化时指定了这个数组长度，这个数组长度就是不可变的，如果我们需要保存一个可以动态增长的数据(在编译时无法确定具体的数量)，java的集合类就是一个很好的设计方案了。\n集合类主要负责保存、盛装其他数据，因此集合类也被称为容器类。所以的集合类都位于java.util包下，后来为了处理多线程环境下的并发安全问题，java5还在java.util.concurrent包下提供了一些多线程支持的集合类。\nJava容器类类库的用途是\"保存对象\"，并将其划分为两个不同的概念：\n* Collection\n一组\"对立\"的元素，通常这些元素都服从某种规则\n    * List必须保持元素特定的顺序\n    * Set不能有重复元素\n    * Queue保持一个队列(先进先出)的顺序\n* Map\n一组成对的\"键值对\"对象\n<!-- more -->\n\n# 集合与数组的区别\n* 数组：大小固定，只能存储相同数据类型的数据\n* 集合：大小可动态扩展，可以存储各种类型的数据\n\n# 数据结构\n数据结构的物理存储结构只有两种：顺序存储结构和链式存储结构（像栈，队列，树，图等是从逻辑结构去抽象的，映射到内存中，也这两种物理组织形式）\n* 数组\n采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(log n)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)\n* 链表\n对于链表的新增，删除等操作（在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)\n* 树\n    * 二叉树：对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(log n)。\n    * 红黑树\n* 哈希表\n不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)，增删改查的性能十分之高。 哈希表的主干是数组，比如我们要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作，即存储位置 = f(关键字)，其中，这个函数f一般称为哈希函数，这个函数的设计好坏会直接影响到哈希表的优劣。\n    * 哈希冲突：两个不同的元素，通过哈希函数得出的实际存储地址相同\n    解决方案有多种:开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），链地址法（数组 + 链表），再散列函数法。\n    \n# Collection\n单列集合,存储的元素是单独出现的\n## List\n有序（输出的顺序就是插入的顺序）并且允许重复，元素可以为null\n* ArrayList\n基于动态数组实现，查询快，增删慢\n* LinkedList\n基于双向链表实现，查询慢，增删快\n* Vector\n同ArrayList，但是线程安全的（使用Synchronized关键字），性能略低于ArrayList\n    * Stack\n    继承Vector,用于模拟“栈”，后进先出\n## Set\n无序（输出的顺序不一定是插入的顺序）并且不允许重复，元素有且只有一个可以为null\n* HashSet\n基于HashMap的key实现，value为同一个值，无序，具有良好的存取和查找性能。当向HashSet集合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据该HashCode值决定该对象在HashSet中的存储位置。值得主要的是，HashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等，并且两个对象的hashCode()方法的返回值相等。\n    * LinkedHashSet\n    基于LinkedHashMap实现，使用链表维护元素的次序，性能略低于HashSet\n* SortedSet（接口）\n    * TreeSet\n    基于TreeMap实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序\n* EnumSet（不常用）\nEnumSet中所有元素都必须是指定枚举类型的枚举值\n## Queue\n用于模拟“队列”，先进先出\n* PriorityQueue\n* Deque\n\n# Map\n双列集合，存储的元素是成对出现的\n用于存储键值对，根据键得到值，因此键不允许键重复,但允许值重复\n* HashMap（重点掌握工作原理及代码实现）\n基于哈希表实现。工作原理：简单来说，HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。所以，性能考虑，HashMap中的链表出现越少，性能才会越好。当链表长度为8的时候链表转换为红黑树（jdk1.8新增，之前为二叉树）查找的方式来优化性能。HashMap在并发环境下，可能会形成环状链表。Hash DOS攻击。\n    * LinkedHashMap\n    使用链表维护元素的次序，性能略低于HashMap\n* HashTable\n同HashMap,但是线程安全的，且键和值都不允许为null,性能略低于HashMap\n    * Properties \n    用于模拟“属性文件”\n* ConcurrentHashMap\n同HashMap，作为一种线程安全且高效的哈希表的解决方案，尤其是其中的\"分段锁\"的方案，相比HashTable的全表锁在性能上的提升非常之大。\n* SortedMap（接口）\n    * TreeMap\n    基于红黑树实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序\n* WeakHashMap\n与HashMap基本相似，但HashMap的key保留了对实际对象的\"强引用\",而WeakHashMap的key只保留了对实际对象的“弱引用”，影响垃圾回收\n* IdentityHashMap\n与HashMap基本相似，但当且仅当两个key严格相等(key1 == key2)时，IdentityHashMap才认为两个key相等\n* EnumMap\nEnumMap是一个与枚举类一起使用的Map实现，EnumMap中的所有key都必须是单个枚举类的枚举值。创建EnumMap时必须显式或隐式指定它对应的枚举类。EnumMap根据key的自然顺序(即枚举值在枚举类中的定义顺序)\n\n# 集合扩容机制\n1. HashMap（HashSet同HashMap） 、HashTable\n* HashMap\n初始容量：16\n扩容因子：0.75，即当 元素个数 超过 容量长度的0.75倍 并且发生Hash冲突时，进行扩容\n扩容后长度：原长度 * 2\n* HashTable\n初始容量：11\n扩容因子：同HashMap\n扩容后长度：原长度 * 2 + 1\n2. ArrayList、Vector\n* ArrayList\n初始容量：10\n扩容时机：即当 元素个数 超过 容量长度 时，进行扩容\n扩容后长度：原长度 * 1.5 + 1\n* Vector\n初始容量：10\n加载因子为1：即当 元素个数 超过 容量长度 时，进行扩容\n扩容后长度：原长度 * 2","slug":"20180630","published":1,"date":"2018-09-05T01:33:08.147Z","updated":"2018-10-22T02:27:59.704Z","_id":"cjnaatg7i0009dwv37cua4owm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在编程中，常常需要集中存放多个数据。从传统意义上讲，数组是我们的一个很好的选择，前提是我们事先已经明确知道我们将要保存的对象的数量。一旦在数组初始化时指定了这个数组长度，这个数组长度就是不可变的，如果我们需要保存一个可以动态增长的数据(在编译时无法确定具体的数量)，java的集合类就是一个很好的设计方案了。<br>集合类主要负责保存、盛装其他数据，因此集合类也被称为容器类。所以的集合类都位于java.util包下，后来为了处理多线程环境下的并发安全问题，java5还在java.util.concurrent包下提供了一些多线程支持的集合类。<br>Java容器类类库的用途是”保存对象”，并将其划分为两个不同的概念：</p>\n<ul>\n<li>Collection<br>一组”对立”的元素，通常这些元素都服从某种规则<ul>\n<li>List必须保持元素特定的顺序</li>\n<li>Set不能有重复元素</li>\n<li>Queue保持一个队列(先进先出)的顺序</li>\n</ul>\n</li>\n<li>Map<br>一组成对的”键值对”对象<a id=\"more\"></a>\n</li>\n</ul>\n<h1 id=\"集合与数组的区别\"><a href=\"#集合与数组的区别\" class=\"headerlink\" title=\"集合与数组的区别\"></a>集合与数组的区别</h1><ul>\n<li>数组：大小固定，只能存储相同数据类型的数据</li>\n<li>集合：大小可动态扩展，可以存储各种类型的数据</li>\n</ul>\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><p>数据结构的物理存储结构只有两种：顺序存储结构和链式存储结构（像栈，队列，树，图等是从逻辑结构去抽象的，映射到内存中，也这两种物理组织形式）</p>\n<ul>\n<li>数组<br>采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(log n)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)</li>\n<li>链表<br>对于链表的新增，删除等操作（在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)</li>\n<li>树<ul>\n<li>二叉树：对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(log n)。</li>\n<li>红黑树</li>\n</ul>\n</li>\n<li>哈希表<br>不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)，增删改查的性能十分之高。 哈希表的主干是数组，比如我们要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作，即存储位置 = f(关键字)，其中，这个函数f一般称为哈希函数，这个函数的设计好坏会直接影响到哈希表的优劣。<ul>\n<li>哈希冲突：两个不同的元素，通过哈希函数得出的实际存储地址相同<br>解决方案有多种:开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），链地址法（数组 + 链表），再散列函数法。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h1><p>单列集合,存储的元素是单独出现的</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>有序（输出的顺序就是插入的顺序）并且允许重复，元素可以为null</p>\n<ul>\n<li>ArrayList<br>基于动态数组实现，查询快，增删慢</li>\n<li>LinkedList<br>基于双向链表实现，查询慢，增删快</li>\n<li>Vector<br>同ArrayList，但是线程安全的（使用Synchronized关键字），性能略低于ArrayList<ul>\n<li>Stack<br>继承Vector,用于模拟“栈”，后进先出<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2>无序（输出的顺序不一定是插入的顺序）并且不允许重复，元素有且只有一个可以为null</li>\n</ul>\n</li>\n<li>HashSet<br>基于HashMap的key实现，value为同一个值，无序，具有良好的存取和查找性能。当向HashSet集合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据该HashCode值决定该对象在HashSet中的存储位置。值得主要的是，HashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等，并且两个对象的hashCode()方法的返回值相等。<ul>\n<li>LinkedHashSet<br>基于LinkedHashMap实现，使用链表维护元素的次序，性能略低于HashSet</li>\n</ul>\n</li>\n<li>SortedSet（接口）<ul>\n<li>TreeSet<br>基于TreeMap实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序</li>\n</ul>\n</li>\n<li>EnumSet（不常用）<br>EnumSet中所有元素都必须是指定枚举类型的枚举值<h2 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h2>用于模拟“队列”，先进先出</li>\n<li>PriorityQueue</li>\n<li>Deque</li>\n</ul>\n<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p>双列集合，存储的元素是成对出现的<br>用于存储键值对，根据键得到值，因此键不允许键重复,但允许值重复</p>\n<ul>\n<li>HashMap（重点掌握工作原理及代码实现）<br>基于哈希表实现。工作原理：简单来说，HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。所以，性能考虑，HashMap中的链表出现越少，性能才会越好。当链表长度为8的时候链表转换为红黑树（jdk1.8新增，之前为二叉树）查找的方式来优化性能。HashMap在并发环境下，可能会形成环状链表。Hash DOS攻击。<ul>\n<li>LinkedHashMap<br>使用链表维护元素的次序，性能略低于HashMap</li>\n</ul>\n</li>\n<li>HashTable<br>同HashMap,但是线程安全的，且键和值都不允许为null,性能略低于HashMap<ul>\n<li>Properties<br>用于模拟“属性文件”</li>\n</ul>\n</li>\n<li>ConcurrentHashMap<br>同HashMap，作为一种线程安全且高效的哈希表的解决方案，尤其是其中的”分段锁”的方案，相比HashTable的全表锁在性能上的提升非常之大。</li>\n<li>SortedMap（接口）<ul>\n<li>TreeMap<br>基于红黑树实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序</li>\n</ul>\n</li>\n<li>WeakHashMap<br>与HashMap基本相似，但HashMap的key保留了对实际对象的”强引用”,而WeakHashMap的key只保留了对实际对象的“弱引用”，影响垃圾回收</li>\n<li>IdentityHashMap<br>与HashMap基本相似，但当且仅当两个key严格相等(key1 == key2)时，IdentityHashMap才认为两个key相等</li>\n<li>EnumMap<br>EnumMap是一个与枚举类一起使用的Map实现，EnumMap中的所有key都必须是单个枚举类的枚举值。创建EnumMap时必须显式或隐式指定它对应的枚举类。EnumMap根据key的自然顺序(即枚举值在枚举类中的定义顺序)</li>\n</ul>\n<h1 id=\"集合扩容机制\"><a href=\"#集合扩容机制\" class=\"headerlink\" title=\"集合扩容机制\"></a>集合扩容机制</h1><ol>\n<li>HashMap（HashSet同HashMap） 、HashTable</li>\n</ol>\n<ul>\n<li>HashMap<br>初始容量：16<br>扩容因子：0.75，即当 元素个数 超过 容量长度的0.75倍 并且发生Hash冲突时，进行扩容<br>扩容后长度：原长度 * 2</li>\n<li>HashTable<br>初始容量：11<br>扩容因子：同HashMap<br>扩容后长度：原长度 * 2 + 1</li>\n</ul>\n<ol>\n<li>ArrayList、Vector</li>\n</ol>\n<ul>\n<li>ArrayList<br>初始容量：10<br>扩容时机：即当 元素个数 超过 容量长度 时，进行扩容<br>扩容后长度：原长度 * 1.5 + 1</li>\n<li>Vector<br>初始容量：10<br>加载因子为1：即当 元素个数 超过 容量长度 时，进行扩容<br>扩容后长度：原长度 * 2</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在编程中，常常需要集中存放多个数据。从传统意义上讲，数组是我们的一个很好的选择，前提是我们事先已经明确知道我们将要保存的对象的数量。一旦在数组初始化时指定了这个数组长度，这个数组长度就是不可变的，如果我们需要保存一个可以动态增长的数据(在编译时无法确定具体的数量)，java的集合类就是一个很好的设计方案了。<br>集合类主要负责保存、盛装其他数据，因此集合类也被称为容器类。所以的集合类都位于java.util包下，后来为了处理多线程环境下的并发安全问题，java5还在java.util.concurrent包下提供了一些多线程支持的集合类。<br>Java容器类类库的用途是”保存对象”，并将其划分为两个不同的概念：</p>\n<ul>\n<li>Collection<br>一组”对立”的元素，通常这些元素都服从某种规则<ul>\n<li>List必须保持元素特定的顺序</li>\n<li>Set不能有重复元素</li>\n<li>Queue保持一个队列(先进先出)的顺序</li>\n</ul>\n</li>\n<li>Map<br>一组成对的”键值对”对象","more":"</li>\n</ul>\n<h1 id=\"集合与数组的区别\"><a href=\"#集合与数组的区别\" class=\"headerlink\" title=\"集合与数组的区别\"></a>集合与数组的区别</h1><ul>\n<li>数组：大小固定，只能存储相同数据类型的数据</li>\n<li>集合：大小可动态扩展，可以存储各种类型的数据</li>\n</ul>\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><p>数据结构的物理存储结构只有两种：顺序存储结构和链式存储结构（像栈，队列，树，图等是从逻辑结构去抽象的，映射到内存中，也这两种物理组织形式）</p>\n<ul>\n<li>数组<br>采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(log n)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)</li>\n<li>链表<br>对于链表的新增，删除等操作（在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)</li>\n<li>树<ul>\n<li>二叉树：对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(log n)。</li>\n<li>红黑树</li>\n</ul>\n</li>\n<li>哈希表<br>不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)，增删改查的性能十分之高。 哈希表的主干是数组，比如我们要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作，即存储位置 = f(关键字)，其中，这个函数f一般称为哈希函数，这个函数的设计好坏会直接影响到哈希表的优劣。<ul>\n<li>哈希冲突：两个不同的元素，通过哈希函数得出的实际存储地址相同<br>解决方案有多种:开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），链地址法（数组 + 链表），再散列函数法。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h1><p>单列集合,存储的元素是单独出现的</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>有序（输出的顺序就是插入的顺序）并且允许重复，元素可以为null</p>\n<ul>\n<li>ArrayList<br>基于动态数组实现，查询快，增删慢</li>\n<li>LinkedList<br>基于双向链表实现，查询慢，增删快</li>\n<li>Vector<br>同ArrayList，但是线程安全的（使用Synchronized关键字），性能略低于ArrayList<ul>\n<li>Stack<br>继承Vector,用于模拟“栈”，后进先出<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2>无序（输出的顺序不一定是插入的顺序）并且不允许重复，元素有且只有一个可以为null</li>\n</ul>\n</li>\n<li>HashSet<br>基于HashMap的key实现，value为同一个值，无序，具有良好的存取和查找性能。当向HashSet集合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据该HashCode值决定该对象在HashSet中的存储位置。值得主要的是，HashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等，并且两个对象的hashCode()方法的返回值相等。<ul>\n<li>LinkedHashSet<br>基于LinkedHashMap实现，使用链表维护元素的次序，性能略低于HashSet</li>\n</ul>\n</li>\n<li>SortedSet（接口）<ul>\n<li>TreeSet<br>基于TreeMap实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序</li>\n</ul>\n</li>\n<li>EnumSet（不常用）<br>EnumSet中所有元素都必须是指定枚举类型的枚举值<h2 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h2>用于模拟“队列”，先进先出</li>\n<li>PriorityQueue</li>\n<li>Deque</li>\n</ul>\n<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p>双列集合，存储的元素是成对出现的<br>用于存储键值对，根据键得到值，因此键不允许键重复,但允许值重复</p>\n<ul>\n<li>HashMap（重点掌握工作原理及代码实现）<br>基于哈希表实现。工作原理：简单来说，HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。所以，性能考虑，HashMap中的链表出现越少，性能才会越好。当链表长度为8的时候链表转换为红黑树（jdk1.8新增，之前为二叉树）查找的方式来优化性能。HashMap在并发环境下，可能会形成环状链表。Hash DOS攻击。<ul>\n<li>LinkedHashMap<br>使用链表维护元素的次序，性能略低于HashMap</li>\n</ul>\n</li>\n<li>HashTable<br>同HashMap,但是线程安全的，且键和值都不允许为null,性能略低于HashMap<ul>\n<li>Properties<br>用于模拟“属性文件”</li>\n</ul>\n</li>\n<li>ConcurrentHashMap<br>同HashMap，作为一种线程安全且高效的哈希表的解决方案，尤其是其中的”分段锁”的方案，相比HashTable的全表锁在性能上的提升非常之大。</li>\n<li>SortedMap（接口）<ul>\n<li>TreeMap<br>基于红黑树实现，可以确保集合元素处于排序状态，支持两种排序方式：自然排序或定制排序</li>\n</ul>\n</li>\n<li>WeakHashMap<br>与HashMap基本相似，但HashMap的key保留了对实际对象的”强引用”,而WeakHashMap的key只保留了对实际对象的“弱引用”，影响垃圾回收</li>\n<li>IdentityHashMap<br>与HashMap基本相似，但当且仅当两个key严格相等(key1 == key2)时，IdentityHashMap才认为两个key相等</li>\n<li>EnumMap<br>EnumMap是一个与枚举类一起使用的Map实现，EnumMap中的所有key都必须是单个枚举类的枚举值。创建EnumMap时必须显式或隐式指定它对应的枚举类。EnumMap根据key的自然顺序(即枚举值在枚举类中的定义顺序)</li>\n</ul>\n<h1 id=\"集合扩容机制\"><a href=\"#集合扩容机制\" class=\"headerlink\" title=\"集合扩容机制\"></a>集合扩容机制</h1><ol>\n<li>HashMap（HashSet同HashMap） 、HashTable</li>\n</ol>\n<ul>\n<li>HashMap<br>初始容量：16<br>扩容因子：0.75，即当 元素个数 超过 容量长度的0.75倍 并且发生Hash冲突时，进行扩容<br>扩容后长度：原长度 * 2</li>\n<li>HashTable<br>初始容量：11<br>扩容因子：同HashMap<br>扩容后长度：原长度 * 2 + 1</li>\n</ul>\n<ol>\n<li>ArrayList、Vector</li>\n</ol>\n<ul>\n<li>ArrayList<br>初始容量：10<br>扩容时机：即当 元素个数 超过 容量长度 时，进行扩容<br>扩容后长度：原长度 * 1.5 + 1</li>\n<li>Vector<br>初始容量：10<br>加载因子为1：即当 元素个数 超过 容量长度 时，进行扩容<br>扩容后长度：原长度 * 2</li>\n</ul>"},{"title":"开源框架","_content":"\n一般做框架的想法是出于以下几种考虑的\n* 目前现有的解决方案已经不能有效解决出现的问题，需要一个全新的框架和技术理论来处理\n* 现在的问题大部分都能解决，但是对于特定的问题还没有方便的处理方式，只是需要一个更好或者更方便的解决特定问题的办法\n所以要么做通用的框架，这种框架有非常好的扩展性，能够适应不同的应用场景；要么做一个针对特定应用场景的框架，让框架本身能够继承一些特定服务以简化开发。\n<!-- more -->\n\n# Spring\n## 设计理念\nJava是面向对象编程，而Spring是面向Bean编程。\n构建一个数据结构，然后根据这个结构设计它的生存环境，并让它在这个环境中按照一定的规律不停的运动，在它们的不停运动中设计一个系列与环境或者与其他个体完成信息交换。、\n\n## 核心组件\n### Bean（演员）\nBean的创建是典型的工厂模式，它的顶级接口是BeanFactory。\nBean的定义\nBean的解析\n* 作用域\n    * singleton（默认作用域）\n    单例模式，Spring IoC容器中只会存在一个共享的Bean实例，无论有多少个Bean引用它，始终指向同一对象。Singleton作用域是Spring中的缺省作用域\n    * prototype\n    原型模式，每次通过Spring容器获取prototype定义的bean时，容器都将创建一个新的Bean实例，每个Bean实例都有自己的属性和状态，而singleton全局只有一个对象。根据经验，对有状态的bean使用prototype作用域，而对无状态的bean使用singleton作用域\n    * request\n    在一次Http请求中，容器会返回该Bean的同一实例。而对不同的Http请求则会产生新的Bean，而且该bean仅在当前Http Request内有效\n    * session\n    在一次Http Session中，容器会返回该Bean的同一实例。而对不同的Session请求则会创建新的实例，该bean实例仅在当前Session内有效\n    * global session\n    在一个全局的Http Session中，容器会返回该Bean的同一个实例，仅在使用portlet context时有效\n* 生命周期\n    1. 实例化一个Bean，也就是我们通常说的new    \n    2. 按照Spring上下文对实例化的Bean进行配置，也就是IOC注入    \n    3. 如果这个Bean实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的是Spring配置文件中Bean的ID    \n    4. 如果这个Bean实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()，传递的是Spring工厂本身（可以用这个方法获取到其他Bean）    \n    5. 如果这个Bean实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文，该方式同样可以实现步骤4，但比4更好，以为ApplicationContext是BeanFactory的子接口，有更多的实现方法 \n    6. 如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor经常被用作是Bean内容的更改，并且由于这个是在Bean初始化结束时调用After方法，也可用于内存或缓存技术   \n    7. 如果这个Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法  \n    8. 如果这个Bean关联了BeanPostProcessor接口，将会调用postAfterInitialization(Object obj, String s)方法    \n    9. 当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean接口，会调用其实现的destroy方法   \n    10. 最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法    \n### Context（舞台）\nBeanFactory和ApplicationContext的区别\nApplicationContext是Context的顶级父类，标识一个应用环境的基本信息，继承了BeanFactory。\n### Core（道具）\nResource，定义类资源的访问方式，把所有的资源都抽象成一个接口。\n    \n## DI（重点掌握）\nIOC:控制反转,是一种设计思想，可以用来降低代码之间的耦合度。传统JavaSE程序设计，是程序主动去创建和获取依赖对象，而在Spring中，由IOC容器负责对象的创建及注入。\nDI:依赖注入,IOC的一种实现方式，基于反射实现，一般通过构造器或setter方法注入。\n用@Service、@Repository等注解标识类为Bean，用@Resource标识自动注入。\n工厂模式\n实现原理\n\n## AOP（重点掌握）\n面向切面编程（AOP）是解决特定问题的一种编程范式，核心目的是为了分离功能性需求和非功能性需求\n* 应用场景：事务控制、权限控制、缓存控制、审计日志、异常处理、性能监控、分布式追踪等\n* 实现原理：基于动态代理实现。\nJDK动态代理只能对实现了接口的类生成代理，而不能针对类，CGLib是针对类实现代理，底层采用ASM字节码生成代理类，主要是对指定的类生成一个子类，覆盖其中的方法（继承）。jdk6之前，CGLib比JDK代理效率高，之后JDK代理效率要高于CGLib。故当Bean实现接口时，Spring就会用JDK的动态代理，当Bean没有实现接口时，Spring使用CGLib是实现，可以强制使用CGLib。\n* 好处：集中处理某一关注点/横切逻辑；可以很方便地添加/删除关注点；侵入性少，增强代码可读性及可维护性\n* 相关概念：\n    1. 切面（aspect）\n    切面是一个关注点的模块化，这个关注点可能是横切多个对象，Spring中常使用@Aspect注解一个类使其称为一个切面。\n    2. 连接点（join point）\n    连接点是指在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候\n    3. 通知（advice）\n    指在切面的某个特定的连接点上执行的动作\n    通知类型：\n        * 前置通知\n        * 后置通知\n        * 返回通知\n        * 异常通知\n        * 环绕通知\n    4. 切点（pointcut）\n    指匹配连接点的断言。通知与一个切入点表达式关联，并在满足这个切入的连接点上运行，例如：当执行某个特定的名称的方法\n    5. 目标对象（Target Object）\n    目标对象是被一个或者多个切面所通知的对象\n    6. AOP代理（AOP Proxy）\n    AOP代理是指AOP框架创建的对对象，用来实现切面契约（包括通知方法等功能）\n    7. 织入（weave）\n    指把切面连接到其他应用出程序类型或者对象上，并创建一个被通知的对象。或者说形成代理对象的方法的过程\n\n## 事务\n* 实现方式\n\n* 传播机制\n    * PROPAGATION_REQUIRED\n    表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务\n    * PROPAGATION_SUPPORTS\n    表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行\n    * PROPAGATION_MANDATORY\n    表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常\n    * PROPAGATION_REQUIRED_NEW\n    表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\n    * PROPAGATION_NOT_SUPPORTED\n    表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\n    * PROPAGATION_NEVER\n    表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常\n    * PROPAGATION_NESTED\n    表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。注意各厂商对这种传播行为的支持是有所差异的。可以参考资源管理器的文档来确认它们是否支持嵌套事务\n* 隔离级别\n    * ISOLATION_DEFAULT：使用数据库默认的隔离级别\n    * ISOLATION_READ_UNCOMMITTED：允许读取改变了的还未提交的数据，可能导致脏读、不可重复读和幻读\n    * ISOLATION_READ COMMITTED：允许并发事务提交之后读取，可以避免脏读，可能导致重复读和幻读\n    * ISOLATION_REPEATABLE_READ：对相同字段的多次读取结果一致，可导致幻读\n    * ISOLATION_SERIALIZABLE：完全服从ACID的原则，确保不发生脏读、不可重复读和幻读\n* 底层原理\n基于AOP实现\n* 常见问题\nSpring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑。\n\n## Spring Data JPA\n\n# SpringMVC\n## 运行流程\n* 用户发送请求至前端控制器DispatcherServlet\n* DispatcherServlet收到请求调用HandlerMapping处理器映射器。\n* 处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果没有则生成)一并返回给DispatcherServlet。\n* DispatcherServlet通过HandlerAdapter处理器适配器调用处理器\n* 执行处理器(Controller，也叫后端控制器)执行完成返回ModelAndView。\n* HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet\n* DispatcherServlet将ModelAndView传给ViewResolver视图解析器\n* ViewResolver解析后返回具体View\n* DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。\n* DispatcherServlet响应用户\n## 启动流程\n* initMultipartResolver：用于处理文件上传服务\n* initLocaleResolver：用于处理应用的国际化问题\n* initThemeResolver：用于定义一个主题\n* initHandlerMappings：用于定义用户设置的请求映射关系\n* initHandlerAdapter：用于根据Handler的类型定义不同的处理规则\n* initHandlerExceptionResolver：当Handler处理出错时，会通过这个Handler来统一处理\n* initRequestToViewNameTranslator：将指定的ViewName按照定义的requestToViewNameTranslator替换成想要的格式，如加上前缀或者后缀\n* initViewResolvers：用于将View解析成页面\n\n# Hibernate\n\n# MyBatis\n* 实现原理\nMyBatis通过SQL Map将Java对象映射成SQL语句，将结果集再转化成Java对象。\n\n# SpringBoot\n* 优点：\n    * 去除了大量的xml配置文件（相对于Spring、SpringMVC来说）\n    * 简化复杂的依赖管理（各个框架的各种版本）\n    * 配合各种starter使用，基本上可以做到自动化配置（各个框架的各种配置）\n    * 快速启动容器\n* 缺点：\n     * 从原来的xml配置方式转换到JAVA配置方式变化有点大，不太适应\n     * Spring Boot比较适合做微服务，不适合做比较大型的项目。\n\n# 官方文档\n## Spring Framework\n[官方文档](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/)\n## Spring Data Jpa\n[官方文档](https://docs.spring.io/spring-data/data-jpa/docs/current/reference/html/)\n## Spring Boot\n* [官方文档](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/)\n* [文章](https://blog.csdn.net/fly_zhyu/article/details/76407830)","source":"_posts/20180720.md","raw":"---\ntitle: 开源框架\ntags: [Spring,SpringMVC,Hibernate,MyBatis,Spring Boot]\ncategories: 后端开发    \n---\n\n一般做框架的想法是出于以下几种考虑的\n* 目前现有的解决方案已经不能有效解决出现的问题，需要一个全新的框架和技术理论来处理\n* 现在的问题大部分都能解决，但是对于特定的问题还没有方便的处理方式，只是需要一个更好或者更方便的解决特定问题的办法\n所以要么做通用的框架，这种框架有非常好的扩展性，能够适应不同的应用场景；要么做一个针对特定应用场景的框架，让框架本身能够继承一些特定服务以简化开发。\n<!-- more -->\n\n# Spring\n## 设计理念\nJava是面向对象编程，而Spring是面向Bean编程。\n构建一个数据结构，然后根据这个结构设计它的生存环境，并让它在这个环境中按照一定的规律不停的运动，在它们的不停运动中设计一个系列与环境或者与其他个体完成信息交换。、\n\n## 核心组件\n### Bean（演员）\nBean的创建是典型的工厂模式，它的顶级接口是BeanFactory。\nBean的定义\nBean的解析\n* 作用域\n    * singleton（默认作用域）\n    单例模式，Spring IoC容器中只会存在一个共享的Bean实例，无论有多少个Bean引用它，始终指向同一对象。Singleton作用域是Spring中的缺省作用域\n    * prototype\n    原型模式，每次通过Spring容器获取prototype定义的bean时，容器都将创建一个新的Bean实例，每个Bean实例都有自己的属性和状态，而singleton全局只有一个对象。根据经验，对有状态的bean使用prototype作用域，而对无状态的bean使用singleton作用域\n    * request\n    在一次Http请求中，容器会返回该Bean的同一实例。而对不同的Http请求则会产生新的Bean，而且该bean仅在当前Http Request内有效\n    * session\n    在一次Http Session中，容器会返回该Bean的同一实例。而对不同的Session请求则会创建新的实例，该bean实例仅在当前Session内有效\n    * global session\n    在一个全局的Http Session中，容器会返回该Bean的同一个实例，仅在使用portlet context时有效\n* 生命周期\n    1. 实例化一个Bean，也就是我们通常说的new    \n    2. 按照Spring上下文对实例化的Bean进行配置，也就是IOC注入    \n    3. 如果这个Bean实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的是Spring配置文件中Bean的ID    \n    4. 如果这个Bean实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()，传递的是Spring工厂本身（可以用这个方法获取到其他Bean）    \n    5. 如果这个Bean实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文，该方式同样可以实现步骤4，但比4更好，以为ApplicationContext是BeanFactory的子接口，有更多的实现方法 \n    6. 如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor经常被用作是Bean内容的更改，并且由于这个是在Bean初始化结束时调用After方法，也可用于内存或缓存技术   \n    7. 如果这个Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法  \n    8. 如果这个Bean关联了BeanPostProcessor接口，将会调用postAfterInitialization(Object obj, String s)方法    \n    9. 当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean接口，会调用其实现的destroy方法   \n    10. 最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法    \n### Context（舞台）\nBeanFactory和ApplicationContext的区别\nApplicationContext是Context的顶级父类，标识一个应用环境的基本信息，继承了BeanFactory。\n### Core（道具）\nResource，定义类资源的访问方式，把所有的资源都抽象成一个接口。\n    \n## DI（重点掌握）\nIOC:控制反转,是一种设计思想，可以用来降低代码之间的耦合度。传统JavaSE程序设计，是程序主动去创建和获取依赖对象，而在Spring中，由IOC容器负责对象的创建及注入。\nDI:依赖注入,IOC的一种实现方式，基于反射实现，一般通过构造器或setter方法注入。\n用@Service、@Repository等注解标识类为Bean，用@Resource标识自动注入。\n工厂模式\n实现原理\n\n## AOP（重点掌握）\n面向切面编程（AOP）是解决特定问题的一种编程范式，核心目的是为了分离功能性需求和非功能性需求\n* 应用场景：事务控制、权限控制、缓存控制、审计日志、异常处理、性能监控、分布式追踪等\n* 实现原理：基于动态代理实现。\nJDK动态代理只能对实现了接口的类生成代理，而不能针对类，CGLib是针对类实现代理，底层采用ASM字节码生成代理类，主要是对指定的类生成一个子类，覆盖其中的方法（继承）。jdk6之前，CGLib比JDK代理效率高，之后JDK代理效率要高于CGLib。故当Bean实现接口时，Spring就会用JDK的动态代理，当Bean没有实现接口时，Spring使用CGLib是实现，可以强制使用CGLib。\n* 好处：集中处理某一关注点/横切逻辑；可以很方便地添加/删除关注点；侵入性少，增强代码可读性及可维护性\n* 相关概念：\n    1. 切面（aspect）\n    切面是一个关注点的模块化，这个关注点可能是横切多个对象，Spring中常使用@Aspect注解一个类使其称为一个切面。\n    2. 连接点（join point）\n    连接点是指在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候\n    3. 通知（advice）\n    指在切面的某个特定的连接点上执行的动作\n    通知类型：\n        * 前置通知\n        * 后置通知\n        * 返回通知\n        * 异常通知\n        * 环绕通知\n    4. 切点（pointcut）\n    指匹配连接点的断言。通知与一个切入点表达式关联，并在满足这个切入的连接点上运行，例如：当执行某个特定的名称的方法\n    5. 目标对象（Target Object）\n    目标对象是被一个或者多个切面所通知的对象\n    6. AOP代理（AOP Proxy）\n    AOP代理是指AOP框架创建的对对象，用来实现切面契约（包括通知方法等功能）\n    7. 织入（weave）\n    指把切面连接到其他应用出程序类型或者对象上，并创建一个被通知的对象。或者说形成代理对象的方法的过程\n\n## 事务\n* 实现方式\n\n* 传播机制\n    * PROPAGATION_REQUIRED\n    表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务\n    * PROPAGATION_SUPPORTS\n    表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行\n    * PROPAGATION_MANDATORY\n    表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常\n    * PROPAGATION_REQUIRED_NEW\n    表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\n    * PROPAGATION_NOT_SUPPORTED\n    表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\n    * PROPAGATION_NEVER\n    表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常\n    * PROPAGATION_NESTED\n    表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。注意各厂商对这种传播行为的支持是有所差异的。可以参考资源管理器的文档来确认它们是否支持嵌套事务\n* 隔离级别\n    * ISOLATION_DEFAULT：使用数据库默认的隔离级别\n    * ISOLATION_READ_UNCOMMITTED：允许读取改变了的还未提交的数据，可能导致脏读、不可重复读和幻读\n    * ISOLATION_READ COMMITTED：允许并发事务提交之后读取，可以避免脏读，可能导致重复读和幻读\n    * ISOLATION_REPEATABLE_READ：对相同字段的多次读取结果一致，可导致幻读\n    * ISOLATION_SERIALIZABLE：完全服从ACID的原则，确保不发生脏读、不可重复读和幻读\n* 底层原理\n基于AOP实现\n* 常见问题\nSpring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑。\n\n## Spring Data JPA\n\n# SpringMVC\n## 运行流程\n* 用户发送请求至前端控制器DispatcherServlet\n* DispatcherServlet收到请求调用HandlerMapping处理器映射器。\n* 处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果没有则生成)一并返回给DispatcherServlet。\n* DispatcherServlet通过HandlerAdapter处理器适配器调用处理器\n* 执行处理器(Controller，也叫后端控制器)执行完成返回ModelAndView。\n* HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet\n* DispatcherServlet将ModelAndView传给ViewResolver视图解析器\n* ViewResolver解析后返回具体View\n* DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。\n* DispatcherServlet响应用户\n## 启动流程\n* initMultipartResolver：用于处理文件上传服务\n* initLocaleResolver：用于处理应用的国际化问题\n* initThemeResolver：用于定义一个主题\n* initHandlerMappings：用于定义用户设置的请求映射关系\n* initHandlerAdapter：用于根据Handler的类型定义不同的处理规则\n* initHandlerExceptionResolver：当Handler处理出错时，会通过这个Handler来统一处理\n* initRequestToViewNameTranslator：将指定的ViewName按照定义的requestToViewNameTranslator替换成想要的格式，如加上前缀或者后缀\n* initViewResolvers：用于将View解析成页面\n\n# Hibernate\n\n# MyBatis\n* 实现原理\nMyBatis通过SQL Map将Java对象映射成SQL语句，将结果集再转化成Java对象。\n\n# SpringBoot\n* 优点：\n    * 去除了大量的xml配置文件（相对于Spring、SpringMVC来说）\n    * 简化复杂的依赖管理（各个框架的各种版本）\n    * 配合各种starter使用，基本上可以做到自动化配置（各个框架的各种配置）\n    * 快速启动容器\n* 缺点：\n     * 从原来的xml配置方式转换到JAVA配置方式变化有点大，不太适应\n     * Spring Boot比较适合做微服务，不适合做比较大型的项目。\n\n# 官方文档\n## Spring Framework\n[官方文档](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/)\n## Spring Data Jpa\n[官方文档](https://docs.spring.io/spring-data/data-jpa/docs/current/reference/html/)\n## Spring Boot\n* [官方文档](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/)\n* [文章](https://blog.csdn.net/fly_zhyu/article/details/76407830)","slug":"20180720","published":1,"date":"2018-09-05T01:33:08.148Z","updated":"2018-10-22T07:00:08.261Z","_id":"cjnaatg7p000ddwv3mvaombhi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一般做框架的想法是出于以下几种考虑的</p>\n<ul>\n<li>目前现有的解决方案已经不能有效解决出现的问题，需要一个全新的框架和技术理论来处理</li>\n<li>现在的问题大部分都能解决，但是对于特定的问题还没有方便的处理方式，只是需要一个更好或者更方便的解决特定问题的办法<br>所以要么做通用的框架，这种框架有非常好的扩展性，能够适应不同的应用场景；要么做一个针对特定应用场景的框架，让框架本身能够继承一些特定服务以简化开发。<a id=\"more\"></a>\n</li>\n</ul>\n<h1 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h1><h2 id=\"设计理念\"><a href=\"#设计理念\" class=\"headerlink\" title=\"设计理念\"></a>设计理念</h2><p>Java是面向对象编程，而Spring是面向Bean编程。<br>构建一个数据结构，然后根据这个结构设计它的生存环境，并让它在这个环境中按照一定的规律不停的运动，在它们的不停运动中设计一个系列与环境或者与其他个体完成信息交换。、</p>\n<h2 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h2><h3 id=\"Bean（演员）\"><a href=\"#Bean（演员）\" class=\"headerlink\" title=\"Bean（演员）\"></a>Bean（演员）</h3><p>Bean的创建是典型的工厂模式，它的顶级接口是BeanFactory。<br>Bean的定义<br>Bean的解析</p>\n<ul>\n<li>作用域<ul>\n<li>singleton（默认作用域）<br>单例模式，Spring IoC容器中只会存在一个共享的Bean实例，无论有多少个Bean引用它，始终指向同一对象。Singleton作用域是Spring中的缺省作用域</li>\n<li>prototype<br>原型模式，每次通过Spring容器获取prototype定义的bean时，容器都将创建一个新的Bean实例，每个Bean实例都有自己的属性和状态，而singleton全局只有一个对象。根据经验，对有状态的bean使用prototype作用域，而对无状态的bean使用singleton作用域</li>\n<li>request<br>在一次Http请求中，容器会返回该Bean的同一实例。而对不同的Http请求则会产生新的Bean，而且该bean仅在当前Http Request内有效</li>\n<li>session<br>在一次Http Session中，容器会返回该Bean的同一实例。而对不同的Session请求则会创建新的实例，该bean实例仅在当前Session内有效</li>\n<li>global session<br>在一个全局的Http Session中，容器会返回该Bean的同一个实例，仅在使用portlet context时有效</li>\n</ul>\n</li>\n<li>生命周期<ol>\n<li>实例化一个Bean，也就是我们通常说的new    </li>\n<li>按照Spring上下文对实例化的Bean进行配置，也就是IOC注入    </li>\n<li>如果这个Bean实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的是Spring配置文件中Bean的ID    </li>\n<li>如果这个Bean实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()，传递的是Spring工厂本身（可以用这个方法获取到其他Bean）    </li>\n<li>如果这个Bean实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文，该方式同样可以实现步骤4，但比4更好，以为ApplicationContext是BeanFactory的子接口，有更多的实现方法 </li>\n<li>如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor经常被用作是Bean内容的更改，并且由于这个是在Bean初始化结束时调用After方法，也可用于内存或缓存技术   </li>\n<li>如果这个Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法  </li>\n<li>如果这个Bean关联了BeanPostProcessor接口，将会调用postAfterInitialization(Object obj, String s)方法    </li>\n<li>当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean接口，会调用其实现的destroy方法   </li>\n<li>最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法    <h3 id=\"Context（舞台）\"><a href=\"#Context（舞台）\" class=\"headerlink\" title=\"Context（舞台）\"></a>Context（舞台）</h3>BeanFactory和ApplicationContext的区别<br>ApplicationContext是Context的顶级父类，标识一个应用环境的基本信息，继承了BeanFactory。<h3 id=\"Core（道具）\"><a href=\"#Core（道具）\" class=\"headerlink\" title=\"Core（道具）\"></a>Core（道具）</h3>Resource，定义类资源的访问方式，把所有的资源都抽象成一个接口。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"DI（重点掌握）\"><a href=\"#DI（重点掌握）\" class=\"headerlink\" title=\"DI（重点掌握）\"></a>DI（重点掌握）</h2><p>IOC:控制反转,是一种设计思想，可以用来降低代码之间的耦合度。传统JavaSE程序设计，是程序主动去创建和获取依赖对象，而在Spring中，由IOC容器负责对象的创建及注入。<br>DI:依赖注入,IOC的一种实现方式，基于反射实现，一般通过构造器或setter方法注入。<br>用@Service、@Repository等注解标识类为Bean，用@Resource标识自动注入。<br>工厂模式<br>实现原理</p>\n<h2 id=\"AOP（重点掌握）\"><a href=\"#AOP（重点掌握）\" class=\"headerlink\" title=\"AOP（重点掌握）\"></a>AOP（重点掌握）</h2><p>面向切面编程（AOP）是解决特定问题的一种编程范式，核心目的是为了分离功能性需求和非功能性需求</p>\n<ul>\n<li>应用场景：事务控制、权限控制、缓存控制、审计日志、异常处理、性能监控、分布式追踪等</li>\n<li>实现原理：基于动态代理实现。<br>JDK动态代理只能对实现了接口的类生成代理，而不能针对类，CGLib是针对类实现代理，底层采用ASM字节码生成代理类，主要是对指定的类生成一个子类，覆盖其中的方法（继承）。jdk6之前，CGLib比JDK代理效率高，之后JDK代理效率要高于CGLib。故当Bean实现接口时，Spring就会用JDK的动态代理，当Bean没有实现接口时，Spring使用CGLib是实现，可以强制使用CGLib。</li>\n<li>好处：集中处理某一关注点/横切逻辑；可以很方便地添加/删除关注点；侵入性少，增强代码可读性及可维护性</li>\n<li>相关概念：<ol>\n<li>切面（aspect）<br>切面是一个关注点的模块化，这个关注点可能是横切多个对象，Spring中常使用@Aspect注解一个类使其称为一个切面。</li>\n<li>连接点（join point）<br>连接点是指在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候</li>\n<li>通知（advice）<br>指在切面的某个特定的连接点上执行的动作<br>通知类型：<ul>\n<li>前置通知</li>\n<li>后置通知</li>\n<li>返回通知</li>\n<li>异常通知</li>\n<li>环绕通知</li>\n</ul>\n</li>\n<li>切点（pointcut）<br>指匹配连接点的断言。通知与一个切入点表达式关联，并在满足这个切入的连接点上运行，例如：当执行某个特定的名称的方法</li>\n<li>目标对象（Target Object）<br>目标对象是被一个或者多个切面所通知的对象</li>\n<li>AOP代理（AOP Proxy）<br>AOP代理是指AOP框架创建的对对象，用来实现切面契约（包括通知方法等功能）</li>\n<li>织入（weave）<br>指把切面连接到其他应用出程序类型或者对象上，并创建一个被通知的对象。或者说形成代理对象的方法的过程</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><ul>\n<li><p>实现方式</p>\n</li>\n<li><p>传播机制</p>\n<ul>\n<li>PROPAGATION_REQUIRED<br>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务</li>\n<li>PROPAGATION_SUPPORTS<br>表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行</li>\n<li>PROPAGATION_MANDATORY<br>表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常</li>\n<li>PROPAGATION_REQUIRED_NEW<br>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</li>\n<li>PROPAGATION_NOT_SUPPORTED<br>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</li>\n<li>PROPAGATION_NEVER<br>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</li>\n<li>PROPAGATION_NESTED<br>表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。注意各厂商对这种传播行为的支持是有所差异的。可以参考资源管理器的文档来确认它们是否支持嵌套事务</li>\n</ul>\n</li>\n<li>隔离级别<ul>\n<li>ISOLATION_DEFAULT：使用数据库默认的隔离级别</li>\n<li>ISOLATION_READ_UNCOMMITTED：允许读取改变了的还未提交的数据，可能导致脏读、不可重复读和幻读</li>\n<li>ISOLATION_READ COMMITTED：允许并发事务提交之后读取，可以避免脏读，可能导致重复读和幻读</li>\n<li>ISOLATION_REPEATABLE_READ：对相同字段的多次读取结果一致，可导致幻读</li>\n<li>ISOLATION_SERIALIZABLE：完全服从ACID的原则，确保不发生脏读、不可重复读和幻读</li>\n</ul>\n</li>\n<li>底层原理<br>基于AOP实现</li>\n<li>常见问题<br>Spring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑。</li>\n</ul>\n<h2 id=\"Spring-Data-JPA\"><a href=\"#Spring-Data-JPA\" class=\"headerlink\" title=\"Spring Data JPA\"></a>Spring Data JPA</h2><h1 id=\"SpringMVC\"><a href=\"#SpringMVC\" class=\"headerlink\" title=\"SpringMVC\"></a>SpringMVC</h1><h2 id=\"运行流程\"><a href=\"#运行流程\" class=\"headerlink\" title=\"运行流程\"></a>运行流程</h2><ul>\n<li>用户发送请求至前端控制器DispatcherServlet</li>\n<li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>\n<li>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果没有则生成)一并返回给DispatcherServlet。</li>\n<li>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器</li>\n<li>执行处理器(Controller，也叫后端控制器)执行完成返回ModelAndView。</li>\n<li>HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet</li>\n<li>DispatcherServlet将ModelAndView传给ViewResolver视图解析器</li>\n<li>ViewResolver解析后返回具体View</li>\n<li>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</li>\n<li>DispatcherServlet响应用户<h2 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h2></li>\n<li>initMultipartResolver：用于处理文件上传服务</li>\n<li>initLocaleResolver：用于处理应用的国际化问题</li>\n<li>initThemeResolver：用于定义一个主题</li>\n<li>initHandlerMappings：用于定义用户设置的请求映射关系</li>\n<li>initHandlerAdapter：用于根据Handler的类型定义不同的处理规则</li>\n<li>initHandlerExceptionResolver：当Handler处理出错时，会通过这个Handler来统一处理</li>\n<li>initRequestToViewNameTranslator：将指定的ViewName按照定义的requestToViewNameTranslator替换成想要的格式，如加上前缀或者后缀</li>\n<li>initViewResolvers：用于将View解析成页面</li>\n</ul>\n<h1 id=\"Hibernate\"><a href=\"#Hibernate\" class=\"headerlink\" title=\"Hibernate\"></a>Hibernate</h1><h1 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h1><ul>\n<li>实现原理<br>MyBatis通过SQL Map将Java对象映射成SQL语句，将结果集再转化成Java对象。</li>\n</ul>\n<h1 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h1><ul>\n<li>优点：<ul>\n<li>去除了大量的xml配置文件（相对于Spring、SpringMVC来说）</li>\n<li>简化复杂的依赖管理（各个框架的各种版本）</li>\n<li>配合各种starter使用，基本上可以做到自动化配置（各个框架的各种配置）</li>\n<li>快速启动容器</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>从原来的xml配置方式转换到JAVA配置方式变化有点大，不太适应</li>\n<li>Spring Boot比较适合做微服务，不适合做比较大型的项目。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h1><h2 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h2><p><a href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"Spring-Data-Jpa\"><a href=\"#Spring-Data-Jpa\" class=\"headerlink\" title=\"Spring Data Jpa\"></a>Spring Data Jpa</h2><p><a href=\"https://docs.spring.io/spring-data/data-jpa/docs/current/reference/html/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h2><ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n<li><a href=\"https://blog.csdn.net/fly_zhyu/article/details/76407830\" target=\"_blank\" rel=\"external\">文章</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>一般做框架的想法是出于以下几种考虑的</p>\n<ul>\n<li>目前现有的解决方案已经不能有效解决出现的问题，需要一个全新的框架和技术理论来处理</li>\n<li>现在的问题大部分都能解决，但是对于特定的问题还没有方便的处理方式，只是需要一个更好或者更方便的解决特定问题的办法<br>所以要么做通用的框架，这种框架有非常好的扩展性，能够适应不同的应用场景；要么做一个针对特定应用场景的框架，让框架本身能够继承一些特定服务以简化开发。","more":"</li>\n</ul>\n<h1 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h1><h2 id=\"设计理念\"><a href=\"#设计理念\" class=\"headerlink\" title=\"设计理念\"></a>设计理念</h2><p>Java是面向对象编程，而Spring是面向Bean编程。<br>构建一个数据结构，然后根据这个结构设计它的生存环境，并让它在这个环境中按照一定的规律不停的运动，在它们的不停运动中设计一个系列与环境或者与其他个体完成信息交换。、</p>\n<h2 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h2><h3 id=\"Bean（演员）\"><a href=\"#Bean（演员）\" class=\"headerlink\" title=\"Bean（演员）\"></a>Bean（演员）</h3><p>Bean的创建是典型的工厂模式，它的顶级接口是BeanFactory。<br>Bean的定义<br>Bean的解析</p>\n<ul>\n<li>作用域<ul>\n<li>singleton（默认作用域）<br>单例模式，Spring IoC容器中只会存在一个共享的Bean实例，无论有多少个Bean引用它，始终指向同一对象。Singleton作用域是Spring中的缺省作用域</li>\n<li>prototype<br>原型模式，每次通过Spring容器获取prototype定义的bean时，容器都将创建一个新的Bean实例，每个Bean实例都有自己的属性和状态，而singleton全局只有一个对象。根据经验，对有状态的bean使用prototype作用域，而对无状态的bean使用singleton作用域</li>\n<li>request<br>在一次Http请求中，容器会返回该Bean的同一实例。而对不同的Http请求则会产生新的Bean，而且该bean仅在当前Http Request内有效</li>\n<li>session<br>在一次Http Session中，容器会返回该Bean的同一实例。而对不同的Session请求则会创建新的实例，该bean实例仅在当前Session内有效</li>\n<li>global session<br>在一个全局的Http Session中，容器会返回该Bean的同一个实例，仅在使用portlet context时有效</li>\n</ul>\n</li>\n<li>生命周期<ol>\n<li>实例化一个Bean，也就是我们通常说的new    </li>\n<li>按照Spring上下文对实例化的Bean进行配置，也就是IOC注入    </li>\n<li>如果这个Bean实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的是Spring配置文件中Bean的ID    </li>\n<li>如果这个Bean实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()，传递的是Spring工厂本身（可以用这个方法获取到其他Bean）    </li>\n<li>如果这个Bean实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文，该方式同样可以实现步骤4，但比4更好，以为ApplicationContext是BeanFactory的子接口，有更多的实现方法 </li>\n<li>如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor经常被用作是Bean内容的更改，并且由于这个是在Bean初始化结束时调用After方法，也可用于内存或缓存技术   </li>\n<li>如果这个Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法  </li>\n<li>如果这个Bean关联了BeanPostProcessor接口，将会调用postAfterInitialization(Object obj, String s)方法    </li>\n<li>当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean接口，会调用其实现的destroy方法   </li>\n<li>最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法    <h3 id=\"Context（舞台）\"><a href=\"#Context（舞台）\" class=\"headerlink\" title=\"Context（舞台）\"></a>Context（舞台）</h3>BeanFactory和ApplicationContext的区别<br>ApplicationContext是Context的顶级父类，标识一个应用环境的基本信息，继承了BeanFactory。<h3 id=\"Core（道具）\"><a href=\"#Core（道具）\" class=\"headerlink\" title=\"Core（道具）\"></a>Core（道具）</h3>Resource，定义类资源的访问方式，把所有的资源都抽象成一个接口。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"DI（重点掌握）\"><a href=\"#DI（重点掌握）\" class=\"headerlink\" title=\"DI（重点掌握）\"></a>DI（重点掌握）</h2><p>IOC:控制反转,是一种设计思想，可以用来降低代码之间的耦合度。传统JavaSE程序设计，是程序主动去创建和获取依赖对象，而在Spring中，由IOC容器负责对象的创建及注入。<br>DI:依赖注入,IOC的一种实现方式，基于反射实现，一般通过构造器或setter方法注入。<br>用@Service、@Repository等注解标识类为Bean，用@Resource标识自动注入。<br>工厂模式<br>实现原理</p>\n<h2 id=\"AOP（重点掌握）\"><a href=\"#AOP（重点掌握）\" class=\"headerlink\" title=\"AOP（重点掌握）\"></a>AOP（重点掌握）</h2><p>面向切面编程（AOP）是解决特定问题的一种编程范式，核心目的是为了分离功能性需求和非功能性需求</p>\n<ul>\n<li>应用场景：事务控制、权限控制、缓存控制、审计日志、异常处理、性能监控、分布式追踪等</li>\n<li>实现原理：基于动态代理实现。<br>JDK动态代理只能对实现了接口的类生成代理，而不能针对类，CGLib是针对类实现代理，底层采用ASM字节码生成代理类，主要是对指定的类生成一个子类，覆盖其中的方法（继承）。jdk6之前，CGLib比JDK代理效率高，之后JDK代理效率要高于CGLib。故当Bean实现接口时，Spring就会用JDK的动态代理，当Bean没有实现接口时，Spring使用CGLib是实现，可以强制使用CGLib。</li>\n<li>好处：集中处理某一关注点/横切逻辑；可以很方便地添加/删除关注点；侵入性少，增强代码可读性及可维护性</li>\n<li>相关概念：<ol>\n<li>切面（aspect）<br>切面是一个关注点的模块化，这个关注点可能是横切多个对象，Spring中常使用@Aspect注解一个类使其称为一个切面。</li>\n<li>连接点（join point）<br>连接点是指在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候</li>\n<li>通知（advice）<br>指在切面的某个特定的连接点上执行的动作<br>通知类型：<ul>\n<li>前置通知</li>\n<li>后置通知</li>\n<li>返回通知</li>\n<li>异常通知</li>\n<li>环绕通知</li>\n</ul>\n</li>\n<li>切点（pointcut）<br>指匹配连接点的断言。通知与一个切入点表达式关联，并在满足这个切入的连接点上运行，例如：当执行某个特定的名称的方法</li>\n<li>目标对象（Target Object）<br>目标对象是被一个或者多个切面所通知的对象</li>\n<li>AOP代理（AOP Proxy）<br>AOP代理是指AOP框架创建的对对象，用来实现切面契约（包括通知方法等功能）</li>\n<li>织入（weave）<br>指把切面连接到其他应用出程序类型或者对象上，并创建一个被通知的对象。或者说形成代理对象的方法的过程</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><ul>\n<li><p>实现方式</p>\n</li>\n<li><p>传播机制</p>\n<ul>\n<li>PROPAGATION_REQUIRED<br>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务</li>\n<li>PROPAGATION_SUPPORTS<br>表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行</li>\n<li>PROPAGATION_MANDATORY<br>表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常</li>\n<li>PROPAGATION_REQUIRED_NEW<br>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</li>\n<li>PROPAGATION_NOT_SUPPORTED<br>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</li>\n<li>PROPAGATION_NEVER<br>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</li>\n<li>PROPAGATION_NESTED<br>表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。注意各厂商对这种传播行为的支持是有所差异的。可以参考资源管理器的文档来确认它们是否支持嵌套事务</li>\n</ul>\n</li>\n<li>隔离级别<ul>\n<li>ISOLATION_DEFAULT：使用数据库默认的隔离级别</li>\n<li>ISOLATION_READ_UNCOMMITTED：允许读取改变了的还未提交的数据，可能导致脏读、不可重复读和幻读</li>\n<li>ISOLATION_READ COMMITTED：允许并发事务提交之后读取，可以避免脏读，可能导致重复读和幻读</li>\n<li>ISOLATION_REPEATABLE_READ：对相同字段的多次读取结果一致，可导致幻读</li>\n<li>ISOLATION_SERIALIZABLE：完全服从ACID的原则，确保不发生脏读、不可重复读和幻读</li>\n</ul>\n</li>\n<li>底层原理<br>基于AOP实现</li>\n<li>常见问题<br>Spring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑。</li>\n</ul>\n<h2 id=\"Spring-Data-JPA\"><a href=\"#Spring-Data-JPA\" class=\"headerlink\" title=\"Spring Data JPA\"></a>Spring Data JPA</h2><h1 id=\"SpringMVC\"><a href=\"#SpringMVC\" class=\"headerlink\" title=\"SpringMVC\"></a>SpringMVC</h1><h2 id=\"运行流程\"><a href=\"#运行流程\" class=\"headerlink\" title=\"运行流程\"></a>运行流程</h2><ul>\n<li>用户发送请求至前端控制器DispatcherServlet</li>\n<li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>\n<li>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果没有则生成)一并返回给DispatcherServlet。</li>\n<li>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器</li>\n<li>执行处理器(Controller，也叫后端控制器)执行完成返回ModelAndView。</li>\n<li>HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet</li>\n<li>DispatcherServlet将ModelAndView传给ViewResolver视图解析器</li>\n<li>ViewResolver解析后返回具体View</li>\n<li>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</li>\n<li>DispatcherServlet响应用户<h2 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h2></li>\n<li>initMultipartResolver：用于处理文件上传服务</li>\n<li>initLocaleResolver：用于处理应用的国际化问题</li>\n<li>initThemeResolver：用于定义一个主题</li>\n<li>initHandlerMappings：用于定义用户设置的请求映射关系</li>\n<li>initHandlerAdapter：用于根据Handler的类型定义不同的处理规则</li>\n<li>initHandlerExceptionResolver：当Handler处理出错时，会通过这个Handler来统一处理</li>\n<li>initRequestToViewNameTranslator：将指定的ViewName按照定义的requestToViewNameTranslator替换成想要的格式，如加上前缀或者后缀</li>\n<li>initViewResolvers：用于将View解析成页面</li>\n</ul>\n<h1 id=\"Hibernate\"><a href=\"#Hibernate\" class=\"headerlink\" title=\"Hibernate\"></a>Hibernate</h1><h1 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h1><ul>\n<li>实现原理<br>MyBatis通过SQL Map将Java对象映射成SQL语句，将结果集再转化成Java对象。</li>\n</ul>\n<h1 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h1><ul>\n<li>优点：<ul>\n<li>去除了大量的xml配置文件（相对于Spring、SpringMVC来说）</li>\n<li>简化复杂的依赖管理（各个框架的各种版本）</li>\n<li>配合各种starter使用，基本上可以做到自动化配置（各个框架的各种配置）</li>\n<li>快速启动容器</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>从原来的xml配置方式转换到JAVA配置方式变化有点大，不太适应</li>\n<li>Spring Boot比较适合做微服务，不适合做比较大型的项目。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h1><h2 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h2><p><a href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"Spring-Data-Jpa\"><a href=\"#Spring-Data-Jpa\" class=\"headerlink\" title=\"Spring Data Jpa\"></a>Spring Data Jpa</h2><p><a href=\"https://docs.spring.io/spring-data/data-jpa/docs/current/reference/html/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h2><ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n<li><a href=\"https://blog.csdn.net/fly_zhyu/article/details/76407830\" target=\"_blank\" rel=\"external\">文章</a></li>\n</ul>"},{"title":"高效并发","_content":"\n并发并不一定依赖多线程，但Java里谈论并发大多数都与线程脱不开关系。\n线程是比进程更轻量级的调度执行单位，线程的引入可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源(内存地址，文件IO等)，又可以独立调度（线程是CPU调度的基本单位）。\n<!-- more -->\n\n# 应用场景\n1. 多任务处理\n计算机的运算速度与它的存储和通信子系统速度差距太大，大量的时间都花费在磁盘I/O，网络通信或数据库访问上。因此可以让计算机同时处理多项任务，从而充分利用计算器处理器的能力。\n2. 服务端同时对多个客户端提供服务\n例如WEB容器中就用到了多线程。\n\n# Java内存模型\n主内存与工作内存\n\n# 并发的三大特性\n1. 原子性\n\n2. 可见性\n\n3. 有序性\n\n# 进程与线程\n* 进程是资源分配的最小单位，线程是程序执行的最小单位。\n\n# 并行与并发\n\n# 线程调度\n线程调度是指系统为线程分配处理器使用权的过程，主要调度方式有两种，分别是协同式线程调度和抢占式线程调度。\n* 协同式线程调度：线程执行时间由线程本身来控制，线程把自己的工作执行完之后，要主动通知系统切换到另外一个线程上。最大好处是实现简单，且切换操作对线程自己是可知的，没啥线程同步问题。坏处是线程执行时间不可控制，如果一个线程有问题，可能一直阻塞在那里。\n* 抢占式线程调度：每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定（Java中，Thread.yield()可以让出执行时间，但无法获取执行时间）。线程执行时间系统可控，也不会有一个线程导致整个进程阻塞。\n\n# 线程池\n* 工作原理\n    1. 判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则进入下个流程。\n    2. 线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。\n    3. 判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。\n* 实现方式\n    * 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\n    * 创建一个指定工作线程数量的线程池。每当提交一个任务就创建一个工作线程，如果工作线程数量达到线程池初始的最大数，则将提交的任务存入到池队列中。\n    * 创建一个单线程化的Executor，即只创建唯一的工作者线程来执行任务，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。如果这个线程异常结束，会有另一个取代它，保证顺序执行。单工作线程最大的特点是可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的。\n    * 创建一个定长的线程池，而且支持定时的以及周期性的任务执行，支持定时及周期性任务执行。\n\n# 线程优先级\n希望系统能给某些线程多分配一些时间，给一些线程少分配一些时间，可以通过设置线程优先级来完成。Java语言一共10个级别的线程优先级（1级最低，10级最高），在两线程同时处于ready状态时，优先级越高的线程越容易被系统选择执行。但优先级并不是很靠谱，因为Java线程是通过映射到系统的原生线程上来实现的（平台上不同的优先级实际会变得相同，因为系统优先级比JAVA少或者优先级可能会被系统自行改变，如windows的“优先级推进器”），所以线程调度最终还是取决于操作系统。\n\n# 线程状态（生命周期）\n* 新建（NEW）\n创建后尚未启动的线程\n* 运行（RUNNABLE）\n包括了操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配时间。\n* 无限期等待（WAITING）\n不会被分配CPU执行时间，它们需要等待被其他线程显示地唤醒。以下方法会让线程进入此状态：\n    * 没有设置Timeout参数的Object.wait()方法\n    * 没有设置Timeout参数的Thread.join()方法\n* 限期等待（TIMED_WAITING）\n也不会被分配CPU执行时间，不过无须等待被其他线程显示地唤醒,在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入此状态：\n    * Thread.sleep()方法\n    * 设置了Timeout参数的Object.wait()方法\n    * 设置了Timeout参数的Thread.join()方法\n* 阻塞（BLOCKED）\n线程被阻塞了，“阻塞状态”与“等待状态”的区别是：“阻塞状态”在等待着获取到一个排他锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或着唤醒动作的发生。\n* 结束（TERMINATED）\n线程执行结束。\n\n# 线程安全\n当多个线程访问一个对象时，如果不考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象就是线程安全的。\n\n# 线程安全级别\n* 不可变\n不可变的对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障措施。如String、Long、Double等。\n* 绝对线程安全\n不管运行时环境如何，调用者都不需要任何额外的同步措施。如Vector。\n* 相对线程安全\n我们通常意义上讲的线程安全。\n* 线程兼容\n对象本身并不是线程安全的，如ArrayList和HashMap等。\n* 线程对立\n无论调用端是否采取了同步措施，都无法在多线程中并发使用的代码。\n\n# 线程安全的实现方法：\n## 阻塞同步（悲观的并发策略）\n互斥同步是常见的一种并发正确性保障手段。\n同步是指多个线程并发访问共享数据时，保证共享数据在同一时刻只被一个（或者是一些，使用信号量的时候）线程使用。\n互斥是实现同步的一种手段，主要实现方式有临界区、互斥量、信号量（Semaphore实现原理：Semaphore内部主要通过AQS（AbstractQueuedSynchronizer）实现线程的管理。Semaphore有两个构造函数，参数permits表示许可数，它最后传递给了AQS的state值。线程在运行时首先获取许可，如果成功，许可数就减1，线程运行，当线程运行结束就释放许可，许可数就加1。如果许可数为0，则获取失败，线程位于AQS的等待队列中，它会被其它释放许可的线程唤醒。在创建Semaphore对象的时候还可以指定它的公平性。一般常用非公平的信号量，非公平信号量是指在获取许可时先尝试获取许可，而不必关心是否已有需要获取许可的线程位于等待队列中，如果获取失败，才会入列。而公平的信号量在获取许可时首先要查看等待队列中是否已有线程，如果有则入列）。\n互斥是因，同步是果；互斥是方法，同步是目的。\n在Java中互斥同步手段有：synchronized关键字（会在同步块的前后分别形成monitorenter和monitorexit两个字节码指令，这两个字节码都需要一个reference类型的参数来指明要锁定和解锁的对象。在执行monitorenter指令时，首先要尝试获取对象的锁，如果这个对象没被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加1，相应的，在执行monitorexit指令时会将锁计数器减1，当计数器为0时，锁就被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止）、ReentrantLock（增加了一些高级功能：等待可中断、可实现公平锁、以及锁可以绑定多个条件），两者性能差不多。\n\n    \n## 非阻塞同步（乐观的并发策略）\n先进行操作，如果没有其他线程争用共享数据，那操作就成功了；如果共享数据有争用，产生了冲突，那就采取其他的补偿措施（最常见的补偿措施就是不断的重试，直到成功为止）。\n无法涵盖互斥同步的所有使用场景，例如ABA问题，传统的互斥同步可能比原子类更高效。\n## 无同步方案\n要保证线程安全，并不是一定就是要进行同步，两者没有因果关系。同步只是保证共享数据争用时的正确性的手段。\n* 可重入代码\n只要输入了相同的数据，就都能返回相同的结果的代码称为可重入代码。\n* 线程本地存储（ThreadLocal）\n为每个线程都创建一个变量副本, 每个线程都可以修改自己所拥有的变量副本, 而不会影响其他线程的副本。\n常用于隔离多个线程之间的共享冲突（例如生产者-消费者模式的实例：经典Web交互模型中的“一个请求对应一个服务器线程”的处理方式）。\n但ThreadLocal容易出现OOM（内存泄漏，由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用），最好是每次使用完ThreadLocal，都调用它的remove()方法，清除数据。\n    \n# JVM线程优化\n* 锁优化\n* 锁消除\n* 锁粗化\n* 轻量级锁\n* 偏向锁\n\n# Java并发工具\n## 并发容器\n## 同步容器\n## 阻塞队列\n## Synchronizer\n* CountDownLatch\n一个线程(或者多个)，等待另外N个线程完成某个事情之后才能执行\n* CyclicBarrier\nN个线程相互等待，任何一个线程完成之前，所有的线程都必须等待\n* Exchanger\n用于成对出现的线程之间交换数据\n\n# 经典并发问题\n* 生产者-消费者问题\n* 哲学家就餐问题\n* 读者-作者问题\n* 熟睡的理发师问题\n* 三个烟鬼的问题","source":"_posts/20180727.md","raw":"---\ntitle: 高效并发\ntags: [Java,多线程]\ncategories: 后端开发\n---\n\n并发并不一定依赖多线程，但Java里谈论并发大多数都与线程脱不开关系。\n线程是比进程更轻量级的调度执行单位，线程的引入可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源(内存地址，文件IO等)，又可以独立调度（线程是CPU调度的基本单位）。\n<!-- more -->\n\n# 应用场景\n1. 多任务处理\n计算机的运算速度与它的存储和通信子系统速度差距太大，大量的时间都花费在磁盘I/O，网络通信或数据库访问上。因此可以让计算机同时处理多项任务，从而充分利用计算器处理器的能力。\n2. 服务端同时对多个客户端提供服务\n例如WEB容器中就用到了多线程。\n\n# Java内存模型\n主内存与工作内存\n\n# 并发的三大特性\n1. 原子性\n\n2. 可见性\n\n3. 有序性\n\n# 进程与线程\n* 进程是资源分配的最小单位，线程是程序执行的最小单位。\n\n# 并行与并发\n\n# 线程调度\n线程调度是指系统为线程分配处理器使用权的过程，主要调度方式有两种，分别是协同式线程调度和抢占式线程调度。\n* 协同式线程调度：线程执行时间由线程本身来控制，线程把自己的工作执行完之后，要主动通知系统切换到另外一个线程上。最大好处是实现简单，且切换操作对线程自己是可知的，没啥线程同步问题。坏处是线程执行时间不可控制，如果一个线程有问题，可能一直阻塞在那里。\n* 抢占式线程调度：每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定（Java中，Thread.yield()可以让出执行时间，但无法获取执行时间）。线程执行时间系统可控，也不会有一个线程导致整个进程阻塞。\n\n# 线程池\n* 工作原理\n    1. 判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则进入下个流程。\n    2. 线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。\n    3. 判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。\n* 实现方式\n    * 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\n    * 创建一个指定工作线程数量的线程池。每当提交一个任务就创建一个工作线程，如果工作线程数量达到线程池初始的最大数，则将提交的任务存入到池队列中。\n    * 创建一个单线程化的Executor，即只创建唯一的工作者线程来执行任务，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。如果这个线程异常结束，会有另一个取代它，保证顺序执行。单工作线程最大的特点是可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的。\n    * 创建一个定长的线程池，而且支持定时的以及周期性的任务执行，支持定时及周期性任务执行。\n\n# 线程优先级\n希望系统能给某些线程多分配一些时间，给一些线程少分配一些时间，可以通过设置线程优先级来完成。Java语言一共10个级别的线程优先级（1级最低，10级最高），在两线程同时处于ready状态时，优先级越高的线程越容易被系统选择执行。但优先级并不是很靠谱，因为Java线程是通过映射到系统的原生线程上来实现的（平台上不同的优先级实际会变得相同，因为系统优先级比JAVA少或者优先级可能会被系统自行改变，如windows的“优先级推进器”），所以线程调度最终还是取决于操作系统。\n\n# 线程状态（生命周期）\n* 新建（NEW）\n创建后尚未启动的线程\n* 运行（RUNNABLE）\n包括了操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配时间。\n* 无限期等待（WAITING）\n不会被分配CPU执行时间，它们需要等待被其他线程显示地唤醒。以下方法会让线程进入此状态：\n    * 没有设置Timeout参数的Object.wait()方法\n    * 没有设置Timeout参数的Thread.join()方法\n* 限期等待（TIMED_WAITING）\n也不会被分配CPU执行时间，不过无须等待被其他线程显示地唤醒,在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入此状态：\n    * Thread.sleep()方法\n    * 设置了Timeout参数的Object.wait()方法\n    * 设置了Timeout参数的Thread.join()方法\n* 阻塞（BLOCKED）\n线程被阻塞了，“阻塞状态”与“等待状态”的区别是：“阻塞状态”在等待着获取到一个排他锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或着唤醒动作的发生。\n* 结束（TERMINATED）\n线程执行结束。\n\n# 线程安全\n当多个线程访问一个对象时，如果不考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象就是线程安全的。\n\n# 线程安全级别\n* 不可变\n不可变的对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障措施。如String、Long、Double等。\n* 绝对线程安全\n不管运行时环境如何，调用者都不需要任何额外的同步措施。如Vector。\n* 相对线程安全\n我们通常意义上讲的线程安全。\n* 线程兼容\n对象本身并不是线程安全的，如ArrayList和HashMap等。\n* 线程对立\n无论调用端是否采取了同步措施，都无法在多线程中并发使用的代码。\n\n# 线程安全的实现方法：\n## 阻塞同步（悲观的并发策略）\n互斥同步是常见的一种并发正确性保障手段。\n同步是指多个线程并发访问共享数据时，保证共享数据在同一时刻只被一个（或者是一些，使用信号量的时候）线程使用。\n互斥是实现同步的一种手段，主要实现方式有临界区、互斥量、信号量（Semaphore实现原理：Semaphore内部主要通过AQS（AbstractQueuedSynchronizer）实现线程的管理。Semaphore有两个构造函数，参数permits表示许可数，它最后传递给了AQS的state值。线程在运行时首先获取许可，如果成功，许可数就减1，线程运行，当线程运行结束就释放许可，许可数就加1。如果许可数为0，则获取失败，线程位于AQS的等待队列中，它会被其它释放许可的线程唤醒。在创建Semaphore对象的时候还可以指定它的公平性。一般常用非公平的信号量，非公平信号量是指在获取许可时先尝试获取许可，而不必关心是否已有需要获取许可的线程位于等待队列中，如果获取失败，才会入列。而公平的信号量在获取许可时首先要查看等待队列中是否已有线程，如果有则入列）。\n互斥是因，同步是果；互斥是方法，同步是目的。\n在Java中互斥同步手段有：synchronized关键字（会在同步块的前后分别形成monitorenter和monitorexit两个字节码指令，这两个字节码都需要一个reference类型的参数来指明要锁定和解锁的对象。在执行monitorenter指令时，首先要尝试获取对象的锁，如果这个对象没被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加1，相应的，在执行monitorexit指令时会将锁计数器减1，当计数器为0时，锁就被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止）、ReentrantLock（增加了一些高级功能：等待可中断、可实现公平锁、以及锁可以绑定多个条件），两者性能差不多。\n\n    \n## 非阻塞同步（乐观的并发策略）\n先进行操作，如果没有其他线程争用共享数据，那操作就成功了；如果共享数据有争用，产生了冲突，那就采取其他的补偿措施（最常见的补偿措施就是不断的重试，直到成功为止）。\n无法涵盖互斥同步的所有使用场景，例如ABA问题，传统的互斥同步可能比原子类更高效。\n## 无同步方案\n要保证线程安全，并不是一定就是要进行同步，两者没有因果关系。同步只是保证共享数据争用时的正确性的手段。\n* 可重入代码\n只要输入了相同的数据，就都能返回相同的结果的代码称为可重入代码。\n* 线程本地存储（ThreadLocal）\n为每个线程都创建一个变量副本, 每个线程都可以修改自己所拥有的变量副本, 而不会影响其他线程的副本。\n常用于隔离多个线程之间的共享冲突（例如生产者-消费者模式的实例：经典Web交互模型中的“一个请求对应一个服务器线程”的处理方式）。\n但ThreadLocal容易出现OOM（内存泄漏，由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用），最好是每次使用完ThreadLocal，都调用它的remove()方法，清除数据。\n    \n# JVM线程优化\n* 锁优化\n* 锁消除\n* 锁粗化\n* 轻量级锁\n* 偏向锁\n\n# Java并发工具\n## 并发容器\n## 同步容器\n## 阻塞队列\n## Synchronizer\n* CountDownLatch\n一个线程(或者多个)，等待另外N个线程完成某个事情之后才能执行\n* CyclicBarrier\nN个线程相互等待，任何一个线程完成之前，所有的线程都必须等待\n* Exchanger\n用于成对出现的线程之间交换数据\n\n# 经典并发问题\n* 生产者-消费者问题\n* 哲学家就餐问题\n* 读者-作者问题\n* 熟睡的理发师问题\n* 三个烟鬼的问题","slug":"20180727","published":1,"date":"2018-09-05T01:34:04.302Z","updated":"2018-10-22T06:00:42.000Z","_id":"cjnaatg7w000gdwv37u5m5pnu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>并发并不一定依赖多线程，但Java里谈论并发大多数都与线程脱不开关系。<br>线程是比进程更轻量级的调度执行单位，线程的引入可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源(内存地址，文件IO等)，又可以独立调度（线程是CPU调度的基本单位）。<br><a id=\"more\"></a></p>\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><ol>\n<li>多任务处理<br>计算机的运算速度与它的存储和通信子系统速度差距太大，大量的时间都花费在磁盘I/O，网络通信或数据库访问上。因此可以让计算机同时处理多项任务，从而充分利用计算器处理器的能力。</li>\n<li>服务端同时对多个客户端提供服务<br>例如WEB容器中就用到了多线程。</li>\n</ol>\n<h1 id=\"Java内存模型\"><a href=\"#Java内存模型\" class=\"headerlink\" title=\"Java内存模型\"></a>Java内存模型</h1><p>主内存与工作内存</p>\n<h1 id=\"并发的三大特性\"><a href=\"#并发的三大特性\" class=\"headerlink\" title=\"并发的三大特性\"></a>并发的三大特性</h1><ol>\n<li><p>原子性</p>\n</li>\n<li><p>可见性</p>\n</li>\n<li><p>有序性</p>\n</li>\n</ol>\n<h1 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h1><ul>\n<li>进程是资源分配的最小单位，线程是程序执行的最小单位。</li>\n</ul>\n<h1 id=\"并行与并发\"><a href=\"#并行与并发\" class=\"headerlink\" title=\"并行与并发\"></a>并行与并发</h1><h1 id=\"线程调度\"><a href=\"#线程调度\" class=\"headerlink\" title=\"线程调度\"></a>线程调度</h1><p>线程调度是指系统为线程分配处理器使用权的过程，主要调度方式有两种，分别是协同式线程调度和抢占式线程调度。</p>\n<ul>\n<li>协同式线程调度：线程执行时间由线程本身来控制，线程把自己的工作执行完之后，要主动通知系统切换到另外一个线程上。最大好处是实现简单，且切换操作对线程自己是可知的，没啥线程同步问题。坏处是线程执行时间不可控制，如果一个线程有问题，可能一直阻塞在那里。</li>\n<li>抢占式线程调度：每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定（Java中，Thread.yield()可以让出执行时间，但无法获取执行时间）。线程执行时间系统可控，也不会有一个线程导致整个进程阻塞。</li>\n</ul>\n<h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><ul>\n<li>工作原理<ol>\n<li>判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则进入下个流程。</li>\n<li>线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。</li>\n<li>判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。</li>\n</ol>\n</li>\n<li>实现方式<ul>\n<li>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li>\n<li>创建一个指定工作线程数量的线程池。每当提交一个任务就创建一个工作线程，如果工作线程数量达到线程池初始的最大数，则将提交的任务存入到池队列中。</li>\n<li>创建一个单线程化的Executor，即只创建唯一的工作者线程来执行任务，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。如果这个线程异常结束，会有另一个取代它，保证顺序执行。单工作线程最大的特点是可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的。</li>\n<li>创建一个定长的线程池，而且支持定时的以及周期性的任务执行，支持定时及周期性任务执行。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h1><p>希望系统能给某些线程多分配一些时间，给一些线程少分配一些时间，可以通过设置线程优先级来完成。Java语言一共10个级别的线程优先级（1级最低，10级最高），在两线程同时处于ready状态时，优先级越高的线程越容易被系统选择执行。但优先级并不是很靠谱，因为Java线程是通过映射到系统的原生线程上来实现的（平台上不同的优先级实际会变得相同，因为系统优先级比JAVA少或者优先级可能会被系统自行改变，如windows的“优先级推进器”），所以线程调度最终还是取决于操作系统。</p>\n<h1 id=\"线程状态（生命周期）\"><a href=\"#线程状态（生命周期）\" class=\"headerlink\" title=\"线程状态（生命周期）\"></a>线程状态（生命周期）</h1><ul>\n<li>新建（NEW）<br>创建后尚未启动的线程</li>\n<li>运行（RUNNABLE）<br>包括了操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配时间。</li>\n<li>无限期等待（WAITING）<br>不会被分配CPU执行时间，它们需要等待被其他线程显示地唤醒。以下方法会让线程进入此状态：<ul>\n<li>没有设置Timeout参数的Object.wait()方法</li>\n<li>没有设置Timeout参数的Thread.join()方法</li>\n</ul>\n</li>\n<li>限期等待（TIMED_WAITING）<br>也不会被分配CPU执行时间，不过无须等待被其他线程显示地唤醒,在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入此状态：<ul>\n<li>Thread.sleep()方法</li>\n<li>设置了Timeout参数的Object.wait()方法</li>\n<li>设置了Timeout参数的Thread.join()方法</li>\n</ul>\n</li>\n<li>阻塞（BLOCKED）<br>线程被阻塞了，“阻塞状态”与“等待状态”的区别是：“阻塞状态”在等待着获取到一个排他锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或着唤醒动作的发生。</li>\n<li>结束（TERMINATED）<br>线程执行结束。</li>\n</ul>\n<h1 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h1><p>当多个线程访问一个对象时，如果不考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象就是线程安全的。</p>\n<h1 id=\"线程安全级别\"><a href=\"#线程安全级别\" class=\"headerlink\" title=\"线程安全级别\"></a>线程安全级别</h1><ul>\n<li>不可变<br>不可变的对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障措施。如String、Long、Double等。</li>\n<li>绝对线程安全<br>不管运行时环境如何，调用者都不需要任何额外的同步措施。如Vector。</li>\n<li>相对线程安全<br>我们通常意义上讲的线程安全。</li>\n<li>线程兼容<br>对象本身并不是线程安全的，如ArrayList和HashMap等。</li>\n<li>线程对立<br>无论调用端是否采取了同步措施，都无法在多线程中并发使用的代码。</li>\n</ul>\n<h1 id=\"线程安全的实现方法：\"><a href=\"#线程安全的实现方法：\" class=\"headerlink\" title=\"线程安全的实现方法：\"></a>线程安全的实现方法：</h1><h2 id=\"阻塞同步（悲观的并发策略）\"><a href=\"#阻塞同步（悲观的并发策略）\" class=\"headerlink\" title=\"阻塞同步（悲观的并发策略）\"></a>阻塞同步（悲观的并发策略）</h2><p>互斥同步是常见的一种并发正确性保障手段。<br>同步是指多个线程并发访问共享数据时，保证共享数据在同一时刻只被一个（或者是一些，使用信号量的时候）线程使用。<br>互斥是实现同步的一种手段，主要实现方式有临界区、互斥量、信号量（Semaphore实现原理：Semaphore内部主要通过AQS（AbstractQueuedSynchronizer）实现线程的管理。Semaphore有两个构造函数，参数permits表示许可数，它最后传递给了AQS的state值。线程在运行时首先获取许可，如果成功，许可数就减1，线程运行，当线程运行结束就释放许可，许可数就加1。如果许可数为0，则获取失败，线程位于AQS的等待队列中，它会被其它释放许可的线程唤醒。在创建Semaphore对象的时候还可以指定它的公平性。一般常用非公平的信号量，非公平信号量是指在获取许可时先尝试获取许可，而不必关心是否已有需要获取许可的线程位于等待队列中，如果获取失败，才会入列。而公平的信号量在获取许可时首先要查看等待队列中是否已有线程，如果有则入列）。<br>互斥是因，同步是果；互斥是方法，同步是目的。<br>在Java中互斥同步手段有：synchronized关键字（会在同步块的前后分别形成monitorenter和monitorexit两个字节码指令，这两个字节码都需要一个reference类型的参数来指明要锁定和解锁的对象。在执行monitorenter指令时，首先要尝试获取对象的锁，如果这个对象没被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加1，相应的，在执行monitorexit指令时会将锁计数器减1，当计数器为0时，锁就被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止）、ReentrantLock（增加了一些高级功能：等待可中断、可实现公平锁、以及锁可以绑定多个条件），两者性能差不多。</p>\n<h2 id=\"非阻塞同步（乐观的并发策略）\"><a href=\"#非阻塞同步（乐观的并发策略）\" class=\"headerlink\" title=\"非阻塞同步（乐观的并发策略）\"></a>非阻塞同步（乐观的并发策略）</h2><p>先进行操作，如果没有其他线程争用共享数据，那操作就成功了；如果共享数据有争用，产生了冲突，那就采取其他的补偿措施（最常见的补偿措施就是不断的重试，直到成功为止）。<br>无法涵盖互斥同步的所有使用场景，例如ABA问题，传统的互斥同步可能比原子类更高效。</p>\n<h2 id=\"无同步方案\"><a href=\"#无同步方案\" class=\"headerlink\" title=\"无同步方案\"></a>无同步方案</h2><p>要保证线程安全，并不是一定就是要进行同步，两者没有因果关系。同步只是保证共享数据争用时的正确性的手段。</p>\n<ul>\n<li>可重入代码<br>只要输入了相同的数据，就都能返回相同的结果的代码称为可重入代码。</li>\n<li>线程本地存储（ThreadLocal）<br>为每个线程都创建一个变量副本, 每个线程都可以修改自己所拥有的变量副本, 而不会影响其他线程的副本。<br>常用于隔离多个线程之间的共享冲突（例如生产者-消费者模式的实例：经典Web交互模型中的“一个请求对应一个服务器线程”的处理方式）。<br>但ThreadLocal容易出现OOM（内存泄漏，由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用），最好是每次使用完ThreadLocal，都调用它的remove()方法，清除数据。</li>\n</ul>\n<h1 id=\"JVM线程优化\"><a href=\"#JVM线程优化\" class=\"headerlink\" title=\"JVM线程优化\"></a>JVM线程优化</h1><ul>\n<li>锁优化</li>\n<li>锁消除</li>\n<li>锁粗化</li>\n<li>轻量级锁</li>\n<li>偏向锁</li>\n</ul>\n<h1 id=\"Java并发工具\"><a href=\"#Java并发工具\" class=\"headerlink\" title=\"Java并发工具\"></a>Java并发工具</h1><h2 id=\"并发容器\"><a href=\"#并发容器\" class=\"headerlink\" title=\"并发容器\"></a>并发容器</h2><h2 id=\"同步容器\"><a href=\"#同步容器\" class=\"headerlink\" title=\"同步容器\"></a>同步容器</h2><h2 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h2><h2 id=\"Synchronizer\"><a href=\"#Synchronizer\" class=\"headerlink\" title=\"Synchronizer\"></a>Synchronizer</h2><ul>\n<li>CountDownLatch<br>一个线程(或者多个)，等待另外N个线程完成某个事情之后才能执行</li>\n<li>CyclicBarrier<br>N个线程相互等待，任何一个线程完成之前，所有的线程都必须等待</li>\n<li>Exchanger<br>用于成对出现的线程之间交换数据</li>\n</ul>\n<h1 id=\"经典并发问题\"><a href=\"#经典并发问题\" class=\"headerlink\" title=\"经典并发问题\"></a>经典并发问题</h1><ul>\n<li>生产者-消费者问题</li>\n<li>哲学家就餐问题</li>\n<li>读者-作者问题</li>\n<li>熟睡的理发师问题</li>\n<li>三个烟鬼的问题</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>并发并不一定依赖多线程，但Java里谈论并发大多数都与线程脱不开关系。<br>线程是比进程更轻量级的调度执行单位，线程的引入可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源(内存地址，文件IO等)，又可以独立调度（线程是CPU调度的基本单位）。<br>","more":"</p>\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><ol>\n<li>多任务处理<br>计算机的运算速度与它的存储和通信子系统速度差距太大，大量的时间都花费在磁盘I/O，网络通信或数据库访问上。因此可以让计算机同时处理多项任务，从而充分利用计算器处理器的能力。</li>\n<li>服务端同时对多个客户端提供服务<br>例如WEB容器中就用到了多线程。</li>\n</ol>\n<h1 id=\"Java内存模型\"><a href=\"#Java内存模型\" class=\"headerlink\" title=\"Java内存模型\"></a>Java内存模型</h1><p>主内存与工作内存</p>\n<h1 id=\"并发的三大特性\"><a href=\"#并发的三大特性\" class=\"headerlink\" title=\"并发的三大特性\"></a>并发的三大特性</h1><ol>\n<li><p>原子性</p>\n</li>\n<li><p>可见性</p>\n</li>\n<li><p>有序性</p>\n</li>\n</ol>\n<h1 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h1><ul>\n<li>进程是资源分配的最小单位，线程是程序执行的最小单位。</li>\n</ul>\n<h1 id=\"并行与并发\"><a href=\"#并行与并发\" class=\"headerlink\" title=\"并行与并发\"></a>并行与并发</h1><h1 id=\"线程调度\"><a href=\"#线程调度\" class=\"headerlink\" title=\"线程调度\"></a>线程调度</h1><p>线程调度是指系统为线程分配处理器使用权的过程，主要调度方式有两种，分别是协同式线程调度和抢占式线程调度。</p>\n<ul>\n<li>协同式线程调度：线程执行时间由线程本身来控制，线程把自己的工作执行完之后，要主动通知系统切换到另外一个线程上。最大好处是实现简单，且切换操作对线程自己是可知的，没啥线程同步问题。坏处是线程执行时间不可控制，如果一个线程有问题，可能一直阻塞在那里。</li>\n<li>抢占式线程调度：每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定（Java中，Thread.yield()可以让出执行时间，但无法获取执行时间）。线程执行时间系统可控，也不会有一个线程导致整个进程阻塞。</li>\n</ul>\n<h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><ul>\n<li>工作原理<ol>\n<li>判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则进入下个流程。</li>\n<li>线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。</li>\n<li>判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。</li>\n</ol>\n</li>\n<li>实现方式<ul>\n<li>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li>\n<li>创建一个指定工作线程数量的线程池。每当提交一个任务就创建一个工作线程，如果工作线程数量达到线程池初始的最大数，则将提交的任务存入到池队列中。</li>\n<li>创建一个单线程化的Executor，即只创建唯一的工作者线程来执行任务，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。如果这个线程异常结束，会有另一个取代它，保证顺序执行。单工作线程最大的特点是可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的。</li>\n<li>创建一个定长的线程池，而且支持定时的以及周期性的任务执行，支持定时及周期性任务执行。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h1><p>希望系统能给某些线程多分配一些时间，给一些线程少分配一些时间，可以通过设置线程优先级来完成。Java语言一共10个级别的线程优先级（1级最低，10级最高），在两线程同时处于ready状态时，优先级越高的线程越容易被系统选择执行。但优先级并不是很靠谱，因为Java线程是通过映射到系统的原生线程上来实现的（平台上不同的优先级实际会变得相同，因为系统优先级比JAVA少或者优先级可能会被系统自行改变，如windows的“优先级推进器”），所以线程调度最终还是取决于操作系统。</p>\n<h1 id=\"线程状态（生命周期）\"><a href=\"#线程状态（生命周期）\" class=\"headerlink\" title=\"线程状态（生命周期）\"></a>线程状态（生命周期）</h1><ul>\n<li>新建（NEW）<br>创建后尚未启动的线程</li>\n<li>运行（RUNNABLE）<br>包括了操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配时间。</li>\n<li>无限期等待（WAITING）<br>不会被分配CPU执行时间，它们需要等待被其他线程显示地唤醒。以下方法会让线程进入此状态：<ul>\n<li>没有设置Timeout参数的Object.wait()方法</li>\n<li>没有设置Timeout参数的Thread.join()方法</li>\n</ul>\n</li>\n<li>限期等待（TIMED_WAITING）<br>也不会被分配CPU执行时间，不过无须等待被其他线程显示地唤醒,在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入此状态：<ul>\n<li>Thread.sleep()方法</li>\n<li>设置了Timeout参数的Object.wait()方法</li>\n<li>设置了Timeout参数的Thread.join()方法</li>\n</ul>\n</li>\n<li>阻塞（BLOCKED）<br>线程被阻塞了，“阻塞状态”与“等待状态”的区别是：“阻塞状态”在等待着获取到一个排他锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或着唤醒动作的发生。</li>\n<li>结束（TERMINATED）<br>线程执行结束。</li>\n</ul>\n<h1 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h1><p>当多个线程访问一个对象时，如果不考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象就是线程安全的。</p>\n<h1 id=\"线程安全级别\"><a href=\"#线程安全级别\" class=\"headerlink\" title=\"线程安全级别\"></a>线程安全级别</h1><ul>\n<li>不可变<br>不可变的对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障措施。如String、Long、Double等。</li>\n<li>绝对线程安全<br>不管运行时环境如何，调用者都不需要任何额外的同步措施。如Vector。</li>\n<li>相对线程安全<br>我们通常意义上讲的线程安全。</li>\n<li>线程兼容<br>对象本身并不是线程安全的，如ArrayList和HashMap等。</li>\n<li>线程对立<br>无论调用端是否采取了同步措施，都无法在多线程中并发使用的代码。</li>\n</ul>\n<h1 id=\"线程安全的实现方法：\"><a href=\"#线程安全的实现方法：\" class=\"headerlink\" title=\"线程安全的实现方法：\"></a>线程安全的实现方法：</h1><h2 id=\"阻塞同步（悲观的并发策略）\"><a href=\"#阻塞同步（悲观的并发策略）\" class=\"headerlink\" title=\"阻塞同步（悲观的并发策略）\"></a>阻塞同步（悲观的并发策略）</h2><p>互斥同步是常见的一种并发正确性保障手段。<br>同步是指多个线程并发访问共享数据时，保证共享数据在同一时刻只被一个（或者是一些，使用信号量的时候）线程使用。<br>互斥是实现同步的一种手段，主要实现方式有临界区、互斥量、信号量（Semaphore实现原理：Semaphore内部主要通过AQS（AbstractQueuedSynchronizer）实现线程的管理。Semaphore有两个构造函数，参数permits表示许可数，它最后传递给了AQS的state值。线程在运行时首先获取许可，如果成功，许可数就减1，线程运行，当线程运行结束就释放许可，许可数就加1。如果许可数为0，则获取失败，线程位于AQS的等待队列中，它会被其它释放许可的线程唤醒。在创建Semaphore对象的时候还可以指定它的公平性。一般常用非公平的信号量，非公平信号量是指在获取许可时先尝试获取许可，而不必关心是否已有需要获取许可的线程位于等待队列中，如果获取失败，才会入列。而公平的信号量在获取许可时首先要查看等待队列中是否已有线程，如果有则入列）。<br>互斥是因，同步是果；互斥是方法，同步是目的。<br>在Java中互斥同步手段有：synchronized关键字（会在同步块的前后分别形成monitorenter和monitorexit两个字节码指令，这两个字节码都需要一个reference类型的参数来指明要锁定和解锁的对象。在执行monitorenter指令时，首先要尝试获取对象的锁，如果这个对象没被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加1，相应的，在执行monitorexit指令时会将锁计数器减1，当计数器为0时，锁就被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止）、ReentrantLock（增加了一些高级功能：等待可中断、可实现公平锁、以及锁可以绑定多个条件），两者性能差不多。</p>\n<h2 id=\"非阻塞同步（乐观的并发策略）\"><a href=\"#非阻塞同步（乐观的并发策略）\" class=\"headerlink\" title=\"非阻塞同步（乐观的并发策略）\"></a>非阻塞同步（乐观的并发策略）</h2><p>先进行操作，如果没有其他线程争用共享数据，那操作就成功了；如果共享数据有争用，产生了冲突，那就采取其他的补偿措施（最常见的补偿措施就是不断的重试，直到成功为止）。<br>无法涵盖互斥同步的所有使用场景，例如ABA问题，传统的互斥同步可能比原子类更高效。</p>\n<h2 id=\"无同步方案\"><a href=\"#无同步方案\" class=\"headerlink\" title=\"无同步方案\"></a>无同步方案</h2><p>要保证线程安全，并不是一定就是要进行同步，两者没有因果关系。同步只是保证共享数据争用时的正确性的手段。</p>\n<ul>\n<li>可重入代码<br>只要输入了相同的数据，就都能返回相同的结果的代码称为可重入代码。</li>\n<li>线程本地存储（ThreadLocal）<br>为每个线程都创建一个变量副本, 每个线程都可以修改自己所拥有的变量副本, 而不会影响其他线程的副本。<br>常用于隔离多个线程之间的共享冲突（例如生产者-消费者模式的实例：经典Web交互模型中的“一个请求对应一个服务器线程”的处理方式）。<br>但ThreadLocal容易出现OOM（内存泄漏，由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用），最好是每次使用完ThreadLocal，都调用它的remove()方法，清除数据。</li>\n</ul>\n<h1 id=\"JVM线程优化\"><a href=\"#JVM线程优化\" class=\"headerlink\" title=\"JVM线程优化\"></a>JVM线程优化</h1><ul>\n<li>锁优化</li>\n<li>锁消除</li>\n<li>锁粗化</li>\n<li>轻量级锁</li>\n<li>偏向锁</li>\n</ul>\n<h1 id=\"Java并发工具\"><a href=\"#Java并发工具\" class=\"headerlink\" title=\"Java并发工具\"></a>Java并发工具</h1><h2 id=\"并发容器\"><a href=\"#并发容器\" class=\"headerlink\" title=\"并发容器\"></a>并发容器</h2><h2 id=\"同步容器\"><a href=\"#同步容器\" class=\"headerlink\" title=\"同步容器\"></a>同步容器</h2><h2 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h2><h2 id=\"Synchronizer\"><a href=\"#Synchronizer\" class=\"headerlink\" title=\"Synchronizer\"></a>Synchronizer</h2><ul>\n<li>CountDownLatch<br>一个线程(或者多个)，等待另外N个线程完成某个事情之后才能执行</li>\n<li>CyclicBarrier<br>N个线程相互等待，任何一个线程完成之前，所有的线程都必须等待</li>\n<li>Exchanger<br>用于成对出现的线程之间交换数据</li>\n</ul>\n<h1 id=\"经典并发问题\"><a href=\"#经典并发问题\" class=\"headerlink\" title=\"经典并发问题\"></a>经典并发问题</h1><ul>\n<li>生产者-消费者问题</li>\n<li>哲学家就餐问题</li>\n<li>读者-作者问题</li>\n<li>熟睡的理发师问题</li>\n<li>三个烟鬼的问题</li>\n</ul>"},{"title":"容器","_content":"\n# Servlet\n\n# Tomcat\n\n# Jetty","source":"_posts/20180725.md","raw":"---\ntitle: 容器\ntags: Tomcat\ncategories: 后端开发\n---\n\n# Servlet\n\n# Tomcat\n\n# Jetty","slug":"20180725","published":1,"date":"2018-09-05T01:33:08.150Z","updated":"2018-10-22T07:00:08.313Z","_id":"cjnaatg82000ldwv39avok7lu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h1><h1 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h1><h1 id=\"Jetty\"><a href=\"#Jetty\" class=\"headerlink\" title=\"Jetty\"></a>Jetty</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h1><h1 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h1><h1 id=\"Jetty\"><a href=\"#Jetty\" class=\"headerlink\" title=\"Jetty\"></a>Jetty</h1>"},{"title":"初识设计模式","_content":"\n设计模式可分三大类：建造型模式，结构型模式，行为型模式\n<!-- more -->\n\n# 基本法则\n* 单一职责原则(Single responsibility principle)\n* 开放封闭原则(Open-Close Principle)\n* 依赖倒转原则(Dependence Inversion Principle)\n* 迪米特法则(Demeter Principle)\n* 里氏代换原则(Liskov Substitution Principle)\n* 接口分离原则(Interface Segregation Principle)\n\n# 创建型模式\n* 简单工厂模式(Simple Factory)(mybatis)\n* 工厂方法模式(Factory Method)\n* 抽象工厂模式(Abstract Factory)\n* 建造者模式(Builder)\n* 单例模式(Singleton)\n* 原型模式(Prototype)\n\n# 结构型模式\n* 适配器模式(Adapter)(Tomcat)\n* 装饰模式(Decorator)\n* 桥架模式(Bridge)\n* 组合模式(Composite)\n* 享元模式(Flyweight)\n* 代理模式(Proxy)(Spring)\n* 外观模式(Facade)(Tomcat)\n\n# 行为型模式\n* 观察者模式(Observer)(Tomcat)\n* 模板方法模式(Template Method)(Spring MVC)\n* 命令模式(Command)(Tomcat)\n* 状态模式(State)\n* 职责链模式(Chain of Responsibility)(Tomcat)\n* 解释器模式(Interpreter)\n* 中介者模式(Mediator)\n* 访问者模式(Visitor)\n* 策略模式(Strategy)(Spring)\n* 备忘录模式(Memento)\n* 迭代器模式(Iterator)\n","source":"_posts/20180802.md","raw":"---\ntitle: 初识设计模式\ntags: 设计模式\ncategories: 后端开发\n---\n\n设计模式可分三大类：建造型模式，结构型模式，行为型模式\n<!-- more -->\n\n# 基本法则\n* 单一职责原则(Single responsibility principle)\n* 开放封闭原则(Open-Close Principle)\n* 依赖倒转原则(Dependence Inversion Principle)\n* 迪米特法则(Demeter Principle)\n* 里氏代换原则(Liskov Substitution Principle)\n* 接口分离原则(Interface Segregation Principle)\n\n# 创建型模式\n* 简单工厂模式(Simple Factory)(mybatis)\n* 工厂方法模式(Factory Method)\n* 抽象工厂模式(Abstract Factory)\n* 建造者模式(Builder)\n* 单例模式(Singleton)\n* 原型模式(Prototype)\n\n# 结构型模式\n* 适配器模式(Adapter)(Tomcat)\n* 装饰模式(Decorator)\n* 桥架模式(Bridge)\n* 组合模式(Composite)\n* 享元模式(Flyweight)\n* 代理模式(Proxy)(Spring)\n* 外观模式(Facade)(Tomcat)\n\n# 行为型模式\n* 观察者模式(Observer)(Tomcat)\n* 模板方法模式(Template Method)(Spring MVC)\n* 命令模式(Command)(Tomcat)\n* 状态模式(State)\n* 职责链模式(Chain of Responsibility)(Tomcat)\n* 解释器模式(Interpreter)\n* 中介者模式(Mediator)\n* 访问者模式(Visitor)\n* 策略模式(Strategy)(Spring)\n* 备忘录模式(Memento)\n* 迭代器模式(Iterator)\n","slug":"20180802","published":1,"date":"2018-08-18T05:00:37.030Z","updated":"2018-10-19T01:05:54.456Z","_id":"cjnaatg86000odwv3vwe28j2h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>设计模式可分三大类：建造型模式，结构型模式，行为型模式<br><a id=\"more\"></a></p>\n<h1 id=\"基本法则\"><a href=\"#基本法则\" class=\"headerlink\" title=\"基本法则\"></a>基本法则</h1><ul>\n<li>单一职责原则(Single responsibility principle)</li>\n<li>开放封闭原则(Open-Close Principle)</li>\n<li>依赖倒转原则(Dependence Inversion Principle)</li>\n<li>迪米特法则(Demeter Principle)</li>\n<li>里氏代换原则(Liskov Substitution Principle)</li>\n<li>接口分离原则(Interface Segregation Principle)</li>\n</ul>\n<h1 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h1><ul>\n<li>简单工厂模式(Simple Factory)(mybatis)</li>\n<li>工厂方法模式(Factory Method)</li>\n<li>抽象工厂模式(Abstract Factory)</li>\n<li>建造者模式(Builder)</li>\n<li>单例模式(Singleton)</li>\n<li>原型模式(Prototype)</li>\n</ul>\n<h1 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h1><ul>\n<li>适配器模式(Adapter)(Tomcat)</li>\n<li>装饰模式(Decorator)</li>\n<li>桥架模式(Bridge)</li>\n<li>组合模式(Composite)</li>\n<li>享元模式(Flyweight)</li>\n<li>代理模式(Proxy)(Spring)</li>\n<li>外观模式(Facade)(Tomcat)</li>\n</ul>\n<h1 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h1><ul>\n<li>观察者模式(Observer)(Tomcat)</li>\n<li>模板方法模式(Template Method)(Spring MVC)</li>\n<li>命令模式(Command)(Tomcat)</li>\n<li>状态模式(State)</li>\n<li>职责链模式(Chain of Responsibility)(Tomcat)</li>\n<li>解释器模式(Interpreter)</li>\n<li>中介者模式(Mediator)</li>\n<li>访问者模式(Visitor)</li>\n<li>策略模式(Strategy)(Spring)</li>\n<li>备忘录模式(Memento)</li>\n<li>迭代器模式(Iterator)</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>设计模式可分三大类：建造型模式，结构型模式，行为型模式<br>","more":"</p>\n<h1 id=\"基本法则\"><a href=\"#基本法则\" class=\"headerlink\" title=\"基本法则\"></a>基本法则</h1><ul>\n<li>单一职责原则(Single responsibility principle)</li>\n<li>开放封闭原则(Open-Close Principle)</li>\n<li>依赖倒转原则(Dependence Inversion Principle)</li>\n<li>迪米特法则(Demeter Principle)</li>\n<li>里氏代换原则(Liskov Substitution Principle)</li>\n<li>接口分离原则(Interface Segregation Principle)</li>\n</ul>\n<h1 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h1><ul>\n<li>简单工厂模式(Simple Factory)(mybatis)</li>\n<li>工厂方法模式(Factory Method)</li>\n<li>抽象工厂模式(Abstract Factory)</li>\n<li>建造者模式(Builder)</li>\n<li>单例模式(Singleton)</li>\n<li>原型模式(Prototype)</li>\n</ul>\n<h1 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h1><ul>\n<li>适配器模式(Adapter)(Tomcat)</li>\n<li>装饰模式(Decorator)</li>\n<li>桥架模式(Bridge)</li>\n<li>组合模式(Composite)</li>\n<li>享元模式(Flyweight)</li>\n<li>代理模式(Proxy)(Spring)</li>\n<li>外观模式(Facade)(Tomcat)</li>\n</ul>\n<h1 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h1><ul>\n<li>观察者模式(Observer)(Tomcat)</li>\n<li>模板方法模式(Template Method)(Spring MVC)</li>\n<li>命令模式(Command)(Tomcat)</li>\n<li>状态模式(State)</li>\n<li>职责链模式(Chain of Responsibility)(Tomcat)</li>\n<li>解释器模式(Interpreter)</li>\n<li>中介者模式(Mediator)</li>\n<li>访问者模式(Visitor)</li>\n<li>策略模式(Strategy)(Spring)</li>\n<li>备忘录模式(Memento)</li>\n<li>迭代器模式(Iterator)</li>\n</ul>"},{"title":"面试常见问题","_content":"\n进入金融领域（电子商务、硬件领域也不错）的上市公司或D轮公司，往架构师方向发展\n优质金融公司：蚂蚁金服、陆金所、拍拍贷、众安在线、微汇金融、麦子金服、点融网、信而富\n优质电商公司：阿里巴巴、京东、美团\n<!-- more -->\n\n# 自我介绍\n## 中文版\n我叫王球，今年25岁，毕业于宿州学院软件工程专业。\n2015年12月份进入苏州科达科技实习，经过三个月的培训后开始做项目直到现在。\n熟练使用SSM框架、MySQL数据库，对微服务和缓存稍微了解。\n因为女朋友在上海，所以到这边来找工作。\n希望多接触一下高并发和高可用。\n可以在一个月以内入职。\n\n## 英文版\nMy name is Wang Qiu. I am 25 years old and I graduated from Suzhou University in the field of software engineering.\nIn December 2015, I entered suzhou kedacom Internship. After three months of training, I began to work on the project until now.\nI Proficient in using SSM framework and MySQL database, a little understanding of micro service and cache.\nBecause my girlfriend is in Shanghai, I came here to look for a job.\nI hope to have more contact with big data and high concurrency.\nI can enter the office within one month.\n\n## 资产管理系统\n* 项目介绍\n客户是运营管理中心，主要完成了资产申请、转移、退还、报废等功能，数据库是MySQL，前台用的LigerUI，后台用的SSHM，经多人陆续开发了四年，系统用户为全公司人员。\n我做了存货跌价模块，做了两个月。\n我负责开发，但在开发前，我在项目经理的带领下参与了需求评审，数据库设计等工作，后期我参与了测试和部署工作。\n\n## 供应商管理系统\n* 项目介绍\n客户是质量部，主要完成了指标配置，评分，考核等功能，数据库是Oracle，前台用的EasyUI，后台用的SSHM，七个人做了两个月。\n我负责指标配置和考核模块。做了两个月。\n我负责开发，但后期由我负责主导联调测试。\n\n## 标准管理系统\n* 亮点\n客户是标准化办公室，主要完成了标准的发布、搜索、预览等功能，数据库是MySQL，前台用的是LayUI，后台用的是SSHM，五个人做了三个月。\n我负责搜索模块，做了两个月。\n我负责开发，但在开发前，我参与了业务调研工作。\n\n## 其他项目（项目小或者时间远）\n财务计息、客户服务、主数据、任职资格、预算、费用报销、报价\n\n## 关键点\n* 在项目上线之前，我们会将正式环境的数据导入测试环境，查看运行效率，优化代码。项目上线后，我们会使用druid监控SQL运行情况，一旦发现问题，我们会第一时间解决。\n* 在项目里，我不仅要做开发的工作，而且需要自己测试，当开发好之后，需要自己部署到Linux上给测试人员进行测试。\n* 遇到问题我先查资料，如果实在没法解决，不会拖，会及时问相关的人（如果是业务方面的，我会及时和项目经理沟通，如果是技术问题，我会自己查资料，如果是测试方面的，我会及时和测试人员沟通），即使加班，也会在规定的时间内解决。\n* 在项目里，我会在保证进度的前提下和项目经理说我的想法，提出我的解决方案。在开发过程中，我会先思考一下，用一种比较好的方式，比如效率最高的方法实现。平时我会不断看一些新技术，会不断深入了解一些框架和技术的实现底层。\n\n# HR面试\n1. 自身缺点\n这么多年，我都是在OA领域发展，对金融行业知识、业务细节的了解和学习还不够，我自己也意识到了这一点，我已经买了很多书比如（曼昆的经济学原理、陈志武的金融的逻辑、宋鸿兵的货币战争），其实也就是想弥补自己这个不足，对我开展工作绝对也是有好处的。\n\n2. 问面试官的问题\n    * 公租房\n    * 晋升制度、培训制度、休假制度、考勤制度、加班/值班制度、其他福利（不必要）\n\n3. 期望薪资\n被问到薪资时先问薪资结构（福利、月度、年度、涨薪）。\n按公司框架来说，我期望的月薪是（13薪1.3）税前元。\n依据是：\n    * 我前一份工作的薪酬水平；\n    * 我预期的涨幅；\n    * 我将入职岗位的价值；\n    * 我与这个岗位的匹配度，以及我在这个岗位上能贡献的额外价值以及获得的额外成长。\n    \n    \n# 任职要求\n\n## 初级Java程序员（扎实的基本功、工作思路开阔）\n1. 精通Java，熟练掌握多线程开发，熟悉Windows/Linux开发环境，两年及以上java开发经验；\n2. 熟练使用shell，熟练使用缓存技术（Redis、MemCache等），并对实现原理有一定了解；\n3. 熟练使用关系数据库，比如Oracle或Mysql；\n4. 深入了解tcp/http等网络传输协议；\n5. 有良好的团队合作意识，耐心，诚恳，有强烈的责任心和积极主动的工作态度，有优秀的学习能力；\n6. 有商用互联网产品或金融行业系统开发经验者优先；\n\n## 高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\n\n### 岗位要求\n1. 精通Java语言，对io、多线程、集合等框架有深入理解；有JVM优化，docker化经验更佳；\n2. 3年以上使用Java进行web开发的经验，熟悉主流技术架构体系，对相关技术领域的开源产品有深入的理解\n3. 有大型分布式、高并发、高可用系统设计、开发和调优经验，例如akka集群、kafka、rocketMQ等消息中间件使用经验优先；\n4. 具备较强的业务分析能力，有电商领域建模，架构经验；\n5. 对技术和互联网有热情，不断追求技术更新；\n\n### 加分项\n* 在Github或其他平台上有过开源项目\n* 在stackoverflow或其他知名社区上有较高声望值\n* 有个人技术博客，公开发布过技术文章、论文等\n* 喜爱运动\n\n## 资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\n\n1. 精通Java，对Java高级特性有深入的掌握，熟悉Java生态体系。\n2. 五年以上的Java系统开发经验，三年以上架构经验，精通面向对象设计，对项目中涉及的开源框架、技术产品、算法等有系统性的深入学习，了解其底层机制和原理。\n3. 有实际中大型系统架构经验，能有效利用技术手段解决实际业务需求。\n4. 对技术富有热情，能关注互联网行业技术发展趋势，勇于尝试，敢于推动。\n5. 良好的沟通能力，勇于承担，能和团队形成合力。\n具备以下能力或经验者优先：\n    分布式环境下高可用程序设计和实现（如银行、证券等高可用系统）\n    信息距离理论基础、智能问答系统、爬虫系统设计和实现。\n    统一数据接口层或类似平台的架构经验（如开发接口平台、GraphQL等）。","source":"_posts/20181010.md","raw":"---\ntitle: 面试常见问题\ntags: 面试\ncategories: 其他\n---\n\n进入金融领域（电子商务、硬件领域也不错）的上市公司或D轮公司，往架构师方向发展\n优质金融公司：蚂蚁金服、陆金所、拍拍贷、众安在线、微汇金融、麦子金服、点融网、信而富\n优质电商公司：阿里巴巴、京东、美团\n<!-- more -->\n\n# 自我介绍\n## 中文版\n我叫王球，今年25岁，毕业于宿州学院软件工程专业。\n2015年12月份进入苏州科达科技实习，经过三个月的培训后开始做项目直到现在。\n熟练使用SSM框架、MySQL数据库，对微服务和缓存稍微了解。\n因为女朋友在上海，所以到这边来找工作。\n希望多接触一下高并发和高可用。\n可以在一个月以内入职。\n\n## 英文版\nMy name is Wang Qiu. I am 25 years old and I graduated from Suzhou University in the field of software engineering.\nIn December 2015, I entered suzhou kedacom Internship. After three months of training, I began to work on the project until now.\nI Proficient in using SSM framework and MySQL database, a little understanding of micro service and cache.\nBecause my girlfriend is in Shanghai, I came here to look for a job.\nI hope to have more contact with big data and high concurrency.\nI can enter the office within one month.\n\n## 资产管理系统\n* 项目介绍\n客户是运营管理中心，主要完成了资产申请、转移、退还、报废等功能，数据库是MySQL，前台用的LigerUI，后台用的SSHM，经多人陆续开发了四年，系统用户为全公司人员。\n我做了存货跌价模块，做了两个月。\n我负责开发，但在开发前，我在项目经理的带领下参与了需求评审，数据库设计等工作，后期我参与了测试和部署工作。\n\n## 供应商管理系统\n* 项目介绍\n客户是质量部，主要完成了指标配置，评分，考核等功能，数据库是Oracle，前台用的EasyUI，后台用的SSHM，七个人做了两个月。\n我负责指标配置和考核模块。做了两个月。\n我负责开发，但后期由我负责主导联调测试。\n\n## 标准管理系统\n* 亮点\n客户是标准化办公室，主要完成了标准的发布、搜索、预览等功能，数据库是MySQL，前台用的是LayUI，后台用的是SSHM，五个人做了三个月。\n我负责搜索模块，做了两个月。\n我负责开发，但在开发前，我参与了业务调研工作。\n\n## 其他项目（项目小或者时间远）\n财务计息、客户服务、主数据、任职资格、预算、费用报销、报价\n\n## 关键点\n* 在项目上线之前，我们会将正式环境的数据导入测试环境，查看运行效率，优化代码。项目上线后，我们会使用druid监控SQL运行情况，一旦发现问题，我们会第一时间解决。\n* 在项目里，我不仅要做开发的工作，而且需要自己测试，当开发好之后，需要自己部署到Linux上给测试人员进行测试。\n* 遇到问题我先查资料，如果实在没法解决，不会拖，会及时问相关的人（如果是业务方面的，我会及时和项目经理沟通，如果是技术问题，我会自己查资料，如果是测试方面的，我会及时和测试人员沟通），即使加班，也会在规定的时间内解决。\n* 在项目里，我会在保证进度的前提下和项目经理说我的想法，提出我的解决方案。在开发过程中，我会先思考一下，用一种比较好的方式，比如效率最高的方法实现。平时我会不断看一些新技术，会不断深入了解一些框架和技术的实现底层。\n\n# HR面试\n1. 自身缺点\n这么多年，我都是在OA领域发展，对金融行业知识、业务细节的了解和学习还不够，我自己也意识到了这一点，我已经买了很多书比如（曼昆的经济学原理、陈志武的金融的逻辑、宋鸿兵的货币战争），其实也就是想弥补自己这个不足，对我开展工作绝对也是有好处的。\n\n2. 问面试官的问题\n    * 公租房\n    * 晋升制度、培训制度、休假制度、考勤制度、加班/值班制度、其他福利（不必要）\n\n3. 期望薪资\n被问到薪资时先问薪资结构（福利、月度、年度、涨薪）。\n按公司框架来说，我期望的月薪是（13薪1.3）税前元。\n依据是：\n    * 我前一份工作的薪酬水平；\n    * 我预期的涨幅；\n    * 我将入职岗位的价值；\n    * 我与这个岗位的匹配度，以及我在这个岗位上能贡献的额外价值以及获得的额外成长。\n    \n    \n# 任职要求\n\n## 初级Java程序员（扎实的基本功、工作思路开阔）\n1. 精通Java，熟练掌握多线程开发，熟悉Windows/Linux开发环境，两年及以上java开发经验；\n2. 熟练使用shell，熟练使用缓存技术（Redis、MemCache等），并对实现原理有一定了解；\n3. 熟练使用关系数据库，比如Oracle或Mysql；\n4. 深入了解tcp/http等网络传输协议；\n5. 有良好的团队合作意识，耐心，诚恳，有强烈的责任心和积极主动的工作态度，有优秀的学习能力；\n6. 有商用互联网产品或金融行业系统开发经验者优先；\n\n## 高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\n\n### 岗位要求\n1. 精通Java语言，对io、多线程、集合等框架有深入理解；有JVM优化，docker化经验更佳；\n2. 3年以上使用Java进行web开发的经验，熟悉主流技术架构体系，对相关技术领域的开源产品有深入的理解\n3. 有大型分布式、高并发、高可用系统设计、开发和调优经验，例如akka集群、kafka、rocketMQ等消息中间件使用经验优先；\n4. 具备较强的业务分析能力，有电商领域建模，架构经验；\n5. 对技术和互联网有热情，不断追求技术更新；\n\n### 加分项\n* 在Github或其他平台上有过开源项目\n* 在stackoverflow或其他知名社区上有较高声望值\n* 有个人技术博客，公开发布过技术文章、论文等\n* 喜爱运动\n\n## 资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\n\n1. 精通Java，对Java高级特性有深入的掌握，熟悉Java生态体系。\n2. 五年以上的Java系统开发经验，三年以上架构经验，精通面向对象设计，对项目中涉及的开源框架、技术产品、算法等有系统性的深入学习，了解其底层机制和原理。\n3. 有实际中大型系统架构经验，能有效利用技术手段解决实际业务需求。\n4. 对技术富有热情，能关注互联网行业技术发展趋势，勇于尝试，敢于推动。\n5. 良好的沟通能力，勇于承担，能和团队形成合力。\n具备以下能力或经验者优先：\n    分布式环境下高可用程序设计和实现（如银行、证券等高可用系统）\n    信息距离理论基础、智能问答系统、爬虫系统设计和实现。\n    统一数据接口层或类似平台的架构经验（如开发接口平台、GraphQL等）。","slug":"20181010","published":1,"date":"2018-10-10T12:38:22.475Z","updated":"2018-10-19T01:03:44.974Z","_id":"cjnaatg8b000sdwv3mp55mlrt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>进入金融领域（电子商务、硬件领域也不错）的上市公司或D轮公司，往架构师方向发展<br>优质金融公司：蚂蚁金服、陆金所、拍拍贷、众安在线、微汇金融、麦子金服、点融网、信而富<br>优质电商公司：阿里巴巴、京东、美团<br><a id=\"more\"></a></p>\n<h1 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h1><h2 id=\"中文版\"><a href=\"#中文版\" class=\"headerlink\" title=\"中文版\"></a>中文版</h2><p>我叫王球，今年25岁，毕业于宿州学院软件工程专业。<br>2015年12月份进入苏州科达科技实习，经过三个月的培训后开始做项目直到现在。<br>熟练使用SSM框架、MySQL数据库，对微服务和缓存稍微了解。<br>因为女朋友在上海，所以到这边来找工作。<br>希望多接触一下高并发和高可用。<br>可以在一个月以内入职。</p>\n<h2 id=\"英文版\"><a href=\"#英文版\" class=\"headerlink\" title=\"英文版\"></a>英文版</h2><p>My name is Wang Qiu. I am 25 years old and I graduated from Suzhou University in the field of software engineering.<br>In December 2015, I entered suzhou kedacom Internship. After three months of training, I began to work on the project until now.<br>I Proficient in using SSM framework and MySQL database, a little understanding of micro service and cache.<br>Because my girlfriend is in Shanghai, I came here to look for a job.<br>I hope to have more contact with big data and high concurrency.<br>I can enter the office within one month.</p>\n<h2 id=\"资产管理系统\"><a href=\"#资产管理系统\" class=\"headerlink\" title=\"资产管理系统\"></a>资产管理系统</h2><ul>\n<li>项目介绍<br>客户是运营管理中心，主要完成了资产申请、转移、退还、报废等功能，数据库是MySQL，前台用的LigerUI，后台用的SSHM，经多人陆续开发了四年，系统用户为全公司人员。<br>我做了存货跌价模块，做了两个月。<br>我负责开发，但在开发前，我在项目经理的带领下参与了需求评审，数据库设计等工作，后期我参与了测试和部署工作。</li>\n</ul>\n<h2 id=\"供应商管理系统\"><a href=\"#供应商管理系统\" class=\"headerlink\" title=\"供应商管理系统\"></a>供应商管理系统</h2><ul>\n<li>项目介绍<br>客户是质量部，主要完成了指标配置，评分，考核等功能，数据库是Oracle，前台用的EasyUI，后台用的SSHM，七个人做了两个月。<br>我负责指标配置和考核模块。做了两个月。<br>我负责开发，但后期由我负责主导联调测试。</li>\n</ul>\n<h2 id=\"标准管理系统\"><a href=\"#标准管理系统\" class=\"headerlink\" title=\"标准管理系统\"></a>标准管理系统</h2><ul>\n<li>亮点<br>客户是标准化办公室，主要完成了标准的发布、搜索、预览等功能，数据库是MySQL，前台用的是LayUI，后台用的是SSHM，五个人做了三个月。<br>我负责搜索模块，做了两个月。<br>我负责开发，但在开发前，我参与了业务调研工作。</li>\n</ul>\n<h2 id=\"其他项目（项目小或者时间远）\"><a href=\"#其他项目（项目小或者时间远）\" class=\"headerlink\" title=\"其他项目（项目小或者时间远）\"></a>其他项目（项目小或者时间远）</h2><p>财务计息、客户服务、主数据、任职资格、预算、费用报销、报价</p>\n<h2 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h2><ul>\n<li>在项目上线之前，我们会将正式环境的数据导入测试环境，查看运行效率，优化代码。项目上线后，我们会使用druid监控SQL运行情况，一旦发现问题，我们会第一时间解决。</li>\n<li>在项目里，我不仅要做开发的工作，而且需要自己测试，当开发好之后，需要自己部署到Linux上给测试人员进行测试。</li>\n<li>遇到问题我先查资料，如果实在没法解决，不会拖，会及时问相关的人（如果是业务方面的，我会及时和项目经理沟通，如果是技术问题，我会自己查资料，如果是测试方面的，我会及时和测试人员沟通），即使加班，也会在规定的时间内解决。</li>\n<li>在项目里，我会在保证进度的前提下和项目经理说我的想法，提出我的解决方案。在开发过程中，我会先思考一下，用一种比较好的方式，比如效率最高的方法实现。平时我会不断看一些新技术，会不断深入了解一些框架和技术的实现底层。</li>\n</ul>\n<h1 id=\"HR面试\"><a href=\"#HR面试\" class=\"headerlink\" title=\"HR面试\"></a>HR面试</h1><ol>\n<li><p>自身缺点<br>这么多年，我都是在OA领域发展，对金融行业知识、业务细节的了解和学习还不够，我自己也意识到了这一点，我已经买了很多书比如（曼昆的经济学原理、陈志武的金融的逻辑、宋鸿兵的货币战争），其实也就是想弥补自己这个不足，对我开展工作绝对也是有好处的。</p>\n</li>\n<li><p>问面试官的问题</p>\n<ul>\n<li>公租房</li>\n<li>晋升制度、培训制度、休假制度、考勤制度、加班/值班制度、其他福利（不必要）</li>\n</ul>\n</li>\n<li><p>期望薪资<br>被问到薪资时先问薪资结构（福利、月度、年度、涨薪）。<br>按公司框架来说，我期望的月薪是（13薪1.3）税前元。<br>依据是：</p>\n<ul>\n<li>我前一份工作的薪酬水平；</li>\n<li>我预期的涨幅；</li>\n<li>我将入职岗位的价值；</li>\n<li>我与这个岗位的匹配度，以及我在这个岗位上能贡献的额外价值以及获得的额外成长。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"任职要求\"><a href=\"#任职要求\" class=\"headerlink\" title=\"任职要求\"></a>任职要求</h1><h2 id=\"初级Java程序员（扎实的基本功、工作思路开阔）\"><a href=\"#初级Java程序员（扎实的基本功、工作思路开阔）\" class=\"headerlink\" title=\"初级Java程序员（扎实的基本功、工作思路开阔）\"></a>初级Java程序员（扎实的基本功、工作思路开阔）</h2><ol>\n<li>精通Java，熟练掌握多线程开发，熟悉Windows/Linux开发环境，两年及以上java开发经验；</li>\n<li>熟练使用shell，熟练使用缓存技术（Redis、MemCache等），并对实现原理有一定了解；</li>\n<li>熟练使用关系数据库，比如Oracle或Mysql；</li>\n<li>深入了解tcp/http等网络传输协议；</li>\n<li>有良好的团队合作意识，耐心，诚恳，有强烈的责任心和积极主动的工作态度，有优秀的学习能力；</li>\n<li>有商用互联网产品或金融行业系统开发经验者优先；</li>\n</ol>\n<h2 id=\"高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\"><a href=\"#高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\" class=\"headerlink\" title=\"高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\"></a>高级Java程序员（纵向的技术沉淀，横向知识面的拓展）</h2><h3 id=\"岗位要求\"><a href=\"#岗位要求\" class=\"headerlink\" title=\"岗位要求\"></a>岗位要求</h3><ol>\n<li>精通Java语言，对io、多线程、集合等框架有深入理解；有JVM优化，docker化经验更佳；</li>\n<li>3年以上使用Java进行web开发的经验，熟悉主流技术架构体系，对相关技术领域的开源产品有深入的理解</li>\n<li>有大型分布式、高并发、高可用系统设计、开发和调优经验，例如akka集群、kafka、rocketMQ等消息中间件使用经验优先；</li>\n<li>具备较强的业务分析能力，有电商领域建模，架构经验；</li>\n<li>对技术和互联网有热情，不断追求技术更新；</li>\n</ol>\n<h3 id=\"加分项\"><a href=\"#加分项\" class=\"headerlink\" title=\"加分项\"></a>加分项</h3><ul>\n<li>在Github或其他平台上有过开源项目</li>\n<li>在stackoverflow或其他知名社区上有较高声望值</li>\n<li>有个人技术博客，公开发布过技术文章、论文等</li>\n<li>喜爱运动</li>\n</ul>\n<h2 id=\"资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\"><a href=\"#资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\" class=\"headerlink\" title=\"资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\"></a>资深java程序员（业务角度进行技术规划、技术团队的管理与激励）</h2><ol>\n<li>精通Java，对Java高级特性有深入的掌握，熟悉Java生态体系。</li>\n<li>五年以上的Java系统开发经验，三年以上架构经验，精通面向对象设计，对项目中涉及的开源框架、技术产品、算法等有系统性的深入学习，了解其底层机制和原理。</li>\n<li>有实际中大型系统架构经验，能有效利用技术手段解决实际业务需求。</li>\n<li>对技术富有热情，能关注互联网行业技术发展趋势，勇于尝试，敢于推动。</li>\n<li>良好的沟通能力，勇于承担，能和团队形成合力。<br>具备以下能力或经验者优先：<br> 分布式环境下高可用程序设计和实现（如银行、证券等高可用系统）<br> 信息距离理论基础、智能问答系统、爬虫系统设计和实现。<br> 统一数据接口层或类似平台的架构经验（如开发接口平台、GraphQL等）。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>进入金融领域（电子商务、硬件领域也不错）的上市公司或D轮公司，往架构师方向发展<br>优质金融公司：蚂蚁金服、陆金所、拍拍贷、众安在线、微汇金融、麦子金服、点融网、信而富<br>优质电商公司：阿里巴巴、京东、美团<br>","more":"</p>\n<h1 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h1><h2 id=\"中文版\"><a href=\"#中文版\" class=\"headerlink\" title=\"中文版\"></a>中文版</h2><p>我叫王球，今年25岁，毕业于宿州学院软件工程专业。<br>2015年12月份进入苏州科达科技实习，经过三个月的培训后开始做项目直到现在。<br>熟练使用SSM框架、MySQL数据库，对微服务和缓存稍微了解。<br>因为女朋友在上海，所以到这边来找工作。<br>希望多接触一下高并发和高可用。<br>可以在一个月以内入职。</p>\n<h2 id=\"英文版\"><a href=\"#英文版\" class=\"headerlink\" title=\"英文版\"></a>英文版</h2><p>My name is Wang Qiu. I am 25 years old and I graduated from Suzhou University in the field of software engineering.<br>In December 2015, I entered suzhou kedacom Internship. After three months of training, I began to work on the project until now.<br>I Proficient in using SSM framework and MySQL database, a little understanding of micro service and cache.<br>Because my girlfriend is in Shanghai, I came here to look for a job.<br>I hope to have more contact with big data and high concurrency.<br>I can enter the office within one month.</p>\n<h2 id=\"资产管理系统\"><a href=\"#资产管理系统\" class=\"headerlink\" title=\"资产管理系统\"></a>资产管理系统</h2><ul>\n<li>项目介绍<br>客户是运营管理中心，主要完成了资产申请、转移、退还、报废等功能，数据库是MySQL，前台用的LigerUI，后台用的SSHM，经多人陆续开发了四年，系统用户为全公司人员。<br>我做了存货跌价模块，做了两个月。<br>我负责开发，但在开发前，我在项目经理的带领下参与了需求评审，数据库设计等工作，后期我参与了测试和部署工作。</li>\n</ul>\n<h2 id=\"供应商管理系统\"><a href=\"#供应商管理系统\" class=\"headerlink\" title=\"供应商管理系统\"></a>供应商管理系统</h2><ul>\n<li>项目介绍<br>客户是质量部，主要完成了指标配置，评分，考核等功能，数据库是Oracle，前台用的EasyUI，后台用的SSHM，七个人做了两个月。<br>我负责指标配置和考核模块。做了两个月。<br>我负责开发，但后期由我负责主导联调测试。</li>\n</ul>\n<h2 id=\"标准管理系统\"><a href=\"#标准管理系统\" class=\"headerlink\" title=\"标准管理系统\"></a>标准管理系统</h2><ul>\n<li>亮点<br>客户是标准化办公室，主要完成了标准的发布、搜索、预览等功能，数据库是MySQL，前台用的是LayUI，后台用的是SSHM，五个人做了三个月。<br>我负责搜索模块，做了两个月。<br>我负责开发，但在开发前，我参与了业务调研工作。</li>\n</ul>\n<h2 id=\"其他项目（项目小或者时间远）\"><a href=\"#其他项目（项目小或者时间远）\" class=\"headerlink\" title=\"其他项目（项目小或者时间远）\"></a>其他项目（项目小或者时间远）</h2><p>财务计息、客户服务、主数据、任职资格、预算、费用报销、报价</p>\n<h2 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h2><ul>\n<li>在项目上线之前，我们会将正式环境的数据导入测试环境，查看运行效率，优化代码。项目上线后，我们会使用druid监控SQL运行情况，一旦发现问题，我们会第一时间解决。</li>\n<li>在项目里，我不仅要做开发的工作，而且需要自己测试，当开发好之后，需要自己部署到Linux上给测试人员进行测试。</li>\n<li>遇到问题我先查资料，如果实在没法解决，不会拖，会及时问相关的人（如果是业务方面的，我会及时和项目经理沟通，如果是技术问题，我会自己查资料，如果是测试方面的，我会及时和测试人员沟通），即使加班，也会在规定的时间内解决。</li>\n<li>在项目里，我会在保证进度的前提下和项目经理说我的想法，提出我的解决方案。在开发过程中，我会先思考一下，用一种比较好的方式，比如效率最高的方法实现。平时我会不断看一些新技术，会不断深入了解一些框架和技术的实现底层。</li>\n</ul>\n<h1 id=\"HR面试\"><a href=\"#HR面试\" class=\"headerlink\" title=\"HR面试\"></a>HR面试</h1><ol>\n<li><p>自身缺点<br>这么多年，我都是在OA领域发展，对金融行业知识、业务细节的了解和学习还不够，我自己也意识到了这一点，我已经买了很多书比如（曼昆的经济学原理、陈志武的金融的逻辑、宋鸿兵的货币战争），其实也就是想弥补自己这个不足，对我开展工作绝对也是有好处的。</p>\n</li>\n<li><p>问面试官的问题</p>\n<ul>\n<li>公租房</li>\n<li>晋升制度、培训制度、休假制度、考勤制度、加班/值班制度、其他福利（不必要）</li>\n</ul>\n</li>\n<li><p>期望薪资<br>被问到薪资时先问薪资结构（福利、月度、年度、涨薪）。<br>按公司框架来说，我期望的月薪是（13薪1.3）税前元。<br>依据是：</p>\n<ul>\n<li>我前一份工作的薪酬水平；</li>\n<li>我预期的涨幅；</li>\n<li>我将入职岗位的价值；</li>\n<li>我与这个岗位的匹配度，以及我在这个岗位上能贡献的额外价值以及获得的额外成长。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"任职要求\"><a href=\"#任职要求\" class=\"headerlink\" title=\"任职要求\"></a>任职要求</h1><h2 id=\"初级Java程序员（扎实的基本功、工作思路开阔）\"><a href=\"#初级Java程序员（扎实的基本功、工作思路开阔）\" class=\"headerlink\" title=\"初级Java程序员（扎实的基本功、工作思路开阔）\"></a>初级Java程序员（扎实的基本功、工作思路开阔）</h2><ol>\n<li>精通Java，熟练掌握多线程开发，熟悉Windows/Linux开发环境，两年及以上java开发经验；</li>\n<li>熟练使用shell，熟练使用缓存技术（Redis、MemCache等），并对实现原理有一定了解；</li>\n<li>熟练使用关系数据库，比如Oracle或Mysql；</li>\n<li>深入了解tcp/http等网络传输协议；</li>\n<li>有良好的团队合作意识，耐心，诚恳，有强烈的责任心和积极主动的工作态度，有优秀的学习能力；</li>\n<li>有商用互联网产品或金融行业系统开发经验者优先；</li>\n</ol>\n<h2 id=\"高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\"><a href=\"#高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\" class=\"headerlink\" title=\"高级Java程序员（纵向的技术沉淀，横向知识面的拓展）\"></a>高级Java程序员（纵向的技术沉淀，横向知识面的拓展）</h2><h3 id=\"岗位要求\"><a href=\"#岗位要求\" class=\"headerlink\" title=\"岗位要求\"></a>岗位要求</h3><ol>\n<li>精通Java语言，对io、多线程、集合等框架有深入理解；有JVM优化，docker化经验更佳；</li>\n<li>3年以上使用Java进行web开发的经验，熟悉主流技术架构体系，对相关技术领域的开源产品有深入的理解</li>\n<li>有大型分布式、高并发、高可用系统设计、开发和调优经验，例如akka集群、kafka、rocketMQ等消息中间件使用经验优先；</li>\n<li>具备较强的业务分析能力，有电商领域建模，架构经验；</li>\n<li>对技术和互联网有热情，不断追求技术更新；</li>\n</ol>\n<h3 id=\"加分项\"><a href=\"#加分项\" class=\"headerlink\" title=\"加分项\"></a>加分项</h3><ul>\n<li>在Github或其他平台上有过开源项目</li>\n<li>在stackoverflow或其他知名社区上有较高声望值</li>\n<li>有个人技术博客，公开发布过技术文章、论文等</li>\n<li>喜爱运动</li>\n</ul>\n<h2 id=\"资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\"><a href=\"#资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\" class=\"headerlink\" title=\"资深java程序员（业务角度进行技术规划、技术团队的管理与激励）\"></a>资深java程序员（业务角度进行技术规划、技术团队的管理与激励）</h2><ol>\n<li>精通Java，对Java高级特性有深入的掌握，熟悉Java生态体系。</li>\n<li>五年以上的Java系统开发经验，三年以上架构经验，精通面向对象设计，对项目中涉及的开源框架、技术产品、算法等有系统性的深入学习，了解其底层机制和原理。</li>\n<li>有实际中大型系统架构经验，能有效利用技术手段解决实际业务需求。</li>\n<li>对技术富有热情，能关注互联网行业技术发展趋势，勇于尝试，敢于推动。</li>\n<li>良好的沟通能力，勇于承担，能和团队形成合力。<br>具备以下能力或经验者优先：<br> 分布式环境下高可用程序设计和实现（如银行、证券等高可用系统）<br> 信息距离理论基础、智能问答系统、爬虫系统设计和实现。<br> 统一数据接口层或类似平台的架构经验（如开发接口平台、GraphQL等）。</li>\n</ol>"},{"title":"SQL优化及技巧","_content":"\n开发中经常遇到以下情况：\n* sql执行非常耗时\n* 行转列或列转行\n\n故记录一下解决思路，并记录一些常用函数\n<!-- more -->\n\n# SQL优化（MySQL）\n## 索引\n* 索引的类型\n    * unique(唯一索引)：不可以出现相同的值，可以有NULL值\n    * normal(普通索引)：允许出现相同的索引内容\n    * primary key(主键索引)：不允许出现相同的值\n    * full text(全文索引)：可以针对值中的某个单词，但效率确实不敢恭维\n    * 组合索引：实质上是将多个字段建到一个索引里，列值的组合必须唯一\n* 索引的类别\n    * B树（二叉树）、B-树、B+树（重点掌握）、B*树\n    * 哈希索引\n        * 自适应哈希索引：Innodb存储引擎会监控对表上各索引页的查询。如果观察到建立哈希索引可以带来速度提升，则建立哈希索引，称之为自适应哈希索引（AHI），AHI是通过缓冲池的B+树页构造而来，因此建立的速度很快，而且不需要对整张表构建哈希索引。Innodb存储引擎会自动根据访问的频率和模式来自动地为某些热点页建立哈希索引\n* 索引的原理\n通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。\n\n## 存储引擎\n\n## 查看计划\n使用explain来查看sql的执行计划，其中type（使用到的索引类型）比较重要：\n\n| 类型 | 说明 |\n| --- | ------ |\n| system | 根据主键或者唯一索引进行的查询 |\n| const | 根据主键或者唯一索引进行的查询 |\n| eq_ref | 使用唯一索引的前缀扫描 |\n| ref | 使用非唯一性索引或者唯一索引的前缀扫描 |\n| range | 索引范围扫描 |\n| index | 索引全扫描 |\n| all | 全表扫描 |\n| NULL | MYSQL不用访问表或者索引就直接能到结果 |\n\n从最好到最差依次是：\n`system > const > eq_ref > ref > range > index > all`\n一般来说，保证查询至少要达到range，最好达到ref\n\n## 优化技巧\n首先要精简SQL（多余的表关联、重复的表访问、冗余的关联（过滤）条件、不必要的DISTINCT\\ORDER BY\\GROUP BY、曲折的访问路径）,其次驱动表的数据量要足够的少，最后集合操作是二维关系数据库引擎在数据处理时的根本。因此一个高效的SQL一定有一个合理的集合运算结构。根据业务需求，结合代码逻辑，有的时候需要将代码片通过子查询封装；而有的时候又需要将子查询合并到主查询中；有的时候需要将大集合根据业务逻辑切片成多个小的集合；有的时候又需要将若干个小的集合预先合并成大集合。总之，在进行SQL（优化）时，要用集合的思维指导SQL（优化）。\n## 索引\n* 缺点\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，因为索引也要同时保存。\n* 技巧\n    * 建议使用索引的列：在where和join中出现的列、经常进行select操作的列\n    * 索引列的要求：不会包含NULL、值比较唯一、非text、image和bit数据类型的列\n    * 避免索引失效：不使用like‘%aaa%’、不使用NOT IN 、<>、！=操作、不要在列上进行运算、join操作时主键和外键的数据类型要相同\n\n# 行列互转(Oracle)\n[官方文档地址](http://www.oracle.com/technetwork/cn/articles/11g-pivot-101924-zhs.html)\n* pivot：行转列\n* unpivot：列转行","source":"_posts/20180815.md","raw":"---\ntitle: SQL优化及技巧\ntags: [MySQL,Oracle]\ncategories: 数据库\n---\n\n开发中经常遇到以下情况：\n* sql执行非常耗时\n* 行转列或列转行\n\n故记录一下解决思路，并记录一些常用函数\n<!-- more -->\n\n# SQL优化（MySQL）\n## 索引\n* 索引的类型\n    * unique(唯一索引)：不可以出现相同的值，可以有NULL值\n    * normal(普通索引)：允许出现相同的索引内容\n    * primary key(主键索引)：不允许出现相同的值\n    * full text(全文索引)：可以针对值中的某个单词，但效率确实不敢恭维\n    * 组合索引：实质上是将多个字段建到一个索引里，列值的组合必须唯一\n* 索引的类别\n    * B树（二叉树）、B-树、B+树（重点掌握）、B*树\n    * 哈希索引\n        * 自适应哈希索引：Innodb存储引擎会监控对表上各索引页的查询。如果观察到建立哈希索引可以带来速度提升，则建立哈希索引，称之为自适应哈希索引（AHI），AHI是通过缓冲池的B+树页构造而来，因此建立的速度很快，而且不需要对整张表构建哈希索引。Innodb存储引擎会自动根据访问的频率和模式来自动地为某些热点页建立哈希索引\n* 索引的原理\n通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。\n\n## 存储引擎\n\n## 查看计划\n使用explain来查看sql的执行计划，其中type（使用到的索引类型）比较重要：\n\n| 类型 | 说明 |\n| --- | ------ |\n| system | 根据主键或者唯一索引进行的查询 |\n| const | 根据主键或者唯一索引进行的查询 |\n| eq_ref | 使用唯一索引的前缀扫描 |\n| ref | 使用非唯一性索引或者唯一索引的前缀扫描 |\n| range | 索引范围扫描 |\n| index | 索引全扫描 |\n| all | 全表扫描 |\n| NULL | MYSQL不用访问表或者索引就直接能到结果 |\n\n从最好到最差依次是：\n`system > const > eq_ref > ref > range > index > all`\n一般来说，保证查询至少要达到range，最好达到ref\n\n## 优化技巧\n首先要精简SQL（多余的表关联、重复的表访问、冗余的关联（过滤）条件、不必要的DISTINCT\\ORDER BY\\GROUP BY、曲折的访问路径）,其次驱动表的数据量要足够的少，最后集合操作是二维关系数据库引擎在数据处理时的根本。因此一个高效的SQL一定有一个合理的集合运算结构。根据业务需求，结合代码逻辑，有的时候需要将代码片通过子查询封装；而有的时候又需要将子查询合并到主查询中；有的时候需要将大集合根据业务逻辑切片成多个小的集合；有的时候又需要将若干个小的集合预先合并成大集合。总之，在进行SQL（优化）时，要用集合的思维指导SQL（优化）。\n## 索引\n* 缺点\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，因为索引也要同时保存。\n* 技巧\n    * 建议使用索引的列：在where和join中出现的列、经常进行select操作的列\n    * 索引列的要求：不会包含NULL、值比较唯一、非text、image和bit数据类型的列\n    * 避免索引失效：不使用like‘%aaa%’、不使用NOT IN 、<>、！=操作、不要在列上进行运算、join操作时主键和外键的数据类型要相同\n\n# 行列互转(Oracle)\n[官方文档地址](http://www.oracle.com/technetwork/cn/articles/11g-pivot-101924-zhs.html)\n* pivot：行转列\n* unpivot：列转行","slug":"20180815","published":1,"date":"2018-09-05T01:33:08.156Z","updated":"2018-10-23T05:16:36.098Z","_id":"cjnaatg8l000ydwv3vtc97c0c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>开发中经常遇到以下情况：</p>\n<ul>\n<li>sql执行非常耗时</li>\n<li>行转列或列转行</li>\n</ul>\n<p>故记录一下解决思路，并记录一些常用函数<br><a id=\"more\"></a></p>\n<h1 id=\"SQL优化（MySQL）\"><a href=\"#SQL优化（MySQL）\" class=\"headerlink\" title=\"SQL优化（MySQL）\"></a>SQL优化（MySQL）</h1><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>索引的类型<ul>\n<li>unique(唯一索引)：不可以出现相同的值，可以有NULL值</li>\n<li>normal(普通索引)：允许出现相同的索引内容</li>\n<li>primary key(主键索引)：不允许出现相同的值</li>\n<li>full text(全文索引)：可以针对值中的某个单词，但效率确实不敢恭维</li>\n<li>组合索引：实质上是将多个字段建到一个索引里，列值的组合必须唯一</li>\n</ul>\n</li>\n<li>索引的类别<ul>\n<li>B树（二叉树）、B-树、B+树（重点掌握）、B*树</li>\n<li>哈希索引<ul>\n<li>自适应哈希索引：Innodb存储引擎会监控对表上各索引页的查询。如果观察到建立哈希索引可以带来速度提升，则建立哈希索引，称之为自适应哈希索引（AHI），AHI是通过缓冲池的B+树页构造而来，因此建立的速度很快，而且不需要对整张表构建哈希索引。Innodb存储引擎会自动根据访问的频率和模式来自动地为某些热点页建立哈希索引</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>索引的原理<br>通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。</li>\n</ul>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><h2 id=\"查看计划\"><a href=\"#查看计划\" class=\"headerlink\" title=\"查看计划\"></a>查看计划</h2><p>使用explain来查看sql的执行计划，其中type（使用到的索引类型）比较重要：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>system</td>\n<td>根据主键或者唯一索引进行的查询</td>\n</tr>\n<tr>\n<td>const</td>\n<td>根据主键或者唯一索引进行的查询</td>\n</tr>\n<tr>\n<td>eq_ref</td>\n<td>使用唯一索引的前缀扫描</td>\n</tr>\n<tr>\n<td>ref</td>\n<td>使用非唯一性索引或者唯一索引的前缀扫描</td>\n</tr>\n<tr>\n<td>range</td>\n<td>索引范围扫描</td>\n</tr>\n<tr>\n<td>index</td>\n<td>索引全扫描</td>\n</tr>\n<tr>\n<td>all</td>\n<td>全表扫描</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>MYSQL不用访问表或者索引就直接能到结果</td>\n</tr>\n</tbody>\n</table>\n<p>从最好到最差依次是：<br><code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</code><br>一般来说，保证查询至少要达到range，最好达到ref</p>\n<h2 id=\"优化技巧\"><a href=\"#优化技巧\" class=\"headerlink\" title=\"优化技巧\"></a>优化技巧</h2><p>首先要精简SQL（多余的表关联、重复的表访问、冗余的关联（过滤）条件、不必要的DISTINCT\\ORDER BY\\GROUP BY、曲折的访问路径）,其次驱动表的数据量要足够的少，最后集合操作是二维关系数据库引擎在数据处理时的根本。因此一个高效的SQL一定有一个合理的集合运算结构。根据业务需求，结合代码逻辑，有的时候需要将代码片通过子查询封装；而有的时候又需要将子查询合并到主查询中；有的时候需要将大集合根据业务逻辑切片成多个小的集合；有的时候又需要将若干个小的集合预先合并成大集合。总之，在进行SQL（优化）时，要用集合的思维指导SQL（优化）。</p>\n<h2 id=\"索引-1\"><a href=\"#索引-1\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>缺点<br>虽然索引大大提高了查询速度，同时却会降低更新表的速度，因为索引也要同时保存。</li>\n<li>技巧<ul>\n<li>建议使用索引的列：在where和join中出现的列、经常进行select操作的列</li>\n<li>索引列的要求：不会包含NULL、值比较唯一、非text、image和bit数据类型的列</li>\n<li>避免索引失效：不使用like‘%aaa%’、不使用NOT IN 、&lt;&gt;、！=操作、不要在列上进行运算、join操作时主键和外键的数据类型要相同</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"行列互转-Oracle\"><a href=\"#行列互转-Oracle\" class=\"headerlink\" title=\"行列互转(Oracle)\"></a>行列互转(Oracle)</h1><p><a href=\"http://www.oracle.com/technetwork/cn/articles/11g-pivot-101924-zhs.html\" target=\"_blank\" rel=\"external\">官方文档地址</a></p>\n<ul>\n<li>pivot：行转列</li>\n<li>unpivot：列转行</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>开发中经常遇到以下情况：</p>\n<ul>\n<li>sql执行非常耗时</li>\n<li>行转列或列转行</li>\n</ul>\n<p>故记录一下解决思路，并记录一些常用函数<br>","more":"</p>\n<h1 id=\"SQL优化（MySQL）\"><a href=\"#SQL优化（MySQL）\" class=\"headerlink\" title=\"SQL优化（MySQL）\"></a>SQL优化（MySQL）</h1><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>索引的类型<ul>\n<li>unique(唯一索引)：不可以出现相同的值，可以有NULL值</li>\n<li>normal(普通索引)：允许出现相同的索引内容</li>\n<li>primary key(主键索引)：不允许出现相同的值</li>\n<li>full text(全文索引)：可以针对值中的某个单词，但效率确实不敢恭维</li>\n<li>组合索引：实质上是将多个字段建到一个索引里，列值的组合必须唯一</li>\n</ul>\n</li>\n<li>索引的类别<ul>\n<li>B树（二叉树）、B-树、B+树（重点掌握）、B*树</li>\n<li>哈希索引<ul>\n<li>自适应哈希索引：Innodb存储引擎会监控对表上各索引页的查询。如果观察到建立哈希索引可以带来速度提升，则建立哈希索引，称之为自适应哈希索引（AHI），AHI是通过缓冲池的B+树页构造而来，因此建立的速度很快，而且不需要对整张表构建哈希索引。Innodb存储引擎会自动根据访问的频率和模式来自动地为某些热点页建立哈希索引</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>索引的原理<br>通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。</li>\n</ul>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><h2 id=\"查看计划\"><a href=\"#查看计划\" class=\"headerlink\" title=\"查看计划\"></a>查看计划</h2><p>使用explain来查看sql的执行计划，其中type（使用到的索引类型）比较重要：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>system</td>\n<td>根据主键或者唯一索引进行的查询</td>\n</tr>\n<tr>\n<td>const</td>\n<td>根据主键或者唯一索引进行的查询</td>\n</tr>\n<tr>\n<td>eq_ref</td>\n<td>使用唯一索引的前缀扫描</td>\n</tr>\n<tr>\n<td>ref</td>\n<td>使用非唯一性索引或者唯一索引的前缀扫描</td>\n</tr>\n<tr>\n<td>range</td>\n<td>索引范围扫描</td>\n</tr>\n<tr>\n<td>index</td>\n<td>索引全扫描</td>\n</tr>\n<tr>\n<td>all</td>\n<td>全表扫描</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>MYSQL不用访问表或者索引就直接能到结果</td>\n</tr>\n</tbody>\n</table>\n<p>从最好到最差依次是：<br><code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</code><br>一般来说，保证查询至少要达到range，最好达到ref</p>\n<h2 id=\"优化技巧\"><a href=\"#优化技巧\" class=\"headerlink\" title=\"优化技巧\"></a>优化技巧</h2><p>首先要精简SQL（多余的表关联、重复的表访问、冗余的关联（过滤）条件、不必要的DISTINCT\\ORDER BY\\GROUP BY、曲折的访问路径）,其次驱动表的数据量要足够的少，最后集合操作是二维关系数据库引擎在数据处理时的根本。因此一个高效的SQL一定有一个合理的集合运算结构。根据业务需求，结合代码逻辑，有的时候需要将代码片通过子查询封装；而有的时候又需要将子查询合并到主查询中；有的时候需要将大集合根据业务逻辑切片成多个小的集合；有的时候又需要将若干个小的集合预先合并成大集合。总之，在进行SQL（优化）时，要用集合的思维指导SQL（优化）。</p>\n<h2 id=\"索引-1\"><a href=\"#索引-1\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>缺点<br>虽然索引大大提高了查询速度，同时却会降低更新表的速度，因为索引也要同时保存。</li>\n<li>技巧<ul>\n<li>建议使用索引的列：在where和join中出现的列、经常进行select操作的列</li>\n<li>索引列的要求：不会包含NULL、值比较唯一、非text、image和bit数据类型的列</li>\n<li>避免索引失效：不使用like‘%aaa%’、不使用NOT IN 、&lt;&gt;、！=操作、不要在列上进行运算、join操作时主键和外键的数据类型要相同</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"行列互转-Oracle\"><a href=\"#行列互转-Oracle\" class=\"headerlink\" title=\"行列互转(Oracle)\"></a>行列互转(Oracle)</h1><p><a href=\"http://www.oracle.com/technetwork/cn/articles/11g-pivot-101924-zhs.html\" target=\"_blank\" rel=\"external\">官方文档地址</a></p>\n<ul>\n<li>pivot：行转列</li>\n<li>unpivot：列转行</li>\n</ul>"},{"title":"初识微服务","_content":"\n架构演进趋势：单体架构、垂直架构、SOA架构、微服务架构\n微服务架构，是以专注于单一责任的小型功能模块为基础、通过API集相互通信的方式完成复杂业务系统搭建的一种设计思想。\n<!-- more -->\n# 挑战性工作\n* 业务拆分，体现在设计环节：在设计的时候，要有足够的判断力来合理的规划服务之间的界限。\n\n* 服务治理，底层技术的支持：首先要选一款适合自己实际情况的分布式服务基础框架，对于服务的发现、治理、熔断、降级，都要做好相应的技术准备。\n\n* 自动测试，一定要自动化。微服务一个明显的表象就是随着服务的增多，如果继续沿用传统的测试模式就会遇到瓶颈，为了保证高效的迭代，尽量做到更多的环节实现自动化。\n\n* 自动运维 ：微服务拆分之后，每个服务都可以独立部署，进而言之应该是随时随地可以升级。尤其当互联网发展到今天，业务要保持对市场变化的一个高效响应，自动化运维就是提升交付速度的一个重要环节。\n\n* 监控：包括硬件环境、服务状态、系统健康度、接口调用情况、异常的实时告警以及潜在问题的事先预警等等。监控在实施微服务过程中会重要到什么程度呢?一句话：没准备好监控，就不要搞微服务。\n\n# 微服务框架选择\n[文章](https://blog.csdn.net/u010664947/article/details/80007767)\nSpring Cloud整机，dubbo需要自己组装；整机的性能有保证，组装的机子更自由。\n注册中心：dubbo可以选择zk、redis，Spring Cloud只能用Eureka或自研\nCAP理论：Zookeeper 保证的是CP，Eureka 设计则遵循AP原则\n\n# Spring Cloud特性：\n* 分布式/版本化配置(Distributed/versioned configuration)\n\n* 服务注册与发现(Service registration and discovery)\n\n* 路由(Routing)\n\n* 服务和服务之间的调用(Service-to-service calls)\n\n* 负载均衡(Load balancing)\n\n* 断路器(Circuit Breakers)\n\n* 全局锁(Global locks)\n\n* 选主与集群状态(Leadership election and cluster state)\n\n* 分布式消息传递(Distributed messaging)\n\n# 官方文档\n## Spring Cloud\n[官方文档](http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html)\n## Spring Cloud Data Flow\n[官方文档](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started)\n","source":"_posts/20180916.md","raw":"---\ntitle: 初识微服务\ntags: 微服务\ncategories: 前沿技术\n---\n\n架构演进趋势：单体架构、垂直架构、SOA架构、微服务架构\n微服务架构，是以专注于单一责任的小型功能模块为基础、通过API集相互通信的方式完成复杂业务系统搭建的一种设计思想。\n<!-- more -->\n# 挑战性工作\n* 业务拆分，体现在设计环节：在设计的时候，要有足够的判断力来合理的规划服务之间的界限。\n\n* 服务治理，底层技术的支持：首先要选一款适合自己实际情况的分布式服务基础框架，对于服务的发现、治理、熔断、降级，都要做好相应的技术准备。\n\n* 自动测试，一定要自动化。微服务一个明显的表象就是随着服务的增多，如果继续沿用传统的测试模式就会遇到瓶颈，为了保证高效的迭代，尽量做到更多的环节实现自动化。\n\n* 自动运维 ：微服务拆分之后，每个服务都可以独立部署，进而言之应该是随时随地可以升级。尤其当互联网发展到今天，业务要保持对市场变化的一个高效响应，自动化运维就是提升交付速度的一个重要环节。\n\n* 监控：包括硬件环境、服务状态、系统健康度、接口调用情况、异常的实时告警以及潜在问题的事先预警等等。监控在实施微服务过程中会重要到什么程度呢?一句话：没准备好监控，就不要搞微服务。\n\n# 微服务框架选择\n[文章](https://blog.csdn.net/u010664947/article/details/80007767)\nSpring Cloud整机，dubbo需要自己组装；整机的性能有保证，组装的机子更自由。\n注册中心：dubbo可以选择zk、redis，Spring Cloud只能用Eureka或自研\nCAP理论：Zookeeper 保证的是CP，Eureka 设计则遵循AP原则\n\n# Spring Cloud特性：\n* 分布式/版本化配置(Distributed/versioned configuration)\n\n* 服务注册与发现(Service registration and discovery)\n\n* 路由(Routing)\n\n* 服务和服务之间的调用(Service-to-service calls)\n\n* 负载均衡(Load balancing)\n\n* 断路器(Circuit Breakers)\n\n* 全局锁(Global locks)\n\n* 选主与集群状态(Leadership election and cluster state)\n\n* 分布式消息传递(Distributed messaging)\n\n# 官方文档\n## Spring Cloud\n[官方文档](http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html)\n## Spring Cloud Data Flow\n[官方文档](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started)\n","slug":"20180916","published":1,"date":"2018-09-21T01:25:55.558Z","updated":"2018-10-22T07:27:32.543Z","_id":"cjnaatg8q0012dwv355dzki8p","comments":1,"layout":"post","photos":[],"link":"","content":"<p>架构演进趋势：单体架构、垂直架构、SOA架构、微服务架构<br>微服务架构，是以专注于单一责任的小型功能模块为基础、通过API集相互通信的方式完成复杂业务系统搭建的一种设计思想。<br><a id=\"more\"></a></p>\n<h1 id=\"挑战性工作\"><a href=\"#挑战性工作\" class=\"headerlink\" title=\"挑战性工作\"></a>挑战性工作</h1><ul>\n<li><p>业务拆分，体现在设计环节：在设计的时候，要有足够的判断力来合理的规划服务之间的界限。</p>\n</li>\n<li><p>服务治理，底层技术的支持：首先要选一款适合自己实际情况的分布式服务基础框架，对于服务的发现、治理、熔断、降级，都要做好相应的技术准备。</p>\n</li>\n<li><p>自动测试，一定要自动化。微服务一个明显的表象就是随着服务的增多，如果继续沿用传统的测试模式就会遇到瓶颈，为了保证高效的迭代，尽量做到更多的环节实现自动化。</p>\n</li>\n<li><p>自动运维 ：微服务拆分之后，每个服务都可以独立部署，进而言之应该是随时随地可以升级。尤其当互联网发展到今天，业务要保持对市场变化的一个高效响应，自动化运维就是提升交付速度的一个重要环节。</p>\n</li>\n<li><p>监控：包括硬件环境、服务状态、系统健康度、接口调用情况、异常的实时告警以及潜在问题的事先预警等等。监控在实施微服务过程中会重要到什么程度呢?一句话：没准备好监控，就不要搞微服务。</p>\n</li>\n</ul>\n<h1 id=\"微服务框架选择\"><a href=\"#微服务框架选择\" class=\"headerlink\" title=\"微服务框架选择\"></a>微服务框架选择</h1><p><a href=\"https://blog.csdn.net/u010664947/article/details/80007767\" target=\"_blank\" rel=\"external\">文章</a><br>Spring Cloud整机，dubbo需要自己组装；整机的性能有保证，组装的机子更自由。<br>注册中心：dubbo可以选择zk、redis，Spring Cloud只能用Eureka或自研<br>CAP理论：Zookeeper 保证的是CP，Eureka 设计则遵循AP原则</p>\n<h1 id=\"Spring-Cloud特性：\"><a href=\"#Spring-Cloud特性：\" class=\"headerlink\" title=\"Spring Cloud特性：\"></a>Spring Cloud特性：</h1><ul>\n<li><p>分布式/版本化配置(Distributed/versioned configuration)</p>\n</li>\n<li><p>服务注册与发现(Service registration and discovery)</p>\n</li>\n<li><p>路由(Routing)</p>\n</li>\n<li><p>服务和服务之间的调用(Service-to-service calls)</p>\n</li>\n<li><p>负载均衡(Load balancing)</p>\n</li>\n<li><p>断路器(Circuit Breakers)</p>\n</li>\n<li><p>全局锁(Global locks)</p>\n</li>\n<li><p>选主与集群状态(Leadership election and cluster state)</p>\n</li>\n<li><p>分布式消息传递(Distributed messaging)</p>\n</li>\n</ul>\n<h1 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h1><h2 id=\"Spring-Cloud\"><a href=\"#Spring-Cloud\" class=\"headerlink\" title=\"Spring Cloud\"></a>Spring Cloud</h2><p><a href=\"http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"Spring-Cloud-Data-Flow\"><a href=\"#Spring-Cloud-Data-Flow\" class=\"headerlink\" title=\"Spring Cloud Data Flow\"></a>Spring Cloud Data Flow</h2><p><a href=\"https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"<p>架构演进趋势：单体架构、垂直架构、SOA架构、微服务架构<br>微服务架构，是以专注于单一责任的小型功能模块为基础、通过API集相互通信的方式完成复杂业务系统搭建的一种设计思想。<br>","more":"</p>\n<h1 id=\"挑战性工作\"><a href=\"#挑战性工作\" class=\"headerlink\" title=\"挑战性工作\"></a>挑战性工作</h1><ul>\n<li><p>业务拆分，体现在设计环节：在设计的时候，要有足够的判断力来合理的规划服务之间的界限。</p>\n</li>\n<li><p>服务治理，底层技术的支持：首先要选一款适合自己实际情况的分布式服务基础框架，对于服务的发现、治理、熔断、降级，都要做好相应的技术准备。</p>\n</li>\n<li><p>自动测试，一定要自动化。微服务一个明显的表象就是随着服务的增多，如果继续沿用传统的测试模式就会遇到瓶颈，为了保证高效的迭代，尽量做到更多的环节实现自动化。</p>\n</li>\n<li><p>自动运维 ：微服务拆分之后，每个服务都可以独立部署，进而言之应该是随时随地可以升级。尤其当互联网发展到今天，业务要保持对市场变化的一个高效响应，自动化运维就是提升交付速度的一个重要环节。</p>\n</li>\n<li><p>监控：包括硬件环境、服务状态、系统健康度、接口调用情况、异常的实时告警以及潜在问题的事先预警等等。监控在实施微服务过程中会重要到什么程度呢?一句话：没准备好监控，就不要搞微服务。</p>\n</li>\n</ul>\n<h1 id=\"微服务框架选择\"><a href=\"#微服务框架选择\" class=\"headerlink\" title=\"微服务框架选择\"></a>微服务框架选择</h1><p><a href=\"https://blog.csdn.net/u010664947/article/details/80007767\" target=\"_blank\" rel=\"external\">文章</a><br>Spring Cloud整机，dubbo需要自己组装；整机的性能有保证，组装的机子更自由。<br>注册中心：dubbo可以选择zk、redis，Spring Cloud只能用Eureka或自研<br>CAP理论：Zookeeper 保证的是CP，Eureka 设计则遵循AP原则</p>\n<h1 id=\"Spring-Cloud特性：\"><a href=\"#Spring-Cloud特性：\" class=\"headerlink\" title=\"Spring Cloud特性：\"></a>Spring Cloud特性：</h1><ul>\n<li><p>分布式/版本化配置(Distributed/versioned configuration)</p>\n</li>\n<li><p>服务注册与发现(Service registration and discovery)</p>\n</li>\n<li><p>路由(Routing)</p>\n</li>\n<li><p>服务和服务之间的调用(Service-to-service calls)</p>\n</li>\n<li><p>负载均衡(Load balancing)</p>\n</li>\n<li><p>断路器(Circuit Breakers)</p>\n</li>\n<li><p>全局锁(Global locks)</p>\n</li>\n<li><p>选主与集群状态(Leadership election and cluster state)</p>\n</li>\n<li><p>分布式消息传递(Distributed messaging)</p>\n</li>\n</ul>\n<h1 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h1><h2 id=\"Spring-Cloud\"><a href=\"#Spring-Cloud\" class=\"headerlink\" title=\"Spring Cloud\"></a>Spring Cloud</h2><p><a href=\"http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"Spring-Cloud-Data-Flow\"><a href=\"#Spring-Cloud-Data-Flow\" class=\"headerlink\" title=\"Spring Cloud Data Flow\"></a>Spring Cloud Data Flow</h2><p><a href=\"https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started\" target=\"_blank\" rel=\"external\">官方文档</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjnaatg7g0008dwv3u2dtj7rk","category_id":"cjnaatg770005dwv32ab3wy83","_id":"cjnaatg7u000edwv3w65oeodt"},{"post_id":"cjnaatg6u0002dwv3a3qk9inm","category_id":"cjnaatg770005dwv32ab3wy83","_id":"cjnaatg81000jdwv3ejwu821u"},{"post_id":"cjnaatg7i0009dwv37cua4owm","category_id":"cjnaatg770005dwv32ab3wy83","_id":"cjnaatg85000mdwv3z5huxhpj"},{"post_id":"cjnaatg7p000ddwv3mvaombhi","category_id":"cjnaatg770005dwv32ab3wy83","_id":"cjnaatg8b000rdwv3ic4d6qh6"},{"post_id":"cjnaatg720004dwv3ton2wnos","category_id":"cjnaatg770005dwv32ab3wy83","_id":"cjnaatg8d000udwv3li4zzczj"},{"post_id":"cjnaatg7w000gdwv37u5m5pnu","category_id":"cjnaatg770005dwv32ab3wy83","_id":"cjnaatg8k000xdwv3uvjxemq3"},{"post_id":"cjnaatg7e0007dwv3qpy2x53h","category_id":"cjnaatg7z000hdwv3a27oq30w","_id":"cjnaatg8p0011dwv3nbm7a7r5"},{"post_id":"cjnaatg86000odwv3vwe28j2h","category_id":"cjnaatg770005dwv32ab3wy83","_id":"cjnaatg8s0013dwv32gcsfpxq"},{"post_id":"cjnaatg8l000ydwv3vtc97c0c","category_id":"cjnaatg7z000hdwv3a27oq30w","_id":"cjnaatg8x001bdwv3l0i1ok93"},{"post_id":"cjnaatg8b000sdwv3mp55mlrt","category_id":"cjnaatg8o000zdwv329w0bybs","_id":"cjnaatg8z001fdwv364fijwoi"},{"post_id":"cjnaatg6e0000dwv3v4v06h8d","category_id":"cjnaatg8o000zdwv329w0bybs","_id":"cjnae9561000110v3t9f56wqm"},{"post_id":"cjnaatg82000ldwv39avok7lu","category_id":"cjnaatg770005dwv32ab3wy83","_id":"cjnfbrnuh0004mov35r9ydght"},{"post_id":"cjnaatg8q0012dwv355dzki8p","category_id":"cjnaatg8a000qdwv38nxhdusk","_id":"cjnfbrnuo0007mov3iv7hi1et"}],"PostTag":[{"post_id":"cjnaatg7g0008dwv3u2dtj7rk","tag_id":"cjnaatg7c0006dwv3eelq2fo8","_id":"cjnaatg7o000cdwv3skv9bljh"},{"post_id":"cjnaatg720004dwv3ton2wnos","tag_id":"cjnaatg7c0006dwv3eelq2fo8","_id":"cjnaatg85000ndwv3300qk8b9"},{"post_id":"cjnaatg7e0007dwv3qpy2x53h","tag_id":"cjnaatg80000idwv340w0aeag","_id":"cjnaatg8d000tdwv30neeb1o2"},{"post_id":"cjnaatg7w000gdwv37u5m5pnu","tag_id":"cjnaatg7c0006dwv3eelq2fo8","_id":"cjnaatg8u0015dwv3r02icno0"},{"post_id":"cjnaatg7w000gdwv37u5m5pnu","tag_id":"cjnaatg8j000wdwv3gotzlbt9","_id":"cjnaatg8v0017dwv323p8rb0w"},{"post_id":"cjnaatg8b000sdwv3mp55mlrt","tag_id":"cjnaatg8z001edwv3c8799s2v","_id":"cjnaatg92001idwv3i07f906o"},{"post_id":"cjnaatg8l000ydwv3vtc97c0c","tag_id":"cjnaatg80000idwv340w0aeag","_id":"cjnaatg95001ldwv3lx9h5eqr"},{"post_id":"cjnaatg8l000ydwv3vtc97c0c","tag_id":"cjnaatg93001jdwv3ebtd1bmc","_id":"cjnaatg96001mdwv3gl5f0h02"},{"post_id":"cjnaatg6u0002dwv3a3qk9inm","tag_id":"cjnaatg8w0019dwv387ef63a8","_id":"cjnfbrntv0000mov3agns1pc5"},{"post_id":"cjnaatg7i0009dwv37cua4owm","tag_id":"cjnaatg7c0006dwv3eelq2fo8","_id":"cjnfbrnu40001mov3xofscfnz"},{"post_id":"cjnaatg7p000ddwv3mvaombhi","tag_id":"cjnaatg89000pdwv38flu1j35","_id":"cjnfbrnu70002mov3mibfke98"},{"post_id":"cjnaatg86000odwv3vwe28j2h","tag_id":"cjnae9561000010v33d4o6j9j","_id":"cjnfbrnuk0005mov3rlcq2s6a"},{"post_id":"cjnaatg8q0012dwv355dzki8p","tag_id":"cjnaatg8t0014dwv33kotlzsj","_id":"cjnfbrnum0006mov3w4ozxwvv"},{"post_id":"cjnaatg82000ldwv39avok7lu","tag_id":"cjnfbrnua0003mov335t7tbqx","_id":"cjnfbrnuo0008mov3qr3szsef"},{"post_id":"cjnaatg7p000ddwv3mvaombhi","tag_id":"cjnfn2i7l0000bwvfpu9n1mns","_id":"cjnfn2i7v0004bwvf9j0q831t"},{"post_id":"cjnaatg7p000ddwv3mvaombhi","tag_id":"cjnfn2i7r0001bwvfnzl12gd3","_id":"cjnfn2i7v0005bwvf16hpsiyq"},{"post_id":"cjnaatg7p000ddwv3mvaombhi","tag_id":"cjnfn2i7t0002bwvfi9aexyrq","_id":"cjnfn2i7v0006bwvfpn5s8lnm"},{"post_id":"cjnaatg7p000ddwv3mvaombhi","tag_id":"cjnfn2i7u0003bwvf3698ovrr","_id":"cjnfn2i7v0007bwvfv57qlucj"}],"Tag":[{"name":"Java","_id":"cjnaatg7c0006dwv3eelq2fo8"},{"name":"MySQL","_id":"cjnaatg80000idwv340w0aeag"},{"name":"Spring","_id":"cjnaatg89000pdwv38flu1j35"},{"name":"多线程","_id":"cjnaatg8j000wdwv3gotzlbt9"},{"name":"微服务","_id":"cjnaatg8t0014dwv33kotlzsj"},{"name":"BPM","_id":"cjnaatg8w0019dwv387ef63a8"},{"name":"面试","_id":"cjnaatg8z001edwv3c8799s2v"},{"name":"其他","_id":"cjnaatg91001hdwv305cl22mb"},{"name":"Oracle","_id":"cjnaatg93001jdwv3ebtd1bmc"},{"name":"设计模式","_id":"cjnae9561000010v33d4o6j9j"},{"name":"Tomcat","_id":"cjnfbrnua0003mov335t7tbqx"},{"name":"SpringMVC","_id":"cjnfn2i7l0000bwvfpu9n1mns"},{"name":"Hibernate","_id":"cjnfn2i7r0001bwvfnzl12gd3"},{"name":"MyBatis","_id":"cjnfn2i7t0002bwvfi9aexyrq"},{"name":"Spring Boot","_id":"cjnfn2i7u0003bwvf3698ovrr"}]}}